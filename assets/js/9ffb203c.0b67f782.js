"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[877],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>h});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function p(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?p(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},p=Object.keys(e);for(t=0;t<p.length;t++)r=p[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)r=p[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,p=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=s(r),d=o,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||p;return r?t.createElement(h,a(a({ref:n},l),{},{components:r})):t.createElement(h,a({ref:n},l))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var p=r.length,a=new Array(p);a[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[m]="string"==typeof e?e:o,a[1]=i;for(var s=2;s<p;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9316:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>p,metadata:()=>i,toc:()=>s});var t=r(7462),o=(r(7294),r(3905));const p={tags:["python","imageio"]},a=void 0,i={unversionedId:"\u56fe\u7247\u62fc\u63a5",id:"\u56fe\u7247\u62fc\u63a5",title:"\u56fe\u7247\u62fc\u63a5",description:"",source:"@site/sheets/\u56fe\u7247\u62fc\u63a5.md",sourceDirName:".",slug:"/\u56fe\u7247\u62fc\u63a5",permalink:"/sheets/\u56fe\u7247\u62fc\u63a5",draft:!1,editUrl:"https://github.com/jiangmiemie/blog/blob/master/sheets/\u56fe\u7247\u62fc\u63a5.md",tags:[{label:"python",permalink:"/sheets/tags/python"},{label:"imageio",permalink:"/sheets/tags/imageio"}],version:"current",frontMatter:{tags:["python","imageio"]},sidebar:"tutorialSidebar",previous:{title:"\u56fe\u7247\u526a\u88c1",permalink:"/sheets/\u56fe\u7247\u526a\u88c1"},next:{title:"\u5806\u53e0\u67f1\u72b6\u56fe",permalink:"/sheets/\u5806\u53e0\u67f1\u72b6\u56fe"}},c={},s=[],l={toc:s},m="wrapper";function u(e){let{components:n,...r}=e;return(0,o.kt)(m,(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\n'''\n\u56fe\u7247\u62fc\u63a5\n'''\n\n# encoding: utf-8\ndef merge_LR(pics): #\u5de6\u53f3\u62fc\u63a5\n    from imageio import imread\n    import skimage.io as io\n    import numpy as np\n    A_wordcould_path = 'wordcould1.png'#\u5408\u5e76\u540e\u56fe\u7247\u7684\u540d\u5b57\n    #\u6a2a\u5411\u62fc\u63a5\n    \u56fe\u72471 = io.imread(pics[0])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    \u56fe\u72472 = io.imread(pics[1])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    #print(\u56fe\u72471.dtype)\n    \u56fe\u72471_h = \u56fe\u72471.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72471_w = \u56fe\u72471.shape[1]\n    \u56fe\u72471_c = \u56fe\u72471.shape[2]\n    \u56fe\u72472_h = \u56fe\u72472.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72472_w = \u56fe\u72472.shape[1]\n    if \u56fe\u72471_h >= \u56fe\u72472_h :\n        pj1 = np.zeros((\u56fe\u72471_h,\u56fe\u72471_w+\u56fe\u72472_w,\u56fe\u72471_c))   #\u6a2a\u5411\u62fc\u63a5\n    else:\n        pj1 = np.zeros((\u56fe\u72472_h,\u56fe\u72471_w+\u56fe\u72472_w,\u56fe\u72471_c))  #\u6a2a\u5411\u62fc\u63a5\n    pj1[:,:\u56fe\u72471_w,:] = \u56fe\u72471.copy()   #\u56fe\u7247\u56fe\u72471\u5728\u5de6\n    pj1[:,\u56fe\u72472_w:,:] = \u56fe\u72472.copy()   #\u56fe\u7247\u56fe\u72472\u5728\u53f3\n    pj1=np.array(pj1,dtype=np.uint8)   #\u5c06pj1\u6570\u7ec4\u5143\u7d20\u6570\u636e\u7c7b\u578b\u7684\u6539\u4e3a\"uint8\"\n    io.imsave(A_wordcould_path, pj1)   #\u4fdd\u5b58\u62fc\u63a5\u540e\u7684\u56fe\u7247\n\ndef merge_UD(pics): #\u4e0a\u4e0b\u62fc\u63a5\n    from imageio import imread\n    import skimage.io as io\n    import numpy as np\n    B_wordcould_path = 'wordcould2.png'\n    # \u4e0a\u9762\u4e0e\u4e0b\u9762\u62fc\u63a5\n    \u56fe\u72471 = io.imread(pics[0])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    \u56fe\u72472 = io.imread(pics[1])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    \u56fe\u72471_h = \u56fe\u72471.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72471_w = \u56fe\u72471.shape[1]\n    \u56fe\u72471_c = \u56fe\u72471.shape[2]\n    \u56fe\u72472_h = \u56fe\u72472.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72472_w = \u56fe\u72472.shape[1]\n    if \u56fe\u72471_w >= \u56fe\u72472_w :\n        pj = np.zeros((\u56fe\u72471_h+\u56fe\u72472_h,\u56fe\u72471_w,\u56fe\u72471_c))   #\u7ad6\u5411\u62fc\u63a5\n    else:\n        pj = np.zeros((\u56fe\u72472_h+\u56fe\u72472_h,\u56fe\u72472_w,\u56fe\u72471_c))  #\u7ad6\u5411\u62fc\u63a5\n    #\u8ba1\u7b97\u6700\u7ec8\u56fe\u7247\u7684\u50cf\u7d20\u5927\u5c0f\n    pj[:\u56fe\u72471_h,:,:] = \u56fe\u72471.copy()   #\u56fe\u7247\u56fe\u72471\u5728\u5de6\n    pj[\u56fe\u72472_h:,:,:] = \u56fe\u72472.copy()   #\u56fe\u7247\u56fe\u72472\u5728\u53f3\n    pj=np.array(pj,dtype=np.uint8)   #\u5c06pj\u6570\u7ec4\u5143\u7d20\u6570\u636e\u7c7b\u578b\u7684\u6539\u4e3a\"uint8\"\n    io.imsave(B_wordcould_path, pj)   #\u4fdd\u5b58\u62fc\u63a5\u540e\u7684\u56fe\u7247\n\npics = ['3.png','4.png']\nmerge_LR(pics) #\u5de6\u53f3\n#merge_UD(pics)#\u4e0a\u4e0b\n\n")))}u.isMDXComponent=!0}}]);