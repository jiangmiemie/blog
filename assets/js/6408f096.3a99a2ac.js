"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[230],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),h=o,f=d["".concat(s,".").concat(h)]||d[h]||m[h]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=h;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[d]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={tags:["python","office"],title:"Python\u64cd\u4f5cWORD"},i=void 0,p={unversionedId:"Python\u64cd\u4f5cWORD",id:"Python\u64cd\u4f5cWORD",title:"Python\u64cd\u4f5cWORD",description:"\u4fee\u6539word\u6587\u4ef6",source:"@site/sheets/Python\u64cd\u4f5cWORD.md",sourceDirName:".",slug:"/Python\u64cd\u4f5cWORD",permalink:"/sheets/Python\u64cd\u4f5cWORD",draft:!1,editUrl:"https://github.com/jiangmiemie/blog/blob/master/sheets/Python\u64cd\u4f5cWORD.md",tags:[{label:"python",permalink:"/sheets/tags/python"},{label:"office",permalink:"/sheets/tags/office"}],version:"current",frontMatter:{tags:["python","office"],title:"Python\u64cd\u4f5cWORD"},sidebar:"tutorialSidebar",previous:{title:"Python\u64cd\u4f5cPDF",permalink:"/sheets/Python\u64cd\u4f5cPDF"},next:{title:"Python\u64cd\u4f5cpyecharts",permalink:"/sheets/Python\u64cd\u4f5cpyecharts"}},s={},l=[{value:"\u4fee\u6539word\u6587\u4ef6",id:"\u4fee\u6539word\u6587\u4ef6",level:2},{value:"\u66f4\u6539Word\u65b9\u5411",id:"\u66f4\u6539word\u65b9\u5411",level:2},{value:"\u63d0\u53d6Word\u5185\u56fe\u7247",id:"\u63d0\u53d6word\u5185\u56fe\u7247",level:2}],c={toc:l},d="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u4fee\u6539word\u6587\u4ef6"},"\u4fee\u6539word\u6587\u4ef6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import docx\nimport os\n\n\ndef replace_words(path, old, new):\n    """\n    :param path:\u6587\u4ef6\u8def\u5f84\n    :param old:\u9700\u8981\u66ff\u6362\u7684keyword\n    :param new:\u65b0\u7684\u66ff\u6362\u540e\u7684keyword\n    """\n    if path.endswith(".docx"):\n        # \u4e0d\u652f\u6301\u8bfb\u53d6doc\u683c\u5f0f\u7684\u6587\u4ef6\n        doc = docx.Document(path)\n        for paragraph in doc.paragraphs:\n            for run in paragraph.runs:\n                if run.text:\n                    run.text = run.text.replace(old, new)\n            doc.save(path)\n    else:\n        raise ValueError("\u53ea\u652f\u6301docx\u6587\u4ef6\u683c\u5f0f!")\n\n\nif __name__ == \'__main__\':\n    dir_path = \'./replace_word_keyword\'\n    old_keyword = "AI"\n    new_keyword = "\u4eba\u5de5\u667a\u80fd"\n    files = os.listdir(path=dir_path)\n    for file in files:\n        try:\n            replace_words(os.path.join(dir_path, file), old_keyword, new_keyword)\n            print("{}\u5df2\u7ecf\u4fee\u6539\u6210\u529f".format(file))\n        except ValueError as e:\n            print("{}\u53d1\u751f\u5982\u4e0b\u9519\u8bef\\n{}".format(file, e))\n')),(0,o.kt)("h2",{id:"\u66f4\u6539word\u65b9\u5411"},"\u66f4\u6539Word\u65b9\u5411"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import docx\nimport os\n\ndef change_forward(word_path, result_path):\n    '''\n    \u6539\u53d8word\u6587\u6863\u7684\u65b9\u5411\n    :param word_path: word\u8def\u5f84\n    '''\n    # \u521b\u5efa\u4fdd\u5b58\u8def\u5f84\n    if not os.path.exists(result_path):\n        os.makedirs(result_path)\n    doc = docx.Document(word_path)\n    for section in doc.sections:\n        # \u4ea4\u66ff\u5bbd\u9ad8\n        section.page_width,section.page_height = section.page_height ,section.page_width\n    # \u4fdd\u5b58\u4e3a\u65b0\u6587\u4ef6\n    doc.save(os.path.join(result_path,word_path)) \n \nif __name__ == '__main__':\n\n    #\u83b7\u53d6\u6587\u4ef6\u5939\u4e0b\u7684word\u6587\u6863\u5217\u8868,\u8def\u5f84\u81ea\u5b9a\u4e49\n    path = 'path'\n    spam=os.listdir(path)\n    os.chdir(path)\n    for i in spam:\n        if i.endswith('.docx'):\n            change_forward(str(i),'new')\n")),(0,o.kt)("h2",{id:"\u63d0\u53d6word\u5185\u56fe\u7247"},"\u63d0\u53d6Word\u5185\u56fe\u7247"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\nimport docx,os, re,cv2\nimport numpy as np\n\ndef get_pictures(word_path, result_path):\n    \"\"\"\n    \u56fe\u7247\u63d0\u53d6\n    :param word_path: word\u8def\u5f84\n    :result_path: \u4fdd\u5b58\u8def\u5f84\n    :return: \n    \"\"\"\n    # \u521b\u5efa\u4fdd\u5b58\u8def\u5f84\n    if not os.path.exists(result_path):\n        os.makedirs(result_path)\n    # \u8bfb\u53d6\u6587\u4ef6\n    doc = docx.Document(word_path)\n\n    # \u83b7\u53d6\u56fe\u7247\n    dict_rel = doc.part._rels\n    for rel in dict_rel:\n        rel = dict_rel[rel]\n        if \"image\" in rel.target_ref:            \n            img_name = re.findall(\"/(.*)\", rel.target_ref)[0]\n            word_name = os.path.splitext(word_path)[0]\n            if os.sep in word_name:\n                new_name = word_name.split('\\\\')[-1]\n            else:\n                new_name = word_name.split('/')[-1]\n            # cv2\u83b7\u53d6\u56fe\u7247\u5927\u5c0f\n            imgdata = np.frombuffer(rel.target_part.blob,np.uint8)\n            img_cv = cv2.imdecode(imgdata,cv2.IMREAD_ANYCOLOR)\n            img_name = '{}-{}-{}-{}'.format(new_name,img_cv.shape[0],img_cv.shape[1],img_name)\n            # \u76f4\u63a5\u4e8c\u8fdb\u5236\u5199\u5165\u517c\u5bb9\u6027\u6bd4\u4f7f\u7528CV2\u7684\u4fdd\u5b58\u56fe\u7247\u597d\n            with open(f'{result_path}/{img_name}','wb') as f:\n                f.write(rel.target_part.blob)\n        else:\n            pass\n \nif __name__ == '__main__':\n\n    #\u83b7\u53d6\u6587\u4ef6\u5939\u4e0b\u7684word\u6587\u6863\u5217\u8868,\u8def\u5f84\u81ea\u5b9a\u4e49\n    path = '\u7b2c\u4e8c\u7ae0 \u521b\u4eabRobot'\n    spam=os.listdir(path)\n    os.chdir(path)\n    for i in spam:\n        if i.endswith('.docx'):\n            get_pictures(str(i),os.getcwd())\n")))}m.isMDXComponent=!0}}]);