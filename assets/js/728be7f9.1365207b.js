"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[9987],{6924:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=r(5893),t=r(1151);const i={tags:["python","office"],title:"Python\u529e\u516c"},p=void 0,s={id:"Python\u529e\u516c",title:"Python\u529e\u516c",description:"Python\u64cd\u4f5c\u6587\u4ef6\u540d",source:"@site/sheets/Python\u529e\u516c.md",sourceDirName:".",slug:"/Python\u529e\u516c",permalink:"/sheets/Python\u529e\u516c",draft:!1,unlisted:!1,editUrl:"https://github.com/jiangyangcreate/jiangyangcreate.github.io/blob/main/sheets/Python\u529e\u516c.md",tags:[{label:"python",permalink:"/sheets/tags/python"},{label:"office",permalink:"/sheets/tags/office"}],version:"current",frontMatter:{tags:["python","office"],title:"Python\u529e\u516c"},sidebar:"tutorialSidebar",previous:{title:"\u6211\u7684\u6d4f\u89c8\u5668\u4e66\u7b7e",permalink:"/sheets/\u6211\u7684\u6d4f\u89c8\u5668\u4e66\u7b7e"},next:{title:"Python\u5c0f\u9879\u76ee",permalink:"/sheets/Python\u5c0f\u9879\u76ee"}},d={},o=[{value:"Python\u64cd\u4f5c\u6587\u4ef6\u540d",id:"python\u64cd\u4f5c\u6587\u4ef6\u540d",level:2},{value:"Python\u64cd\u4f5cEXCEL",id:"python\u64cd\u4f5cexcel",level:2},{value:"\u8868\u683c\u5206\u7ec4\u805a\u5408",id:"\u8868\u683c\u5206\u7ec4\u805a\u5408",level:3},{value:"\u590d\u5236\u8868\u683c\u6837\u5f0f",id:"\u590d\u5236\u8868\u683c\u6837\u5f0f",level:3},{value:"Python\u64cd\u4f5c\u56fe\u7247",id:"python\u64cd\u4f5c\u56fe\u7247",level:2},{value:"\u56fe\u7247\u8f6c\u65b9\u56fe\u5e76\u5207\u6210\u4e5d\u5bab\u683c",id:"\u56fe\u7247\u8f6c\u65b9\u56fe\u5e76\u5207\u6210\u4e5d\u5bab\u683c",level:3},{value:"\u56fe\u7247\u62fc\u63a5",id:"\u56fe\u7247\u62fc\u63a5",level:3},{value:"Python\u64cd\u4f5cipynb",id:"python\u64cd\u4f5cipynb",level:2},{value:"ipynb\u5408\u5e76",id:"ipynb\u5408\u5e76",level:3},{value:"ipynb\u8f6cmd",id:"ipynb\u8f6cmd",level:3},{value:"Python\u64cd\u4f5cPDF",id:"python\u64cd\u4f5cpdf",level:2},{value:"\u62c6\u5408PDF",id:"\u62c6\u5408pdf",level:3},{value:"PDF\u6dfb\u52a0\u6c34\u5370",id:"pdf\u6dfb\u52a0\u6c34\u5370",level:3},{value:"PDF\u8f6cWORD",id:"pdf\u8f6cword",level:3},{value:"\u4e07\u7269\u8f6cPDF",id:"\u4e07\u7269\u8f6cpdf",level:3},{value:"Python\u64cd\u4f5cWORD",id:"python\u64cd\u4f5cword",level:2},{value:"\u4fee\u6539word\u6587\u4ef6",id:"\u4fee\u6539word\u6587\u4ef6",level:3},{value:"\u66f4\u6539Word\u65b9\u5411",id:"\u66f4\u6539word\u65b9\u5411",level:3},{value:"\u63d0\u53d6Word\u5185\u56fe\u7247",id:"\u63d0\u53d6word\u5185\u56fe\u7247",level:3},{value:"\u4e8c\u7ef4\u7801",id:"\u4e8c\u7ef4\u7801",level:2},{value:"\u89e3\u6790\u4e8c\u7ef4\u7801",id:"\u89e3\u6790\u4e8c\u7ef4\u7801",level:3},{value:"\u751f\u6210\u4e8c\u7ef4\u7801",id:"\u751f\u6210\u4e8c\u7ef4\u7801",level:3},{value:"\u53d1\u9001\u90ae\u4ef6",id:"\u53d1\u9001\u90ae\u4ef6",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"python\u64cd\u4f5c\u6587\u4ef6\u540d",children:"Python\u64cd\u4f5c\u6587\u4ef6\u540d"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"\u5c0f\u660e\u7684\u6587\u4ef6\u5939\u7ed3\u6784\u4e3a\uff1a\n|-docs\n  |- 01a.md\n  |- 02b.md\n  |- 03c.md\n\n\u968f\u7740\u77e5\u8bc6\u50a8\u5907\u589e\u591a\uff0c\u73b0\u5728\u4ed6\u60f3\u62d3\u5145\u81ea\u5df1\u7684\u77e5\u8bc6\u5e93,\u628a\u76ee\u5f55\u7ed3\u6784\u4fee\u6539\u4e3a\uff1a\n\n|-docs\n |- 01a\n   |- a.md\n |- 02b\n   |- b.md\n |- 03c\n   |- c.md\n\n\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7a0b\u5e8f\u5b8c\u6210\u8fd9\u4e2a\u529f\u80fd\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import os\n\npath = "docs"\n\nfor i in os.listdir(path):\n    # \u8bfb\u53d6\u6587\u4ef6\u5939\u4e0b\u6240\u6709md\u7ed3\u5c3e\u7684\u6587\u4ef6\n    if i[-2:] == "md":\n        # \u83b7\u53d6\u539f\u6587\u4ef6\u8def\u5f84\n        file_path = os.path.join(path, i)\n        # \u83b7\u53d6\u8981\u751f\u6210\u7684\u6587\u4ef6\u5939\u8def\u5f84\uff0c\u6309\u81ea\u5df1\u60f3\u8981\u7684\u65b9\u5f0f\u622a\u53d6\u6587\u4ef6\u540d\u4f5c\u4e3a\u6587\u4ef6\u5939\u7684\u540d\u5b57\n        filef_path = os.path.join(path, i[:-3])\n        # \u521b\u5efa\u6587\u4ef6\u5939\n        os.makedirs(filef_path)\n        # \u751f\u6210\u79fb\u52a8\u5230\u6587\u4ef6\u5939\u540e\u7684\u6587\u4ef6\u8def\u5f84,\u53bb\u6389\u524d\u9762\u76842\u4f4d\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\n        new_file_path = os.path.join(filef_path, i[2:])\n        # \u79fb\u52a8\u6587\u4ef6\uff1a\u5176\u5b9e\u5c31\u662f\u6539\u6307\u9488\n        os.rename(file_path, new_file_path)\n\n# \u5982\u679c\u540e\u6094\u4e86\u60f3\u6539\u56de\u6765\nimport os\n\npath = "docs"\n\nfor a, b, c in os.walk(path):\n    if c != []:\n        file_path = os.path.join(a, c[0])\n        new_file_path = a + ".md"\n        os.rename(file_path, new_file_path)\n        os.remove(a)\n\n\n# \u5728\u6bcf\u4e2a\u6587\u4ef6\u7684\u5f00\u5934\u589e\u52a0\u6570\u636e\nimport os\n\npath = "docs"\n\nfor a, b, c in os.walk(path):\n    if c != []:\n        file_path = os.path.join(a, c[0])\n        # r+ \u53ef\u8bfb\u53ef\u5199\n        with open(file_path,\'r+\',encoding=\'utf-8\') as f:\n            old = f.read()\n            f.seek(0)\n            f.write("---\\nsidebar_position: 1\\n---\\n")\n            f.write(old)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"python\u64cd\u4f5cexcel",children:"Python\u64cd\u4f5cEXCEL"}),"\n",(0,a.jsx)(n.h3,{id:"\u8868\u683c\u5206\u7ec4\u805a\u5408",children:"\u8868\u683c\u5206\u7ec4\u805a\u5408"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# \u5206\u7ec4\u805a\u5408\ndef group(path, name):\n    wb = pd.read_excel(path)  # \u6253\u5f00excel\u8868\u683c\n    grade_df1 = wb.groupby(name)  # \u6309name\u5206\u7ec4\n    n = 1\n    for i in grade_df1:\n        writer = "{}.xlsx".format(n)\n        i[1].to_excel(writer, header=True, index=None)  # \u751f\u6210\u8868\u683c\n        n += 1\n\n\npath = r"data.xlsx"\ngroup(path, "years")  # \u5355\u4e2a\u6807\u7b7e\u5206\u7ec4\ngroup(path, ["code", "years"])  # \u591a\u4e2a\u6807\u7b7e\u5206\u7ec4\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u590d\u5236\u8868\u683c\u6837\u5f0f",children:"\u590d\u5236\u8868\u683c\u6837\u5f0f"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nimport copy\nimport openpyxl\nfrom openpyxl.utils import get_column_letter\n\npath = input('\u8f93\u5165\u4f60\u9700\u8981\u590d\u5236\u683c\u5f0f\u7684\u8868\u683c')\nsave_path = input('\u8f93\u5165\u4f60\u9700\u8981\u590d\u5236\u683c\u5f0f\u540e\u7684\u8868\u683c\u8def\u5f84')\n\nwb = openpyxl.load_workbook(path)\nwb2 = openpyxl.Workbook()\n\nsheetnames = wb.sheetnames\nfor sheetname in sheetnames:\n    print(sheetname)\n    sheet = wb[sheetname]\n    sheet2 = wb2.create_sheet(sheetname)\n\n    # \u590d\u5236tab\u989c\u8272\n    sheet2.sheet_properties.tabColor = sheet.sheet_properties.tabColor\n\n    # \u5f00\u59cb\u5904\u7406\u5408\u5e76\u5355\u5143\u683c\u5f62\u5f0f\u4e3a\u201c(<CellRange A1\uff1aA4>,)\uff0c\u66ff\u6362\u6389(<CellRange \u548c >,)' \u627e\u5230\u5408\u5e76\u5355\u5143\u683c\n    wm = list(sheet.merged_cells)\n    if len(wm) > 0:\n        for i in range(0, len(wm)):\n            cell2 = str(wm[i]).replace('(<CellRange ', '').replace('>,)', '')\n            sheet2.merge_cells(cell2)\n\n    # \u904d\u5386\u540e\uff0c\u5148\u5199\u5165\u6570\u636e\n    for i, row in enumerate(sheet.iter_rows()):\n        sheet2.row_dimensions[i+1].height = sheet.row_dimensions[i+1].height\n        for j, cell in enumerate(row):\n            sheet2.column_dimensions[get_column_letter(\n                j+1)].width = sheet.column_dimensions[get_column_letter(j+1)].width\n            sheet2.cell(row=i + 1, column=j + 1, value=cell.value)\n\n            # \u63a5\u7740\u9010\u4e00\u8bbe\u7f6e\u5355\u5143\u683c\u683c\u5f0f\n            source_cell = sheet.cell(i+1, j+1)\n            target_cell = sheet2.cell(i+1, j+1)\n            target_cell.fill = copy.copy(source_cell.fill)\n\n            # \u9ed8\u8ba4\u6837\u5f0f\u662f Normal\uff0c\u5982\u679c\u662f\u9ed8\u8ba4\u6837\u5f0f\uff0c\u8fd4\u56deFalse\uff0c\u4e0d\u89e6\u53d1if\uff0c\u53cd\u4e4b\u5219\u8fdb\u884c\u590d\u5236\n            if source_cell.has_style: \n\n                # \u8be5StyleableObject\u5b9e\u73b0\u5c06\u6837\u5f0f\u5b58\u50a8\u5728\u5355\u4e2a\u5217\u8868\u4e2d_style\uff0c\u5e76\u4e14\u5355\u5143\u683c\u4e0a\u7684\u6837\u5f0f\u5c5e\u6027\u5b9e\u9645\u4e0a\u662f\u8be5\u6570\u7ec4\u7684 getter \u548c setter\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u65b9\u7684\u5199\u6cd5\uff0c\u514b\u9686\u6837\u5f0f\u66f4\u5feb\n                target_cell._style = copy.copy(source_cell._style)\n\n                # \u590d\u5236\u5b57\u53f7\n                target_cell.font = copy.copy(source_cell.font)\n\n                # \u590d\u5236\u8fb9\u6846\n                target_cell.border = copy.copy(source_cell.border)\n\n                # \u590d\u5236\u586b\u5145\u6837\u5f0f\n                target_cell.fill = copy.copy(source_cell.fill)\n\n                # \u590d\u5236\u5b57\u4f53\u6837\u5f0f\n                target_cell.number_format = copy.copy(\n                    source_cell.number_format)\n\n                # \u590d\u5236\u6837\u5f0f\u4fdd\u62a4\n                target_cell.protection = copy.copy(source_cell.protection)\n\n                # \u590d\u5236\u5bf9\u9f50\u6837\u5f0f\n                target_cell.alignment = copy.copy(source_cell.alignment)\n\nif 'Sheet' in wb2.sheetnames:\n    del wb2['Sheet']\nwb2.save(save_path)\n\nwb.close()\nwb2.close()\n"})}),"\n",(0,a.jsx)(n.h2,{id:"python\u64cd\u4f5c\u56fe\u7247",children:"Python\u64cd\u4f5c\u56fe\u7247"}),"\n",(0,a.jsx)(n.h3,{id:"\u56fe\u7247\u8f6c\u65b9\u56fe\u5e76\u5207\u6210\u4e5d\u5bab\u683c",children:"\u56fe\u7247\u8f6c\u65b9\u56fe\u5e76\u5207\u6210\u4e5d\u5bab\u683c"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"'''\n\u8f6c\u65b9\u56fe\u5e76\u5207\u6210\u4e5d\u5bab\u683c\n'''\nfrom PIL import Image\nimport sys\nimport winreg\nimport os\n#\u5c06\u56fe\u7247\u586b\u5145\u4e3a\u6b63\u65b9\u5f62\ndef fill_image(image):\n    width, height = image.size\n    #\u9009\u53d6\u957f\u548c\u5bbd\u4e2d\u8f83\u5927\u503c\u4f5c\u4e3a\u65b0\u56fe\u7247\u7684\n    new_image_length = width if width > height else height\n    #\u751f\u6210\u65b0\u56fe\u7247[\u767d\u5e95]\n    new_image = Image.new(image.mode, (new_image_length, new_image_length), color='white')\n    #\u5c06\u4e4b\u524d\u7684\u56fe\u7c98\u8d34\u5728\u65b0\u56fe\u4e0a\uff0c\u5c45\u4e2d\n    if width > height:#\u539f\u56fe\u5bbd\u5927\u4e8e\u9ad8\uff0c\u5219\u586b\u5145\u56fe\u7247\u7684\u7ad6\u76f4\u7ef4\u5ea6\n        new_image.paste(image, (0, int((new_image_length - height) / 2)))#(x,y)\u4e8c\u5143\u7ec4\u8868\u793a\u7c98\u8d34\u4e0a\u56fe\u76f8\u5bf9\u4e0b\u56fe\u7684\u8d77\u59cb\u4f4d\u7f6e\n    else:\n        new_image.paste(image, (int((new_image_length - width) / 2),0))\n    return new_image\n#\u5207\u56fe\ndef cut_image(image):\n    width, height = image.size\n    item_width = int(width / 3)\n    box_list = []\n    # (left, upper, right, lower)\n    for i in range(0,3):\n        for j in range(0,3):\n            #print((i*item_width,j*item_width,(i+1)*item_width,(j+1)*item_width))\n            box = (j*item_width,i*item_width,(j+1)*item_width,(i+1)*item_width)\n            box_list.append(box)\n    \n    image_list = [image.crop(box) for box in box_list]\n\n    return image_list\n#\u4fdd\u5b58\ndef save_images(image_list):\n    Desktoppath = winreg.QueryValueEx(winreg.OpenKey(winreg.HKEY_CURRENT_USER,r'Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders'), \"Desktop\")[0]#\u83b7\u53d6\u7535\u8111\u7cfb\u7edf\u684c\u9762\u8def\u5f84\n    os.makedirs(Desktoppath+\"\\\\result\") #\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\n    newfiledirs = Desktoppath+\"\\\\result\"\n    index = 1\n    for image in image_list:\n        image.save(newfiledirs+\"\\\\\"+str(index) + '.png', 'PNG')\n        index += 1\n        \nif __name__ == '__main__':\n    \u6587\u4ef6\u8def\u5f84 = input('\u8bf7\u8f93\u5165\u4f60\u7684\u8f6c\u5316\u7684\u6587\u4ef6\u8def\u5f84\uff08\u522b\u5fd8\u4e86\u52a0\u6587\u4ef6\u540e\u7f00\u540d\u54e6\uff09\uff1a')\n    image = Image.open(\u6587\u4ef6\u8def\u5f84)#\u653e\u5165\u56fe\u7247\u8def\u5f84\n    image = fill_image(image) #\u586b\u5145\n    image_list = cut_image(image) #\u5207\u5272\n    save_images(image_list) #\u4fdd\u5b58\n"})}),"\n",(0,a.jsx)(n.h3,{id:"\u56fe\u7247\u62fc\u63a5",children:"\u56fe\u7247\u62fc\u63a5"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"'''\n\u56fe\u7247\u62fc\u63a5\n'''\n\n# encoding: utf-8\ndef merge_LR(pics): #\u5de6\u53f3\u62fc\u63a5\n    from imageio import imread\n    import skimage.io as io\n    import numpy as np\n    A_wordcould_path = 'wordcould1.png'#\u5408\u5e76\u540e\u56fe\u7247\u7684\u540d\u5b57\n    #\u6a2a\u5411\u62fc\u63a5\n    \u56fe\u72471 = io.imread(pics[0])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    \u56fe\u72472 = io.imread(pics[1])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    #print(\u56fe\u72471.dtype)\n    \u56fe\u72471_h = \u56fe\u72471.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72471_w = \u56fe\u72471.shape[1]\n    \u56fe\u72471_c = \u56fe\u72471.shape[2]\n    \u56fe\u72472_h = \u56fe\u72472.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72472_w = \u56fe\u72472.shape[1]\n    if \u56fe\u72471_h >= \u56fe\u72472_h :\n        pj1 = np.zeros((\u56fe\u72471_h,\u56fe\u72471_w+\u56fe\u72472_w,\u56fe\u72471_c))   #\u6a2a\u5411\u62fc\u63a5\n    else:\n        pj1 = np.zeros((\u56fe\u72472_h,\u56fe\u72471_w+\u56fe\u72472_w,\u56fe\u72471_c))  #\u6a2a\u5411\u62fc\u63a5\n    pj1[:,:\u56fe\u72471_w,:] = \u56fe\u72471.copy()   #\u56fe\u7247\u56fe\u72471\u5728\u5de6\n    pj1[:,\u56fe\u72472_w:,:] = \u56fe\u72472.copy()   #\u56fe\u7247\u56fe\u72472\u5728\u53f3\n    pj1=np.array(pj1,dtype=np.uint8)   #\u5c06pj1\u6570\u7ec4\u5143\u7d20\u6570\u636e\u7c7b\u578b\u7684\u6539\u4e3a\"uint8\"\n    io.imsave(A_wordcould_path, pj1)   #\u4fdd\u5b58\u62fc\u63a5\u540e\u7684\u56fe\u7247\n\ndef merge_UD(pics): #\u4e0a\u4e0b\u62fc\u63a5\n    from imageio import imread\n    import skimage.io as io\n    import numpy as np\n    B_wordcould_path = 'wordcould2.png'\n    # \u4e0a\u9762\u4e0e\u4e0b\u9762\u62fc\u63a5\n    \u56fe\u72471 = io.imread(pics[0])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    \u56fe\u72472 = io.imread(pics[1])   # np.ndarray, [h, w, c], \u503c\u57df(0, 255), RGB\n    \u56fe\u72471_h = \u56fe\u72471.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72471_w = \u56fe\u72471.shape[1]\n    \u56fe\u72471_c = \u56fe\u72471.shape[2]\n    \u56fe\u72472_h = \u56fe\u72472.shape[0]   #\u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f\n    \u56fe\u72472_w = \u56fe\u72472.shape[1]\n    if \u56fe\u72471_w >= \u56fe\u72472_w :\n        pj = np.zeros((\u56fe\u72471_h+\u56fe\u72472_h,\u56fe\u72471_w,\u56fe\u72471_c))   #\u7ad6\u5411\u62fc\u63a5\n    else:\n        pj = np.zeros((\u56fe\u72472_h+\u56fe\u72472_h,\u56fe\u72472_w,\u56fe\u72471_c))  #\u7ad6\u5411\u62fc\u63a5\n    #\u8ba1\u7b97\u6700\u7ec8\u56fe\u7247\u7684\u50cf\u7d20\u5927\u5c0f\n    pj[:\u56fe\u72471_h,:,:] = \u56fe\u72471.copy()   #\u56fe\u7247\u56fe\u72471\u5728\u5de6\n    pj[\u56fe\u72472_h:,:,:] = \u56fe\u72472.copy()   #\u56fe\u7247\u56fe\u72472\u5728\u53f3\n    pj=np.array(pj,dtype=np.uint8)   #\u5c06pj\u6570\u7ec4\u5143\u7d20\u6570\u636e\u7c7b\u578b\u7684\u6539\u4e3a\"uint8\"\n    io.imsave(B_wordcould_path, pj)   #\u4fdd\u5b58\u62fc\u63a5\u540e\u7684\u56fe\u7247\n\npics = ['3.png','4.png']\nmerge_LR(pics) #\u5de6\u53f3\n#merge_UD(pics)#\u4e0a\u4e0b\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"python\u64cd\u4f5cipynb",children:"Python\u64cd\u4f5cipynb"}),"\n",(0,a.jsx)(n.h3,{id:"ipynb\u5408\u5e76",children:"ipynb\u5408\u5e76"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'\n# \u5408\u5e76\u6587\u4ef6\u5939\u4e0b\u6240\u6709ipynb\u6587\u4ef6\ndef merge_ipynb(wpt):\n    if wpt.endswith("/"):\n        return\n    else:\n        wpt = wpt + "/"\n    path = wpt[:-1]\n\n    for root, dirs, files in os.walk(wpt):\n        flst = files\n    flst = [wpt + f for f in flst if f.endswith(".ipynb")]\n    jmain = json.load(open(flst[0], "r", encoding="utf-8"))\n    for f in flst[1:]:\n        jn = json.load(open(f, "r", encoding="utf-8"))\n        jmain["cells"].extend(jn["cells"])\n\n    with open("{}.ipynb".format(path), "w", encoding="utf-8") as wf:\n        json.dump(jmain, wf)  # \u5199\u5165\u6587\u4ef6\n'})}),"\n",(0,a.jsx)(n.h3,{id:"ipynb\u8f6cmd",children:"ipynb\u8f6cmd"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# ipynb\u8f6cmd\ndef ipynb2md(wpt, save_path=""):\n    md_file_name = os.path.join(save_path, wpt.replace(".ipynb", ".md"))\n    file_name = wpt.split("\\\\")[-1].split(".")[0]\n\n    try:\n        print(wpt)\n        ja = json.load(open(wpt, "r", encoding="utf-8"))\n        md_str = ""  # \u4e24\u79cd\u6a21\u5f0f\uff1a\u76f4\u63a5\u88c5\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cc\u6216\u88c5\u5230\u5217\u8868\u91cc\uff0c\u4e00\u884c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n\n        for c in ja["cells"]:\n            if c["cell_type"] == "markdown":\n                md_str = md_str + "\\n" + "".join(c["source"]) + "\\n\\n"\n            elif c["cell_type"] == "code":\n                md_str = md_str + "\\n```python \\n" + "".join(c["source"]) + "\\n```\\n\\n"\n        with open(md_file_name, "w", encoding="utf-8") as wf:\n            wf.write(md_str.replace("<>", "**<** **>**"))\n    except EOFError as e:\n        print(e)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"python\u64cd\u4f5cpdf",children:"Python\u64cd\u4f5cPDF"}),"\n",(0,a.jsx)(n.h3,{id:"\u62c6\u5408pdf",children:"\u62c6\u5408PDF"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'\nfrom PyPDF2 import PdfFileWriter, PdfFileReader, PdfFileMerger\nimport os\nfrom PyPDF2 import PdfFileReader, PdfFileMerger\n\n\ndef get_reader(filename, password):\n    try:\n        old_file = open(filename, "rb")\n    except IOError as err:\n        print("\u6587\u4ef6\u6253\u5f00\u5931\u8d25\uff01" + str(err))\n        return None\n\n    pdf_reader = PdfFileReader(old_file, strict=False)  # \u521b\u5efa\u8bfb\u5b9e\u4f8b\n    # \u89e3\u5bc6\u64cd\u4f5c\n    if pdf_reader.isEncrypted:\n        if password is None:\n            print("%s\u6587\u4ef6\u88ab\u52a0\u5bc6\uff0c\u9700\u8981\u5bc6\u7801\uff01" % filename)\n            return None\n        else:\n            if pdf_reader.decrypt(password) != 1:\n                print("%s\u5bc6\u7801\u4e0d\u6b63\u786e\uff01" % filename)\n                return None\n    if old_file in locals():\n        old_file.close()\n    return pdf_reader\n\n\ndef encrypt_pdf(filename, new_password, old_password=None, encrypted_filename=None):\n    """\u5bf9filename\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u8fdb\u884c\u52a0\u5bc6,\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\n    :param filename: \u6587\u4ef6\u5bf9\u5e94\u7684\u8def\u5f84\n    :param new_password: \u5bf9\u6587\u4ef6\u52a0\u5bc6\u4f7f\u7528\u7684\u5bc6\u7801\n    :param old_password: \u5982\u679c\u65e7\u6587\u4ef6\u8fdb\u884c\u4e86\u52a0\u5bc6\uff0c\u9700\u8981\u5bc6\u7801\n    :param encrypted_filename: \u52a0\u5bc6\u4e4b\u540e\u7684\u6587\u4ef6\u540d\uff0c\u7701\u5374\u65f6\u4f7f\u7528filename_encrypted;\n    :return:"""\n\n    pdf_reader = get_reader(filename, old_password)  # \u521b\u5efa\u4e00\u4e2aReader\u5b9e\u4f8b\n    if pdf_reader is None:\n        return\n    pdf_writer = PdfFileWriter()  # \u521b\u5efa\u4e00\u4e2a\u5199\u64cd\u4f5c\u7684\u5b9e\u4f8b\n    pdf_writer.appendPagesFromReader(pdf_reader)  # \u4ece\u4e4b\u524dReader\u4e2d\u5c06\u6570\u636e\u5199\u5165\u5230Writer\u4e2d\n    pdf_writer.encrypt(new_password)  # \u91cd\u65b0\u4f7f\u7528\u65b0\u5bc6\u7801\u52a0\u5bc6\n    if encrypted_filename is None:\n        encrypted_filename = (\n            "".join(filename.split(".")[:-1]) + "_" + "encrypted" + ".pdf"\n        )  # \u4f7f\u7528\u65e7\u6587\u4ef6\u540d + encrypted \u4f5c\u4e3a\u65b0\u7684\u6587\u4ef6\u540d\n    pdf_writer.write(open(encrypted_filename, "wb"))\n\n\ndef decrypt_pdf(filename, password, decrypted_filename=None):\n    """\u5c06\u52a0\u5bc6\u7684\u6587\u4ef6\u53ca\u9006\u884c\u89e3\u5bc6\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65e0\u9700\u5bc6\u7801pdf\u6587\u4ef6\n    :param filename: \u539f\u5148\u52a0\u5bc6\u7684pdf\u6587\u4ef6\n    :param password: \u5bf9\u5e94\u7684\u5bc6\u7801\n    :param decrypted_filename: \u89e3\u5bc6\u4e4b\u540e\u7684\u6587\u4ef6\u540d\n    :return:"""\n    pdf_reader = get_reader(filename, password)  # \u751f\u6210\u4e00\u4e2aReader\u548cWriter\n    if pdf_reader is None:\n        return\n    if not pdf_reader.isEncrypted:\n        print("\u6587\u4ef6\u6ca1\u6709\u88ab\u52a0\u5bc6\uff0c\u65e0\u9700\u64cd\u4f5c\uff01")\n        return\n    pdf_writer = PdfFileWriter()\n    pdf_writer.appendPagesFromReader(pdf_reader)\n    if decrypted_filename is None:\n        decrypted_filename = (\n            "".join(filename.split(".")[:-1]) + "_" + "decrypted" + ".pdf"\n        )\n    pdf_writer.write(open(decrypted_filename, "wb"))  # \u5199\u5165\u65b0\u6587\u4ef6\n\n\ndef split_by_pages(filename, pages, password=None):\n    """\u5c06\u6587\u4ef6\u6309\u7167\u9875\u6570\u8fdb\u884c\u5e73\u5747\u5206\u5272\n    :param filename: \u6240\u8981\u5206\u5272\u7684\u6587\u4ef6\u540d\n    :param pages: \u5206\u5272\u4e4b\u540e\u6bcf\u4e2a\u6587\u4ef6\u5bf9\u5e94\u7684\u9875\u6570\n    :param password: \u5982\u679c\u6587\u4ef6\u52a0\u5bc6\uff0c\u9700\u8981\u8fdb\u884c\u89e3\u5bc6\u64cd\u4f5c\n    :return:"""\n    pdf_reader = get_reader(filename, password)  # \u5f97\u5230Reader\n    if pdf_reader is None:\n        return\n    pages_nums = pdf_reader.numPages  # \u5f97\u5230\u603b\u7684\u9875\u6570\n    if pages <= 1:\n        print("\u6bcf\u4efd\u6587\u4ef6\u5fc5\u987b\u5927\u4e8e1\u9875\uff01")\n        return\n    pdf_num = (\n        pages_nums // pages + 1 if pages_nums % pages else int(pages_nums / pages)\n    )  # \u5f97\u5230\u5207\u5206\u4e4b\u540e\u6bcf\u4e2apdf\u6587\u4ef6\u7684\u9875\u6570\n    print("pdf\u6587\u4ef6\u88ab\u5206\u4e3a%d\u4efd\uff0c\u6bcf\u4efd\u6709%d\u9875\uff01" % (pdf_num, pages))\n    for cur_pdf_num in range(1, pdf_num + 1):  # \u4f9d\u6b21\u751f\u6210pdf\u6587\u4ef6\n        pdf_writer = PdfFileWriter()  # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5199\u5b9e\u4f8b\n        split_pdf_name = (\n            "".join(filename)[:-1] + "_" + str(cur_pdf_num) + ".pdf"\n        )  # \u751f\u6210\u5bf9\u5e94\u7684\u6587\u4ef6\u540d\u79f0\n        start = pages * (cur_pdf_num - 1)  # \u8ba1\u7b97\u51fa\u5f53\u524d\u5f00\u59cb\u7684\u4f4d\u7f6e\n        end = (\n            pages * cur_pdf_num if cur_pdf_num != pdf_num else pages_nums\n        )  # \u8ba1\u7b97\u51fa\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u662f\u6700\u540e\u4e00\u4efd\u5c31\u76f4\u63a5\u8fd4\u56de\u6700\u540e\u7684\u9875\u6570\uff0c\u5426\u5219\u7528\u6bcf\u4efd\u9875\u6570*\u5df2\u7ecf\u5206\u597d\u7684\u6587\u4ef6\u6570\n        # print(str(start) + \',\' + str(end))\n        for i in range(start, end):  # \u4f9d\u6b21\u8bfb\u53d6\u5bf9\u5e94\u7684\u9875\u6570\n            pdf_writer.addPage(pdf_reader.getPage(i))\n        pdf_writer.write(open(split_pdf_name, "wb"))  # \u5199\u5165\u6587\u4ef6\n\n\ndef split_by_num(filename, nums, password=None):\n    """\u5c06pdf\u6587\u4ef6\u5206\u4e3anums\u4efd\n    :param filename: \u6587\u4ef6\u540d\n    :param nums: \u8981\u5206\u6210\u7684\u4efd\u6570\n    :param password: \u5982\u679c\u9700\u8981\u89e3\u5bc6\uff0c\u8f93\u5165\u5bc6\u7801\n    :return:"""\n    pdf_reader = get_reader(filename, password)\n    if not pdf_reader:\n        return\n    if nums < 2:\n        print("\u4efd\u6570\u4e0d\u80fd\u5c0f\u4e8e2\uff01")\n        return\n    pages = pdf_reader.numPages  # \u5f97\u5230pdf\u7684\u603b\u9875\u6570\n    if pages < nums:\n        print("\u4efd\u6570\u4e0d\u5e94\u8be5\u5927\u4e8epdf\u603b\u9875\u6570\uff01")\n        return\n    each_pdf = pages // nums  # \u8ba1\u7b97\u6bcf\u4efd\u5e94\u8be5\u6709\u591a\u5c11\u9875\n    print("pdf\u5171\u6709%d\u9875\uff0c\u5206\u4e3a%d\u4efd\uff0c\u6bcf\u4efd\u6709%d\u9875\uff01" % (pages, nums, each_pdf))\n\n    for num in range(1, nums + 1):\n        pdf_writer = PdfFileWriter()  # \u751f\u6210\u5bf9\u5e94\u7684\u6587\u4ef6\u540d\u79f0\n        split_pdf_name = "".join(filename)[:-1] + "_" + str(num) + ".pdf"  # \u8ba1\u7b97\u51fa\u5f53\u524d\u5f00\u59cb\u7684\u4f4d\u7f6e\n        start = each_pdf * (num - 1)  # \u8ba1\u7b97\u51fa\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u662f\u6700\u540e\u4e00\u4efd\u5c31\u76f4\u63a5\u8fd4\u56de\u6700\u540e\u7684\u9875\u6570\uff0c\u5426\u5219\u7528\u6bcf\u4efd\u9875\u6570*\u5df2\u7ecf\u5206\u597d\u7684\u6587\u4ef6\u6570\n        end = each_pdf * num if num != nums else pages\n        print(str(start) + "," + str(end))\n        for i in range(start, end):\n            pdf_writer.addPage(pdf_reader.getPage(i))\n        pdf_writer.write(open(split_pdf_name, "wb"))\n\n\ndef merger_pdf(filenames, merged_name, passwords=None):\n    """\u4f20\u8fdb\u6765\u4e00\u4e2a\u6587\u4ef6\u5217\u8868\uff0c\u5c06\u5176\u4f9d\u6b21\u878d\u5408\u8d77\u6765\n    :param filenames: \u6587\u4ef6\u5217\u8868\n    :param passwords: \u5bf9\u5e94\u7684\u5bc6\u7801\u5217\u8868\n    :return:"""\n    filenums = len(filenames)  # \u8ba1\u7b97\u5171\u6709\u591a\u5c11\u6587\u4ef6\n    pdf_merger = PdfFileMerger(False)  # \u6ce8\u610f\u9700\u8981\u4f7f\u7528False \u53c2\u6570\n    for i in range(filenums):\n        if passwords is None:  # \u5f97\u5230\u5bc6\u7801\n            password = None\n        else:\n            password = passwords[i]\n        pdf_reader = get_reader(filenames[i], password)\n        if not pdf_reader:\n            return\n        pdf_merger.append(pdf_reader)  # append\u9ed8\u8ba4\u6dfb\u52a0\u5230\u6700\u540e\n    pdf_merger.write(open(merged_name, "wb"))\n\n\ndef insert_pdf(pdf1, pdf2, insert_num, merged_name, password1=None, password2=None):\n    """\u5c06pdf2\u5168\u90e8\u6587\u4ef6\u63d2\u5165\u5230pdf1\u4e2d\u7b2cinsert_num\u9875\n    :param pdf1: pdf1\u6587\u4ef6\u540d\u79f0\n    :param pdf2: pdf2\u6587\u4ef6\u540d\u79f0\n    :param insert_num: \u63d2\u5165\u7684\u9875\u6570\n    :param merged_name: \u878d\u5408\u540e\u7684\u6587\u4ef6\u540d\u79f0\n    :param password1: pdf1\u5bf9\u5e94\u7684\u5bc6\u7801\n    :param password2: pdf2\u5bf9\u5e94\u7684\u5bc6\u7801\n    :return:"""\n    pdf1_reader = get_reader(pdf1, password1)\n    pdf2_reader = get_reader(pdf2, password2)\n    if not pdf1_reader or not pdf2_reader:  # \u5982\u679c\u6709\u4e00\u4e2a\u6253\u4e0d\u5f00\u5c31\u8fd4\u56de\n        return\n    pdf1_pages = pdf1_reader.numPages  # \u5f97\u5230pdf1\u7684\u603b\u9875\u6570\n    if insert_num < 0 or insert_num > pdf1_pages:\n        print("\u63d2\u5165\u4f4d\u7f6e\u5f02\u5e38\uff0c\u60f3\u8981\u63d2\u5165\u7684\u9875\u6570\u4e3a\uff1a%d\uff0cpdf1\u6587\u4ef6\u5171\u6709\uff1a%d\u9875\uff01" % (insert_num, pdf1_pages))\n        return\n    m_pdf = PdfFileMerger(False)  # \u6ce8\u610f\u9700\u8981\u4f7f\u7528False\u53c2\u6570\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e2d\u6587\u4e71\u7801\u7684\u60c5\u51b5\n    m_pdf.append(pdf1)\n    m_pdf.merge(insert_num, pdf2)\n    m_pdf.write(open(merged_name, "wb"))\n\n\ndef auto_input(path,result_name): #\u5408\u5e76PDF\u4e3a\u4e00\u4efd\n    result_pdf= PdfFileMerger() #\u65b0\u5efa\u5b9e\u4f8b\u5bf9\u8c61\n    for pdf in os.listdir(path):  #\u904d\u5386\u6587\u4ef6\u5939\n        with open (pdf,\'rb\') as fp:  # \u6253\u5f00\u8981\u5408\u5e76\u7684\u5b50PDF\n            pdf_reder = PdfFileReader(fp)  #\u8bfb\u53d6PDF\u5185\u5bb9\n            if pdf_reder.isEncrypted:   # \u5224\u65ad\u662f\u5426\u88ab\u52a0\u5bc6\n                print(f\'\u5ffd\u7565\u52a0\u5bc6\u6587\u4ef6\uff1a{pdf}\')  # \u5982\u679c\u52a0\u5bc6\u5219\u8df3\u8fc7\uff0c\u5e76\u6253\u5370\u5ffd\u7565\u52a0\u5bc6\u6587\u4ef6\n                continue\n            result_pdf.append(pdf_reder,import_bookmarks = True) # \u5c06\u521a\u521a\u8bfb\u53d6\u5230\u7684PDF\u5185\u5bb9\u8ffd\u52a0\u5230\u5b9e\u4f8b\u5bf9\u8c61\u5185\n    result_pdf.write(result_name) # \u5199\u5165\u4fdd\u5b58\n    result_pdf.close()    # \u5173\u95ed\u7a0b\u5e8f\n\n\nif __name__ == "__main__":\n    # \u52a0\u5bc6\n    # encrypt_pdf(\'ex1.pdf\', \'leafage\')\n\n    # \u89e3\u5bc6\n    # decrypt_pdf(\'ex1123_encrypted.pdf\', \'leafage\')\n\n    # \u6309\u9875\u6570\u62c6\u5206\n    # split_by_pages(\'ex1.pdf\', 5)\n\n    # \u6309\u62c6\u5206\u540e\u7684\u6587\u4ef6\u6570\u62c6\u5206\n    split_by_num("\u793a\u4f8b.pdf", 2)\n\n    # \u5408\u5e76PDF\u6587\u4ef6\n    # merger_pdf([\'ex1.pdf\', \'ex2.pdf\'], \'merger.pdf\')\n\n    # \u63d2\u5165PDF\u81f3\u6307\u5b9a\u4f4d\u7f6e\n    # insert_pdf(\'ex1.pdf\', \'ex2.pdf\', 10, \'pdf12.pdf\')\n'})}),"\n",(0,a.jsx)(n.h3,{id:"pdf\u6dfb\u52a0\u6c34\u5370",children:"PDF\u6dfb\u52a0\u6c34\u5370"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"'''\n- \u51c6\u5907\u6dfb\u52a0\u6c34\u5370\u7684\u7269\u6599\u653e\u7f6e\u4e8e\u540c\u7ea7\u300c\u521d\u59cb\u7269\u6599\u300d\u6587\u4ef6\u5939\u5185\n- \u51c6\u5907\u597d\u7684\u6c34\u5370\u6587\u4ef6\u653e\u7f6e\u4e8e\u540c\u7ea7\u300c\u6c34\u5370\u6587\u4ef6\u300d\u6587\u4ef6\u5939\u5185\uff08\u4ec5\u96501\u5f20\u6c34\u5370\u6587\u4ef6\uff09\n- \u82e5\u4fee\u6539\u4e86\u6c34\u5370\u6587\u4ef6\uff0c\u9700\u8981\u5c06\u6700\u540e\u4e00\u884c\u8c03\u7528create_watermark\u51fd\u6570\u7684watermark\u53c2\u6570\u8fdb\u884c\u8c03\u6574\n\n\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\n|- \u6b64py\u6587\u4ef6\n|- \u521d\u59cb\u7269\u6599\n  |- \u4f60\u8981\u6dfb\u52a0\u6c34\u5370\u7684\u6587\u4ef6.pdf\n  |- \u4f60\u8981\u6dfb\u52a0\u6c34\u5370\u7684\u6587\u4ef62.pdf\n  |- \u4f60\u8981\u6dfb\u52a0\u6c34\u5370\u7684\u6587\u4ef63.pdf\n|- \u6c34\u5370\u6587\u4ef6\n  |- \u6c34\u5370.pdf\n|- \u6c34\u5370\u7248\u7269\u6599\n'''\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n\n# \u6dfb\u52a0\u6c34\u5370\u529f\u80fd\u7684\u51fd\u6570\n\n\ndef create_watermark(input_pdf, output_pdf, watermark):\n    # \u83b7\u53d6\u6c34\u5370\n    watermark_obj = PdfFileReader(watermark, strict=False)\n    watermark_page = watermark_obj.getPage(0)\n\n    # \u521b\u5efa\u8bfb\u53d6\u5bf9\u8c61\u548c\u5199\u5165\u5bf9\u8c61\n    pdf_reader = PdfFileReader(input_pdf, strict=False)\n    pdf_writer = PdfFileWriter()\n\n    # \u7ed9\u6240\u6709\u9875\u9762\u6dfb\u52a0\u6c34\u5370\uff0c\u5e76\u65b0\u5efapdf\u6587\u4ef6\n    for page in range(pdf_reader.getNumPages()):\n        page = pdf_reader.getPage(page)\n        page.mergePage(watermark_page)\n        pdf_writer.addPage(page)\n\n    with open(output_pdf, 'wb') as out:\n        pdf_writer.write(out)\n\n\nif __name__ == '__main__':\n    # \u7b5b\u9009pdf\u7269\u6599\uff0c\u5e76\u6267\u884c\u6dfb\u52a0\u6c34\u5370\u529f\u80fd\u7684\u51fd\u6570\n    # \u4ee3\u7801\u4e2d\u7684\u6587\u4ef6\u8def\u5f84\u5747\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff0c\u56e0\u6b64\u5728\u8fd0\u884c\u65f6\u9700\u8981\u6ce8\u610f\u6587\u4ef6\u5f53\u524d\u5c42\u7ea7\uff0c\u4ee5\u514d\u8fd0\u884c\u51fa\u9519\n    pdf_file_path = './\u521d\u59cb\u7269\u6599'\n    pdf_files = os.listdir(pdf_file_path)\n    for pdf_file in pdf_files:\n        if pdf_file[-3:] == 'pdf':\n            input_pdf = pdf_file_path + '/' + pdf_file\n            output_pdf = './\u6c34\u5370\u7248\u7269\u6599/'+pdf_file[0:-3]+'pdf'\n            create_watermark(\n                input_pdf=input_pdf, output_pdf=output_pdf, watermark='./\u6c34\u5370\u6587\u4ef6/\u7f16\u7a0b\u6c34\u5370.pdf')\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pdf\u8f6cword",children:"PDF\u8f6cWORD"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from pdf2docx import Converter\npdf_file = input('\u8bf7\u8f93\u5165pdf\u6587\u4ef6\u8def\u5f84:')\ndocx_file = input('\u8bf7\u8f93\u5165\u8f6c\u6362\u540e\u7684word\u6587\u4ef6\u7684\u8def\u5f84:')\ncv = Converter(pdf_file)# \u5b9e\u4f8b\u5316 Converter \u7c7b\u5e76\u4f20\u5165pdf\u6587\u4ef6\u7684\u8def\u5f84\ncv.convert(docx_file, start=0, end=None)# \u8c03\u7528 convert \u65b9\u6cd5\u8f6c\u6362\u4e3a word\u6587\u4ef6,start\u53c2\u6570\u4e3a\u8d77\u59cb\u9875,end\u4e3a\u7ec8\u6b62\u9875\ncv.close()\n\n#\u7eaf\u6587\u5b57+\u56fe\u7247\u7684PDF\u8bc6\u522b\u6548\u679c\u6700\u597d\uff0c\u8d85\u94fe\u63a5\u7b49\u5176\u4ed6\u683c\u5f0f\u5c06\u4e0d\u88ab\u4fdd\u7559\n"})}),"\n",(0,a.jsx)(n.h3,{id:"\u4e07\u7269\u8f6cpdf",children:"\u4e07\u7269\u8f6cPDF"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import os\nfrom pathlib import Path\nfrom win32com.client import Dispatch, gencache, DispatchEx\nimport win32com.client\n# \u5b9a\u4e49\u7c7b\n\n\nclass PDFConverter:\n    def __init__(self, pathname):\n        self._handle_postfix = ['doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx']\n        self._filename_list = list()\n        self._export_folder = os.path.join(os.path.abspath('.'), outpath)\n        if not os.path.exists(self._export_folder):\n            os.mkdir(self._export_folder)\n        self._enumerate_filename(pathname)\n\n    def _enumerate_filename(self, pathname):\n        full_pathname = os.path.abspath(pathname)\n        if os.path.isfile(full_pathname):\n            if self._is_legal_postfix(full_pathname):\n                self._filename_list.append(full_pathname)\n            else:\n                raise TypeError('\u6587\u4ef6 {} \u540e\u7f00\u540d\u4e0d\u5408\u6cd5\uff01\u4ec5\u652f\u6301\u5982\u4e0b\u6587\u4ef6\u7c7b\u578b\uff1a{}\u3002'.format(\n                    pathname, '\u3001'.join(self._handle_postfix)))\n        elif os.path.isdir(full_pathname):\n            for relpath, _, files in os.walk(full_pathname):\n                for name in files:\n                    filename = os.path.join(full_pathname, relpath, name)\n                    if self._is_legal_postfix(filename):\n                        self._filename_list.append(os.path.join(filename))\n        else:\n            raise TypeError('\u6587\u4ef6/\u6587\u4ef6\u5939 {} \u4e0d\u5b58\u5728\u6216\u4e0d\u5408\u6cd5\uff01'.format(pathname))\n\n    def _is_legal_postfix(self, filename):\n        return filename.split('.')[-1].lower() in self._handle_postfix and not os.path.basename(filename).startswith('~')\n\n    def run_conver(self):\n        '''\n        \u8fdb\u884c\u6279\u91cf\u5904\u7406\uff0c\u6839\u636e\u540e\u7f00\u540d\u8c03\u7528\u51fd\u6570\u6267\u884c\u8f6c\u6362\n        '''\n        print('\u9700\u8981\u8f6c\u6362\u7684\u6587\u4ef6\u6570\uff1a', len(self._filename_list))\n        for filename in self._filename_list:\n            postfix = filename.split('.')[-1].lower()\n            funcCall = getattr(self, postfix)\n            print('\u539f\u6587\u4ef6\uff1a', filename)\n            funcCall(filename)\n        print('\u8f6c\u6362\u5b8c\u6210\uff01')\n\n    def doc(self, filename):\n        '''\n        doc \u548c docx \u6587\u4ef6\u8f6c\u6362\n        '''\n        name = os.path.basename(filename).split('.')[0] + '.pdf'\n        word = Dispatch('Word.Application')\n        doc = word.Documents.Open(filename)\n        pdf_file = os.path.join(self._export_folder, name)\n        doc.SaveAs(pdf_file, FileFormat=17)\n        doc.Close()\n        word.Quit()\n\n    def docx(self, filename):\n        self.doc(filename)\n\n    def xls(self, filename):\n        '''\n        xls \u548c xlsx \u6587\u4ef6\u8f6c\u6362\n        '''\n        name = os.path.basename(filename).split('.')[0] + '.pdf'\n        exportfile = os.path.join(self._export_folder, name)\n        xlApp = DispatchEx(\"Excel.Application\")\n        xlApp.Visible = False\n        xlApp.DisplayAlerts = 0\n        books = xlApp.Workbooks.Open(filename, False)\n        books.ExportAsFixedFormat(0, exportfile)\n        books.Close(False)\n        print('\u4fdd\u5b58 PDF \u6587\u4ef6\uff1a', exportfile)\n        xlApp.Quit()\n\n    def xlsx(self, filename):\n        self.xls(filename)\n\n    def ppt(self,filename):\n        \"\"\"\n        PPT\u6587\u4ef6\u5bfc\u51fa\u4e3apdf\u683c\u5f0f\n        :param filename: PPT\u6587\u4ef6\u7684\u540d\u79f0\n        :param output_filename: \u5bfc\u51fa\u7684pdf\u6587\u4ef6\u7684\u540d\u79f0\n        :return:\n        \"\"\"\n        name = os.path.basename(filename).split('.')[0] + '.pdf'\n        exportfile = os.path.join(self._export_folder, name)\n        ppt_app = win32com.client.Dispatch('PowerPoint.Application')\n        ppt = ppt_app.Presentations.Open(filename)\n        ppt.SaveAs(exportfile, 32)\n        print('\u4fdd\u5b58 PDF \u6587\u4ef6\uff1a', exportfile)\n        ppt_app.Quit()\n\n    def pptx(self, filename):\n        self.ppt(filename)\n\n\ndef main(In_Path):\n    my_file = Path(In_Path)\n    if my_file.is_dir():  # \u5224\u65ad\u662f\u5426\u4e3a\u6587\u4ef6\u5939\n        pathname = os.path.join(os.path.abspath('.'), In_Path)\n    else:\n        pathname = In_Path  # \u5355\u4e2a\u6587\u4ef6\u7684\u8f6c\u6362\n    pdfConverter = PDFConverter(pathname)\n    pdfConverter.run_conver()\n\nif __name__ == \"__main__\":\n    outpath = '\u8f6c\u5316\u540e'\n    main(input('\u8f93\u5165\u4f60\u8981\u8f6c\u5316\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u8def\u5f84'))\n"})}),"\n",(0,a.jsx)(n.h2,{id:"python\u64cd\u4f5cword",children:"Python\u64cd\u4f5cWORD"}),"\n",(0,a.jsx)(n.h3,{id:"\u4fee\u6539word\u6587\u4ef6",children:"\u4fee\u6539word\u6587\u4ef6"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import docx\nimport os\n\n\ndef replace_words(path, old, new):\n    """\n    :param path:\u6587\u4ef6\u8def\u5f84\n    :param old:\u9700\u8981\u66ff\u6362\u7684keyword\n    :param new:\u65b0\u7684\u66ff\u6362\u540e\u7684keyword\n    """\n    if path.endswith(".docx"):\n        # \u4e0d\u652f\u6301\u8bfb\u53d6doc\u683c\u5f0f\u7684\u6587\u4ef6\n        doc = docx.Document(path)\n        for paragraph in doc.paragraphs:\n            for run in paragraph.runs:\n                if run.text:\n                    run.text = run.text.replace(old, new)\n            doc.save(path)\n    else:\n        raise ValueError("\u53ea\u652f\u6301docx\u6587\u4ef6\u683c\u5f0f!")\n\n\nif __name__ == \'__main__\':\n    dir_path = \'./replace_word_keyword\'\n    old_keyword = "AI"\n    new_keyword = "\u4eba\u5de5\u667a\u80fd"\n    files = os.listdir(path=dir_path)\n    for file in files:\n        try:\n            replace_words(os.path.join(dir_path, file), old_keyword, new_keyword)\n            print("{}\u5df2\u7ecf\u4fee\u6539\u6210\u529f".format(file))\n        except ValueError as e:\n            print("{}\u53d1\u751f\u5982\u4e0b\u9519\u8bef\\n{}".format(file, e))\n'})}),"\n",(0,a.jsx)(n.h3,{id:"\u66f4\u6539word\u65b9\u5411",children:"\u66f4\u6539Word\u65b9\u5411"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import docx\nimport os\n\ndef change_forward(word_path, result_path):\n    '''\n    \u6539\u53d8word\u6587\u6863\u7684\u65b9\u5411\n    :param word_path: word\u8def\u5f84\n    '''\n    # \u521b\u5efa\u4fdd\u5b58\u8def\u5f84\n    if not os.path.exists(result_path):\n        os.makedirs(result_path)\n    doc = docx.Document(word_path)\n    for section in doc.sections:\n        # \u4ea4\u66ff\u5bbd\u9ad8\n        section.page_width,section.page_height = section.page_height ,section.page_width\n    # \u4fdd\u5b58\u4e3a\u65b0\u6587\u4ef6\n    doc.save(os.path.join(result_path,word_path)) \n \nif __name__ == '__main__':\n\n    #\u83b7\u53d6\u6587\u4ef6\u5939\u4e0b\u7684word\u6587\u6863\u5217\u8868,\u8def\u5f84\u81ea\u5b9a\u4e49\n    path = 'path'\n    spam=os.listdir(path)\n    os.chdir(path)\n    for i in spam:\n        if i.endswith('.docx'):\n            change_forward(str(i),'new')\n"})}),"\n",(0,a.jsx)(n.h3,{id:"\u63d0\u53d6word\u5185\u56fe\u7247",children:"\u63d0\u53d6Word\u5185\u56fe\u7247"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nimport docx,os, re,cv2\nimport numpy as np\n\ndef get_pictures(word_path, result_path):\n    \"\"\"\n    \u56fe\u7247\u63d0\u53d6\n    :param word_path: word\u8def\u5f84\n    :result_path: \u4fdd\u5b58\u8def\u5f84\n    :return: \n    \"\"\"\n    # \u521b\u5efa\u4fdd\u5b58\u8def\u5f84\n    if not os.path.exists(result_path):\n        os.makedirs(result_path)\n    # \u8bfb\u53d6\u6587\u4ef6\n    doc = docx.Document(word_path)\n\n    # \u83b7\u53d6\u56fe\u7247\n    dict_rel = doc.part._rels\n    for rel in dict_rel:\n        rel = dict_rel[rel]\n        if \"image\" in rel.target_ref:            \n            img_name = re.findall(\"/(.*)\", rel.target_ref)[0]\n            word_name = os.path.splitext(word_path)[0]\n            if os.sep in word_name:\n                new_name = word_name.split('\\\\')[-1]\n            else:\n                new_name = word_name.split('/')[-1]\n            # cv2\u83b7\u53d6\u56fe\u7247\u5927\u5c0f\n            imgdata = np.frombuffer(rel.target_part.blob,np.uint8)\n            img_cv = cv2.imdecode(imgdata,cv2.IMREAD_ANYCOLOR)\n            img_name = '{}-{}-{}-{}'.format(new_name,img_cv.shape[0],img_cv.shape[1],img_name)\n            # \u76f4\u63a5\u4e8c\u8fdb\u5236\u5199\u5165\u517c\u5bb9\u6027\u6bd4\u4f7f\u7528CV2\u7684\u4fdd\u5b58\u56fe\u7247\u597d\n            with open(f'{result_path}/{img_name}','wb') as f:\n                f.write(rel.target_part.blob)\n        else:\n            pass\n \nif __name__ == '__main__':\n\n    #\u83b7\u53d6\u6587\u4ef6\u5939\u4e0b\u7684word\u6587\u6863\u5217\u8868,\u8def\u5f84\u81ea\u5b9a\u4e49\n    path = '\u7b2c\u4e8c\u7ae0 \u521b\u4eabRobot'\n    spam=os.listdir(path)\n    os.chdir(path)\n    for i in spam:\n        if i.endswith('.docx'):\n            get_pictures(str(i),os.getcwd())\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\u4e8c\u7ef4\u7801",children:"\u4e8c\u7ef4\u7801"}),"\n",(0,a.jsx)(n.h3,{id:"\u89e3\u6790\u4e8c\u7ef4\u7801",children:"\u89e3\u6790\u4e8c\u7ef4\u7801"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from easyqr import easyqr as qr# \u89e3\u6790\u6a21\u5757\n#\u4e0a\u4f20\u56fe\u7247\npath = 'ME.png'#\u4f7f\u7528\u4f60\u81ea\u5df1\u7684\u5fae\u4fe1\u4e8c\u7ef4\u7801\u622a\u56fe\u5373\u53ef\nurl = qr.upload(path)\n#\u83b7\u5f97\u89e3\u6790\u7684\u5730\u5740\nurl =qr.online(url)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"\u751f\u6210\u4e8c\u7ef4\u7801",children:"\u751f\u6210\u4e8c\u7ef4\u7801"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from MyQR import myqr #\u52a8\u6001\u4e8c\u7ef4\u7801\u6a21\u5757\uff0c\u7ed3\u679c\u4e0d\u652f\u6301\u4e2d\u6587\nmyqr.run(\n    words= str(url)          ,  # \u626b\u63cf\u4e8c\u7ef4\u7801\u540e\uff0c\u663e\u793a\u7684\u5185\u5bb9\uff0c\u6216\u662f\u8df3\u8f6c\u7684\u94fe\u63a5\n    version=9                ,  # \u8bbe\u7f6e\u5bb9\u9519\u7387\n    level='L'                ,  # \u63a7\u5236\u7ea0\u9519\u6c34\u5e73\uff0c\u8303\u56f4\u662fL\u3001M\u3001Q\u3001H\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5347\u9ad8\n    picture='gif.gif' ,  # \u56fe\u7247\u6240\u5728\u76ee\u5f55\uff0c\u53ef\u4ee5\u662f\u52a8\u56fe\n    colorized=True           ,  # \u9ed1\u767d(False)\u8fd8\u662f\u5f69\u8272(True)\n    contrast=1.0             ,  # \u7528\u4ee5\u8c03\u8282\u56fe\u7247\u7684\u5bf9\u6bd4\u5ea6\uff0c1.0 \u8868\u793a\u539f\u59cb\u56fe\u7247\u3002\u9ed8\u8ba4\u4e3a1.0\u3002\n    brightness=1.0           ,  # \u7528\u6765\u8c03\u8282\u56fe\u7247\u7684\u4eae\u5ea6\uff0c\u7528\u6cd5\u540c\u4e0a\u3002\n    save_name='xxxxx.gif'        ,  # \u63a7\u5236\u8f93\u51fa\u6587\u4ef6\u540d\uff0c\u683c\u5f0f\u53ef\u4ee5\u662f .jpg\uff0c .png \uff0c.bmp \uff0c.gif\n    )\n\nimport qrcode #\u9759\u6001\u4e8c\u7ef4\u7801\u6a21\u5757\uff0c\u652f\u6301\u4e2d\u6587\nimg = qrcode.make('DESKTOP')# \u586b\u5199\u4f60\u60f3\u8981\u626b\u7801\u51fa\u73b0\u7684\u5185\u5bb9\uff08\u6587\u5b57/\u94fe\u63a5\uff09\nimg.save('DESKTOP.png') # \u586b\u5199\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\u53d1\u9001\u90ae\u4ef6",children:"\u53d1\u9001\u90ae\u4ef6"}),"\n",(0,a.jsx)(n.p,{children:"\u9700\u8981\u5148\u5f00\u542f\u4e24\u4e2a\u670d\u52a1\uff1a\nIMAP/SMTP\u670d\u52a1\u5df2\u5f00\u542f\nPOP3/SMTP\u670d\u52a1\u5df2\u5f00\u542f"}),"\n",(0,a.jsx)(n.p,{children:"schedule\u6a21\u5757\u662f\u5b9a\u65f6\u4efb\u52a1\uff0c\u9700\u8981\u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u3002\n\u589e\u52a0\u9644\u4ef6\u4e0e\u9644\u56fe"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import time,schedule\nfrom smtplib import SMTP_SSL, SMTP\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.image import MIMEImage\n\ndef send_mail(message, Subject, sender_show, recipient_show, to_addrs,filelanguage = 'cn',filepath=None,imagepath=None, cc_show=''):\n    \"\"\"\n    :param message: str \u90ae\u4ef6\u5185\u5bb9\n    :param Subject: str \u90ae\u4ef6\u4e3b\u9898\u63cf\u8ff0\n    :param sender_show: str \u53d1\u4ef6\u4eba\u663e\u793a\uff0c\u4e0d\u8d77\u5b9e\u9645\u4f5c\u7528\u5982\uff1a\"xxx\"\n    :param recipient_show: str \u6536\u4ef6\u4eba\u663e\u793a\uff0c\u4e0d\u8d77\u5b9e\u9645\u4f5c\u7528 \u591a\u4e2a\u6536\u4ef6\u4eba\u7528','\u9694\u5f00\u5982\uff1a\"xxx,xxxx\"\n    :param to_addrs: str \u5b9e\u9645\u6536\u4ef6\u4eba\n    :param cc_show: str \u6284\u9001\u4eba\u663e\u793a\uff0c\u4e0d\u8d77\u5b9e\u9645\u4f5c\u7528\uff0c\u591a\u4e2a\u6284\u9001\u4eba\u7528','\u9694\u5f00\u5982\uff1a\"xxx,xxxx\"\n    \"\"\"\n    # \u586b\u5199\u771f\u5b9e\u7684\u53d1\u90ae\u4ef6\u670d\u52a1\u5668\u7528\u6237\u540d\u3001\u5bc6\u7801\n    user = 'xxx@126.com'\n    password = 'xxx'\n    #\u53d1\u9001\u9644\u4ef6\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u53d8\u91cf\n    msg=MIMEMultipart()                             \n    # \u90ae\u4ef6\u5185\u5bb9\n    content='\u90ae\u4ef6\u6b63\u6587' \n    #\u53d1\u9001\u6b63\u6587\n    msg.attach(MIMEText(content,'html', 'utf-8'))  \n    #\u8c03\u7528\u4f20\u9001\u9644\u4ef6\u6a21\u5757\uff0c\u4f20\u9001\u9644\u4ef6\n    if filepath != None:\n        att=MIMEText(open(filepath,'rb').read(),'base64','utf-8')    \n        #\u4fee\u6539\u4e0b\u65b9filename\u4e3a\u6587\u4ef6\u540d\uff08\u6587\u672c\u578b\uff0c\u4e0d\u652f\u6301\u4e2d\u6587\uff09\n        att[\"Content-Type\"]='application/octet-stream' \n        if filelanguage == 'cn':\n            show_file_name = '\u4e2d\u6587\u9644\u4ef6.xlsx' # \u586b\u5199\u4f60\u5e0c\u671b\u5c55\u793a\u51fa\u6765\u7684\u9644\u4ef6\u540d\u79f0\n            att.add_header(\"Content-Disposition\", \"attachment\", filename=(\"gbk\", \"\", show_file_name))\n        else:\n            show_file_name = 'English.XLSX' # \u586b\u5199\u4f60\u5e0c\u671b\u5c55\u793a\u51fa\u6765\u7684\u9644\u4ef6\u540d\u79f0\n            att[\"Content-Disposition\"]=f'attachment;filename=\"{show_file_name}\"' \n        \n        msg.attach(att)#\u53d1\u9001\u9644\u4ef6\n\n    if imagepath != None:\n        #\u6279\u91cf\u6dfb\u52a0\u56fe\u7247\u65f6\u9700\u8981\u4fee\u6539\u503c\n        mime_images = '<p><img src=\"cid:imageid{0}\" alt=\"imageid{0}\"></p>'.format(1)\n        mime_img = MIMEImage(open(imagepath, 'rb').read(), _subtype='octet-stream')\n        mime_img.add_header('Content-ID', 'imageid')\n        #\u4e0a\u4f20\u56fe\u7247\u81f3\u7f13\u5b58\u7a7a\u95f4\n        msg.attach(mime_img)\n        # \u4e0a\u4f20\u6b63\u6587\n        mime_html = MIMEText('<html><body><p>{0}</p>{1}</body></html>'.format('', mime_images), 'html', 'utf-8')\n        # \u6dfb\u52a0\u9644\u56fe\u81f3\u6b63\u6587\n        msg.attach(mime_html)\n\n    # \u90ae\u4ef6\u4e3b\u9898\u63cf\u8ff0\n    msg[\"Subject\"] = Subject\n    # \u53d1\u4ef6\u4eba\u663e\u793a\uff0c\u4e0d\u8d77\u5b9e\u9645\u4f5c\u7528\n    msg[\"from\"] = sender_show\n    # \u6536\u4ef6\u4eba\u663e\u793a\uff0c\u4e0d\u8d77\u5b9e\u9645\u4f5c\u7528\n    msg[\"to\"] = recipient_show\n    # \u6284\u9001\u4eba\u663e\u793a\uff0c\u4e0d\u8d77\u5b9e\u9645\u4f5c\u7528\n    msg[\"Cc\"] = cc_show\n    try:\n        with SMTP_SSL(host=\"smtp.126.com\", port=465) as smtp:\n            # \u767b\u5f55\u53d1\u90ae\u4ef6\u670d\u52a1\u5668\n            smtp.login(user=user, password=password)\n            # \u5b9e\u9645\u53d1\u9001\u3001\u63a5\u6536\u90ae\u4ef6\u914d\u7f6e\n            smtp.sendmail(from_addr=user, to_addrs=to_addrs.split(','), msg=msg.as_string())\n            print('send ok.')\n    except Exception as e:\n        print(\"send error.\", e)\n\n\n\n\nif __name__ == '__main__':\n    message = 'Python \u6d4b\u8bd5\u90ae\u4ef6...'\n    Subject = '\u4e3b\u9898\u6d4b\u8bd5'\n    # \u663e\u793a\u53d1\u9001\u4eba\n    sender_show = 'xxx'\n    # \u663e\u793a\u6536\u4ef6\u4eba\n    recipient_show = 'xxx'\n    # \u5b9e\u9645\u53d1\u7ed9\u7684\u6536\u4ef6\u4eba\n    to_addrs = 'xxx@qq.com,'\n    def job():\n        send_mail(message, Subject, sender_show, recipient_show, to_addrs)\n\n    # \u6bcf\u969410\u5206\u949f\u6267\u884c\u4e00\u6b21\u4efb\u52a1\n    # schedule.every(10).minutes.do(job)\n    # \u6bcf\u9694\u4e00\u5c0f\u65f6\u6267\u884c\u4e00\u6b21\u4efb\u52a1\n    # schedule.every().hour.do(job)\n    # \u6bcf\u592910:30\u6267\u884c\u4e00\u6b21\u4efb\u52a1\n    # schedule.every().day.at(\"10:30\").do(job)\n    # \u6bcf\u5468\u4e00\u7684\u8fd9\u4e2a\u65f6\u5019\u6267\u884c\u4e00\u6b21\u4efb\u52a1\n    # schedule.every().monday.do(job)\n    # \u6bcf\u5468\u4e0913:15\u6267\u884c\u4e00\u6b21\u4efb\u52a1\n    # schedule.every().wednesday.at(\"13:15\").do(job)\n    # \u6bcf\u5468\u4e9418\uff1a00\u6267\u884c\u4e00\u6b21\u4efb\u52a1\n    schedule.every().friday.at(\"18:00\").do(job)\n    while True:\n        schedule.run_pending()\n        time.sleep(1)\n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>p});var a=r(7294);const t={},i=a.createContext(t);function p(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:p(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);