"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[2730],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},l=Object.keys(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var p=a.createContext({}),o=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=o(n.components);return a.createElement(p.Provider,{value:e},n.children)},d="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},_=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,p=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),d=o(t),_=r,u=d["".concat(p,".").concat(_)]||d[_]||m[_]||l;return t?a.createElement(u,i(i({ref:e},c),{},{components:t})):a.createElement(u,i({ref:e},c))}));function u(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,i=new Array(l);i[0]=_;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=n,s[d]="string"==typeof n?n:r,i[1]=s;for(var o=2;o<l;o++)i[o]=t[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}_.displayName="MDXCreateElement"},6781:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:3,title:"\u4f20\u7edf\u673a\u5668\u5b66\u4e60"},i=void 0,s={unversionedId:"12\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u673a\u5668\u5b66\u4e60",id:"12\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u673a\u5668\u5b66\u4e60",title:"\u4f20\u7edf\u673a\u5668\u5b66\u4e60",description:"K-\u90bb\u8fd1\u7b97\u6cd5",source:"@site/docs/12\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u673a\u5668\u5b66\u4e60.md",sourceDirName:"12\u673a\u5668\u5b66\u4e60",slug:"/12\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u673a\u5668\u5b66\u4e60",permalink:"/docs/12\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u673a\u5668\u5b66\u4e60",draft:!1,editUrl:"https://github.com/jiangmiemie/blog/blob/master/docs/12\u673a\u5668\u5b66\u4e60/\u4f20\u7edf\u673a\u5668\u5b66\u4e60.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"\u4f20\u7edf\u673a\u5668\u5b66\u4e60"},sidebar:"tutorialSidebar",previous:{title:"\u6570\u636e\u79d1\u5b66\u5165\u95e8",permalink:"/docs/12\u673a\u5668\u5b66\u4e60/\u6570\u636e\u79d1\u5b66\u5165\u95e8"}},p={},o=[{value:"K-\u90bb\u8fd1\u7b97\u6cd5",id:"k-\u90bb\u8fd1\u7b97\u6cd5",level:2},{value:"\u7b80\u5355\u5b9e\u6218",id:"\u7b80\u5355\u5b9e\u6218",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30",level:3},{value:"\u6548\u679c\u8bc4\u4f30\u7684\u6539\u8fdb",id:"\u6548\u679c\u8bc4\u4f30\u7684\u6539\u8fdb",level:3},{value:"K\u5747\u503c\u7b97\u6cd5",id:"k\u5747\u503c\u7b97\u6cd5",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-1",level:3},{value:"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c",id:"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c",level:3},{value:"\u5bfb\u627e\u6700\u4f73K",id:"\u5bfb\u627e\u6700\u4f73k",level:3},{value:"\u964d\u7ef4\u7b97\u6cd5",id:"\u964d\u7ef4\u7b97\u6cd5",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-1",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-2",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-3",level:3},{value:"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c",id:"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c-1",level:3},{value:"\u4e09\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c",id:"\u4e09\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c",level:3},{value:"\u903b\u8f91\u56de\u5f52",id:"\u903b\u8f91\u56de\u5f52",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-2",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-4",level:3},{value:"\u53ef\u89c6\u5316\u6570\u636e-\u6570\u636e\u8f6c\u56fe\u7247",id:"\u53ef\u89c6\u5316\u6570\u636e-\u6570\u636e\u8f6c\u56fe\u7247",level:3},{value:"\u7ebf\u6027\u56de\u5f52",id:"\u7ebf\u6027\u56de\u5f52",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-3",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-5",level:3},{value:"\u67e5\u770b\u6a21\u578b\u5c5e\u6027",id:"\u67e5\u770b\u6a21\u578b\u5c5e\u6027",level:3},{value:"\u51b3\u7b56\u6811",id:"\u51b3\u7b56\u6811",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-4",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-6",level:3},{value:"\u6a21\u578b\u4fdd\u5b58",id:"\u6a21\u578b\u4fdd\u5b58",level:3},{value:"\u6734\u7d20\u8d1d\u53f6\u65af",id:"\u6734\u7d20\u8d1d\u53f6\u65af",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-5",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-7",level:3},{value:"\u67e5\u770b\u5206\u7c7b\u9519\u8bef\u7684\u6837\u672c\u4fe1\u606f",id:"\u67e5\u770b\u5206\u7c7b\u9519\u8bef\u7684\u6837\u672c\u4fe1\u606f",level:3},{value:"\u652f\u6301\u5411\u91cf\u673a",id:"\u652f\u6301\u5411\u91cf\u673a",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-6",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-8",level:3},{value:"\u6570\u636enormalization",id:"\u6570\u636enormalization",level:3},{value:"\u9632\u6b62\u8fc7\u62df\u5408",id:"\u9632\u6b62\u8fc7\u62df\u5408",level:3},{value:"\u968f\u673a\u68ee\u6797",id:"\u968f\u673a\u68ee\u6797",level:2},{value:"\u7b80\u5355\u793a\u4f8b",id:"\u7b80\u5355\u793a\u4f8b-7",level:3},{value:"\u6548\u679c\u8bc4\u4f30",id:"\u6548\u679c\u8bc4\u4f30-9",level:3},{value:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",id:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668",level:3},{value:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",id:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406",level:3}],c={toc:o},d="wrapper";function m(n){let{components:e,...t}=n;return(0,r.kt)(d,(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"k-\u90bb\u8fd1\u7b97\u6cd5"},"K-\u90bb\u8fd1\u7b97\u6cd5"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u7b97\u6cd5\u65e2\u53ef\u4ee5\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u56de\u5f52\u95ee\u9898\uff0c\u4f46\u5de5\u4e1a\u4e0a\u7528\u4e8e\u5206\u7c7b\u7684\u60c5\u51b5\u66f4\u591a\u3002"),(0,r.kt)("p",null,"KNN\u5148\u8bb0\u5f55\u6240\u6709\u5df2\u77e5\u6570\u636e\uff0c\u518d\u5229\u7528\u4e00\u4e2a\u8ddd\u79bb\u51fd\u6570\uff0c"),(0,r.kt)("p",null,"\u627e\u51fa\u5df2\u77e5\u6570\u636e\u4e2d\u8ddd\u79bb\u672a\u77e5\u4e8b\u4ef6\u6700\u8fd1\u7684K\u7ec4\u6570\u636e\uff0c"),(0,r.kt)("p",null,"\u6700\u540e\u6309\u7167\u8fd9K\u7ec4\u6570\u636e\u91cc\u6700\u5e38\u89c1\u7684\u7c7b\u522b\u9884\u6d4b\u8be5\u4e8b\u4ef6\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2], [2, 3], [2, 5], [3, 2], [3, 3], [4, 5]])  # \u7279\u5f81\ny = np.array([0, 0, 1, 0, 1, 1])  # \u76ee\u6807\u6807\u7b7e\n\n# \u521b\u5efaK-\u6700\u8fd1\u90bb\u5206\u7c7b\u5668\nk = 3  # \u9009\u62e9K\u7684\u503c\nmodel = KNeighborsClassifier(n_neighbors=k).fit(X, y)\n\n# \u9884\u6d4b\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[3, 4]])  # \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\n\n# .predicts()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5305\u542b\u4e86\u9884\u6d4b\u7684\u7c7b\u522b\npredicted_class = model.predict(new_data_point)\n\nprint("\u9884\u6d4b\u7c7b\u522b:", predicted_class)\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u5b9e\u6218"},"\u7b80\u5355\u5b9e\u6218"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\n# \u5bfc\u5165\u9e22\u5c3e\u82b1\u6570\u636e\u5e93\nfrom sklearn.datasets import load_iris\n\n# \u52a0\u8f7d\u6570\u636e\u96c6\uff0c\u6570\u636e\u96c6\u5305\u542b\u6570\u636e\u7684\u7279\u5f81\u3001\u6807\u7b7e\u3001\u7c7b\u522b\u7b49\u8bb8\u591a\u4fe1\u606f\niris = load_iris()\n# \u83b7\u53d6\u6570\u636e\u7279\u5f81\uff08\u5373\u82b1\u7684\u9ad8\u5ea6\u3001\u5bbd\u5ea6\u7b49\uff09\niris_X = iris.data\n# \u83b7\u53d6\u6570\u636e\u6807\u7b7e\uff08\u5373\u82b1\u7684\u54c1\u79cd\uff0c\u75280\u30011\u30012\u4ee3\u66ff\uff09\niris_y = iris.target\nprint(len(iris_X)) # \u67e5\u770b\u6570\u636e\u96c6\u7684\u5927\u5c0f\n\n# # \u83b7\u53d6\u524d2\u6761\u6570\u636e,\u4ece0\u5f00\u59cb\u52302\u7ed3\u675f,\u4e0d\u5305\u62ec2\u3002\u5199\u6cd51\n# print(iris_X[0:2])\n\n# # \u83b7\u53d6\u524d2\u6761\u6570\u636e,\u4ece0\u5f00\u59cb\u52302\u7ed3\u675f,\u4e0d\u5305\u62ec2\u3002\u5199\u6cd52\uff0c\u7701\u75650\n# print(iris_X[:2])\n\n# # \u83b7\u53d6\u524d2\u6761\u6570\u636e,\u4ece0\u5f00\u59cb\u52302\u7ed3\u675f,\u4e0d\u5305\u62ec2\u3002\u5199\u6cd53\uff0c\u7701\u75650\n# print(iris_X[:2,:])\n\n# # \u83b7\u53d6\u524d2\u6761\u6570\u636e,\u4ece0\u5f00\u59cb\u52302\u7ed3\u675f,\u4e0d\u5305\u62ec2\u3002\u5199\u6cd54\uff0c\u7701\u75650,\u53ea\u53d6\u7b2c\u4e00\u5217\n# print(iris_X[:2,0])\n\n# # \u67e5\u770b\u82b1\u7684\u7c7b\u522b\n# print(iris_y)\n# # \u67e5\u770b\u82b1\u7684\u6570\u636e\n# print(iris_X)\n# # \u5408\u5728\u4e00\u8d77\u67e5\u770b\n# print(list(zip(iris_X,iris_y)))\n\n# \u628a\u6570\u636e\u6253\u4e71\uff0c\u5e76\u5206\u6210\u6d4b\u8bd5\u6570\u636e\u548c\u8bad\u7ec3\u6570\u636e\uff0ctest_size\u662f\u6d4b\u8bd5\u6570\u636e\u7684\u6bd4\u4f8b\uff0c0.3\u8868\u793a\u4e3a30%\nX_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size=0.3)\n\n'''\ntrain_test_split\u8be6\u89e3\n\n\u6b64\u65b9\u6cd5\u4f1a\u5c06\u6570\u636e\u548c\u6807\u7b7e\u5747\u5206\u6210\u4e24\u90e8\u5206\u5e76\u6253\u4e71\uff0c\u4e00\u90e8\u5206\u7528\u4e8e\u8bad\u7ec3\uff0c\u4e00\u90e8\u5206\u7528\u4e8e\u6d4b\u8bd5\u3002\n\n\u6240\u4ee5\u8fd4\u56de\u7684\u6570\u636e\u67094\u4e2a\uff0c\u6211\u4eec\u75281\u30012\u30013\u30014\u7ed9\u4ed6\u4eec\u505a\u4e0a\u8bb0\u53f7.\n\n\u6570\u636eX [------70%---(1)-- | -30%(2)-]\n\u6807\u7b7ey [------70%---(3)-- | -30%(4)-]\n\n\u4e0e\u4e0a\u56fe\u5bf9\u5e94\uff0c\u4f9d\u6b21\u662f:\n\n\u8bad\u7ec3\u7684\u6570\u636eX(1),  \u6d4b\u8bd5\u7684\u6570\u636eX(2),\n     \u2191\u2193              \u2191\u2193\n\u8bad\u7ec3\u7684\u6807\u7b7ey(3),  \u6d4b\u8bd5\u7684\u6807\u7b7ey(4)\n\n\u7528(1)\u3001(3)\u5582\u51fa\u4e00\u4e2a\u6a21\u578b\n\n\u8ba9\u6a21\u578b\u9884\u6d4b(2)\uff0c\u83b7\u5f97\u9884\u6d4b\u7ed3\u679c\n\n\u5c06\u9884\u6d4b\u7ed3\u679c\u4e0e(4)\u8fdb\u884c\u6bd4\u8f83\u6765\u6d4b\u8bd5\u6a21\u578b\u7684\u51c6\u786e\u7387\n'''\n\n# \u67e5\u770b\u8bad\u7ec3\u6570\u636e\uff0c\u5df2\u7ecf\u88ab\u968f\u673a\u6253\u4e71\u4e86\n# print(y_train)\n# \u5b9e\u4f8b\u5316KNN\u5206\u7c7b\u5668\nknn = KNeighborsClassifier()\n# .fit()\u65b9\u6cd5\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\uff0c\u5373\u8ba9\u6a21\u578b\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\nknn.fit(X_train, y_train)\n# .predicts()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5305\u542b\u4e86\u9884\u6d4b\u7684\u7c7b\u522b\nprint(knn.predict(X_test))\n# \u67e5\u770b\u771f\u5b9e\u6570\u636e\nprint(y_test)\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"right = 0\nerror = 0\nfor i in zip(knn.predict(X_test),y_test):\n    #print(i)\n    if i[0] == i[1]:\n        right +=1\n    else:\n        error +=1\nprint(right,error)\nprint('\u6b63\u786e\u7387\uff1a{}%'.format(right/(right+error)*100))\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30\u7684\u6539\u8fdb"},"\u6548\u679c\u8bc4\u4f30\u7684\u6539\u8fdb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print('\u6b63\u786e\u7387\uff1a{}%'.format(knn.score(X_test,y_test)*100))\n\n# \u6b63\u786e\u7387\uff1a100.0%\n")),(0,r.kt)("h2",{id:"k\u5747\u503c\u7b97\u6cd5"},"K\u5747\u503c\u7b97\u6cd5"),(0,r.kt)("p",null,"\u8fd9\u662f\u4e00\u79cd\u89e3\u51b3\u805a\u7c7b\u95ee\u9898\u7684\u975e\u76d1\u7763\u5f0f\u5b66\u4e60\u7b97\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7b80\u5355\u5730\u5229\u7528\u4e86\u4e00\u5b9a\u6570\u91cf\u7684\u96c6\u7fa4\uff08\u5047\u8bbeK\u4e2a\u96c6\u7fa4\uff09\u5bf9\u7ed9\u5b9a\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u3002\u540c\u4e00\u96c6\u7fa4\u5185\u7684\u6570\u636e\u70b9\u662f\u540c\u7c7b\u7684\uff0c\u4e0d\u540c\u96c6\u7fa4\u7684\u6570\u636e\u70b9\u4e0d\u540c\u7c7b\u3002"),(0,r.kt)("p",null,"\u8fd8\u8bb0\u5f97\u4f60\u662f\u600e\u6837\u4ece\u58a8\u6c34\u6e0d\u4e2d\u8fa8\u8ba4\u5f62\u72b6\u7684\u4e48\uff1fK\u5747\u503c\u7b97\u6cd5\u7684\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u4f60\u4e5f\u8981\u901a\u8fc7\u89c2\u5bdf\u96c6\u7fa4\u5f62\u72b6\u548c\u5206\u5e03\u6765\u5224\u65ad\u96c6\u7fa4\u6570\u91cf\nK\u5747\u503c\u7b97\u6cd5\u5982\u4f55\u5212\u5206\u96c6\u7fa4\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u4ece\u6bcf\u4e2a\u96c6\u7fa4\u4e2d\u9009\u53d6K\u4e2a\u6570\u636e\u70b9\u4f5c\u4e3a\u8d28\u5fc3\uff08centroids\uff09\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u5c06\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\u4e0e\u8ddd\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u8d28\u5fc3\u5212\u5206\u5728\u540c\u4e00\u96c6\u7fa4\uff0c\u5373\u751f\u6210K\u4e2a\u65b0\u96c6\u7fa4\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u627e\u51fa\u65b0\u96c6\u7fa4\u7684\u8d28\u5fc3\uff0c\u8fd9\u6837\u5c31\u6709\u4e86\u65b0\u7684\u8d28\u5fc3\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u91cd\u590d2\u548c3\uff0c\u76f4\u5230\u7ed3\u679c\u6536\u655b\uff0c\u5373\u4e0d\u518d\u6709\u65b0\u7684\u8d28\u5fc3\u51fa\u73b0\u3002"))),(0,r.kt)("p",null,"\u600e\u6837\u786e\u5b9aK\u7684\u503c\uff1a"),(0,r.kt)("p",null,"\u5982\u679c\u6211\u4eec\u5728\u6bcf\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u96c6\u7fa4\u4e2d\u6240\u6709\u70b9\u5230\u8d28\u5fc3\u7684\u8ddd\u79bb\u5e73\u65b9\u548c\uff0c\u518d\u5c06\u4e0d\u540c\u96c6\u7fa4\u7684\u8ddd\u79bb\u5e73\u65b9\u548c\u76f8\u52a0\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u8fd9\u4e2a\u96c6\u7fa4\u65b9\u6848\u7684\u603b\u5e73\u65b9\u548c\u3002"),(0,r.kt)("p",null,"\u6211\u4eec\u77e5\u9053\uff0c\u968f\u7740\u96c6\u7fa4\u6570\u91cf\u7684\u589e\u52a0\uff0c\u603b\u5e73\u65b9\u548c\u4f1a\u51cf\u5c11\u3002\u4f46\u662f\u5982\u679c\u7528\u603b\u5e73\u65b9\u548c\u5bf9K\u4f5c\u56fe\uff0c\u4f60\u4f1a\u53d1\u73b0\u5728\u67d0\u4e2aK\u503c\u4e4b\u524d\u603b\u5e73\u65b9\u548c\u6025\u901f\u51cf\u5c11\uff0c\u4f46\u5728\u8fd9\u4e2aK\u503c\u4e4b\u540e\u51cf\u5c11\u7684\u5e45\u5ea6\u5927\u5927\u964d\u4f4e\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f\u6700\u4f73\u7684\u96c6\u7fa4\u6570\u3002"),(0,r.kt)("p",null,"\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\uff1a"),(0,r.kt)("p",null,"\u4e00\u7ef4\u5750\u6807\u7cfb\u4e2d,\u8bbeA(x1),B(x2),\u5219A,B\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a"),(0,r.kt)("p",null,"|AB|=\u221a","[(x1\u2212x2)2]"),(0,r.kt)("p",null,"\u4e8c\u7ef4\u5750\u6807\u7cfb\u4e2d,\u8bbeA(x1,y1),B(x2,y2),\u5219A,B\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a"),(0,r.kt)("p",null,"|AB|=\u221a","[(x1\u2212x2)2+(y1\u2212y2)2]"),(0,r.kt)("p",null,"\u4e09\u7ef4\u5750\u6807\u7cfb\u4e2d,\u8bbeA(x1,y1,z1),B(x2,y2,z2),\u5219A,B\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a"),(0,r.kt)("p",null,"|AB|=\u221a","[(x1\u2212x2)2+(y1\u2212y2)2+(z1\u2212z2)2]"),(0,r.kt)("p",null,"........"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.cluster import KMeans\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2], [2, 3], [2, 5], [3, 2], [3, 3], [4, 5]])\n\n# \u521b\u5efaK\u5747\u503c\u6a21\u578b\nk = 2  # \u6307\u5b9a\u8981\u5206\u4e3a\u7684\u7c07\u7684\u6570\u91cf\nmodel = KMeans(n_clusters=k)\n\n# \u62df\u5408\u6a21\u578b\n# .fit()\u65b9\u6cd5\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\uff0c\u5373\u8ba9\u6a21\u578b\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\nmodel.fit(X)\n\n# \u83b7\u53d6\u7c07\u4e2d\u5fc3\u70b9\ncluster_centers = model.cluster_centers_\n\n# \u9884\u6d4b\u6bcf\u4e2a\u6837\u672c\u6240\u5c5e\u7684\u7c07\nlabels = model.labels_\n\nprint("\u7c07\u4e2d\u5fc3\u70b9:", cluster_centers)\nprint("\u6837\u672c\u6240\u5c5e\u7c07:", labels)\n\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# \u5bfc\u5165\u5fc5\u8981\u7684\u5e93\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_iris\n# \u52a0\u8f7d\u6570\u636e\niris = load_iris()\niris_X = iris.data\niris_y = iris.target\n\n# \u521b\u5efaK\u5747\u503c\u6a21\u578b\nkmeans = KMeans(n_clusters=3)\n# \u62df\u5408\u6a21\u578b\uff0c\u6ce8\u610f\u770b\u8fd9\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u8fd9\u91cc\u53ea\u586b\u5199\u4e86\u6570\u636e\u96c6\uff0c\u6ca1\u6709\u7ed9\u6807\u7b7e\u3002\nkmeans.fit(iris_X)\n\n# \u83b7\u53d6\u7c07\u4e2d\u5fc3\u548c\u7c07\u6807\u7b7e\ncenters = kmeans.cluster_centers_\nlabels = kmeans.labels_\nprint(iris_y)\nprint(labels)\n\n# \u6211\u4eec\u53d1\u73b0\u4ed6\u628a0\u30011\u30012\u5206\u7c7b\u6210\u4e861\u30010\u30012\uff0c\u8fd9\u662f\u56e0\u4e3aK\u5747\u503c\u7b97\u6cd5\u662f\u65e0\u76d1\u7763\u5b66\u4e60\uff0c\u4ed6\u4e0d\u77e5\u9053\u6211\u4eec\u7684\u6807\u7b7e\u662f\u4ec0\u4e48\uff0c\u6240\u4ee5\u4ed6\u81ea\u5df1\u7ed9\u6211\u4eec\u5206\u4e86\u4e00\u5957\u6807\u7b7e\u3002\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-1"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5c060\u30011\u30012\u8f6c\u6362\u62101\u30010\u30012\nexchange={0:1,1:0,2:2}\nexchange_labels = [exchange[i] if i in exchange else i for i in labels]\n\nright = 0\nerror = 0\nfor i in zip(exchange_labels,iris_y):\n    if i[0] == i[1]:\n        right +=1\n    else:\n        error +=1\n\nprint('\u6b63\u786e\u7387\uff1a{}%'.format(right/(right+error)*100))\n")),(0,r.kt)("h3",{id:"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c"},"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# \u9009\u53d6\u7b2c1\u30012\u7279\u5f81\u503c\u4e0e\u4e2d\u5fc3\u70b9\nplt.scatter(iris_X[:, 0], iris_X[:, 1], c=labels)\nplt.scatter(centers[:, 0], centers[:,1], c="red", marker="x")\nplt.title("Kmeans")\nplt.show()\n# \u9009\u53d6\u7b2c3\u30014\u9879\u7279\u5f81\u503c\u4e0e\u4e2d\u5fc3\u70b9\nplt.scatter(iris_X[:, 2], iris_X[:,3], c=labels)\nplt.scatter(centers[:, 2], centers[:,3], c="red", marker="x")\nplt.show()\n')),(0,r.kt)("h3",{id:"\u5bfb\u627e\u6700\u4f73k"},"\u5bfb\u627e\u6700\u4f73K"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\nX = iris.data\ny = iris.target\n\nk_range = range(1, 31)\nk_scores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # loss = -cross_val_score(knn, X, y, cv=10, scoring='mean_squared_error') # for regression\n    # 10\u6298\u4ea4\u53c9\u9a8c\u8bc1,\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff0cscoring\u53c2\u6570\u9ed8\u8ba4\u4e3aaccuracy\uff0c\u5bf9\u4e8e\u56de\u5f52\u95ee\u9898\uff0c\u9ed8\u8ba4\u4e3ar2\uff0c\u6216mean_squared_error\n    # \u539f\u7406\u662f\u5c06\u6570\u636e\u5206\u621010\u4efd\uff0c\u6bcf\u6b21\u53d6\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u5176\u4f599\u4efd\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u8fdb\u884c10\u6b21\u8bad\u7ec3\u548c\u6d4b\u8bd5\uff0c\u6700\u540e\u53d6\u5e73\u5747\u503c\n    # \u662f\u4e00\u79cd\u5e38\u7528\u7684\u9a8c\u8bc1\u5206\u7c7b\u6027\u80fd\u597d\u574f\u7684\u65b9\u6cd5\n    scores = cross_val_score(knn, X, y, cv=10, scoring='accuracy') # for classification\n\n    # .mean()\u65b9\u6cd5\u7528\u4e8e\u8ba1\u7b97\u5e73\u5747\u503c\n    k_scores.append(scores.mean())\n\nplt.plot(k_range, k_scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Cross-Validated Accuracy')\nplt.show()\n")),(0,r.kt)("h2",{id:"\u964d\u7ef4\u7b97\u6cd5"},"\u964d\u7ef4\u7b97\u6cd5"),(0,r.kt)("p",null,"\u4f5c\u4e3a\u4e00\u540d\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u6211\u4eec\u624b\u4e0a\u7684\u6570\u636e\u6709\u975e\u5e38\u591a\u7684\u7279\u5f81\u3002"),(0,r.kt)("p",null,"\u867d\u7136\u8fd9\u542c\u8d77\u6765\u6709\u5229\u4e8e\u5efa\u7acb\u66f4\u5f3a\u5927\u7cbe\u51c6\u7684\u6a21\u578b\uff0c\u4f46\u5b83\u4eec\u6709\u65f6\u5019\u53cd\u5012\u4e5f\u662f\u5efa\u6a21\u4e2d\u7684\u4e00\u5927\u96be\u9898\u3002"),(0,r.kt)("p",null,"\u600e\u6837\u624d\u80fd\u4ece1000\u62162000\u4e2a\u53d8\u91cf\u91cc\u627e\u5230\u6700\u91cd\u8981\u7684\u53d8\u91cf\u5462\uff1f"),(0,r.kt)("p",null,"\u8fd9\u79cd\u60c5\u51b5\u4e0b\u964d\u7ef4\u7b97\u6cd5\u53ca\u5176\u4ed6\u7b97\u6cd5\uff0c\u5982\u51b3\u7b56\u6811\uff0c\u968f\u673a\u68ee\u6797\uff0cPCA\uff0c\u56e0\u5b50\u5206\u6790\uff0c\u76f8\u5173\u77e9\u9635\uff0c\u548c\u7f3a\u7701\u503c\u6bd4\u4f8b\u7b49\uff0c\u5c31\u80fd\u5e2e\u6211\u4eec\u89e3\u51b3\u96be\u9898\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.decomposition import PCA\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2, 3],\n              [2, 3, 4],\n              [3, 4, 5],\n              [4, 5, 6]])  # \u7279\u5f81\u77e9\u9635\n\n# \u521b\u5efaPCA\u964d\u7ef4\u6a21\u578b\nn_components = 2  # \u6307\u5b9a\u8981\u964d\u7ef4\u5230\u7684\u7ef4\u5ea6\nmodel = PCA(n_components=n_components)\n\n# .fit_transform()\u65b9\u6cd5\u53ef\u4ee5\u62df\u5408\u6570\u636e\uff0c\u540c\u65f6\u8fdb\u884c\u964d\u7ef4\nX_reduced = model.fit_transform(X)\n\nprint("\u539f\u59cb\u6570\u636e\u5f62\u72b6:", X.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e\u5f62\u72b6:", X_reduced.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e:")\nprint(X_reduced)\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-1"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.decomposition import PCA\nfrom sklearn.datasets import load_iris\n# \u52a0\u8f7d\u6570\u636e\niris = load_iris()\niris_X = iris.data\niris_y = iris.target\n\n# \u521b\u5efaPCA\u964d\u7ef4\u6a21\u578b\n# \u5206\u522b\u964d\u7ef4\u52302\u7ef4\u548c3\u7ef4\nmodel2 = PCA(n_components=2)\nmodel3 = PCA(n_components=3)\n\n# \u62df\u5408\u6a21\u578b\u5e76\u8fdb\u884c\u964d\u7ef4\nX_reduced2 = model2.fit_transform(iris_X)\nX_reduced3 = model3.fit_transform(iris_X)\n\nprint(X_reduced2)\nprint(X_reduced3)\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-2"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print("\u539f\u59cb\u6570\u636e\u5f62\u72b6:", iris_X.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e\u5f62\u72b6:", X_reduced2.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e\u5f62\u72b6:", X_reduced3.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e:")\nprint(X_reduced2)\nprint(X_reduced3)\n')),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-3"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print("\u539f\u59cb\u6570\u636e\u5f62\u72b6:", iris_X.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e\u5f62\u72b6:", X_reduced2.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e\u5f62\u72b6:", X_reduced3.shape)\nprint("\u964d\u7ef4\u540e\u6570\u636e:")\nprint(X_reduced2)\nprint(X_reduced3)\n')),(0,r.kt)("h3",{id:"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c-1"},"\u4e8c\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nimport pandas as pd\n\n#\u65b9\u6cd51\uff0c\u76f4\u63a5\u7ed8\u5236\uff0c\u81ea\u52a8\u5206\u914d\u989c\u8272\nplt.scatter(X_reduced2[:, 0], X_reduced2[:, 1], c=iris_y)\n# plt.show()\u65b9\u6cd5\u4f1a\u628a\u56fe\u50cf\u663e\u793a\u51fa\u6765\u5e76\u6e05\u7a7a\u753b\u5e03\nplt.show() \n\n#\u65b9\u6cd52\uff0c\u6307\u5b9aRGB\u989c\u8272\uff0c\u518d\u7ed8\u5236\ncolor={0:'#1f77b4',1:'#ff7f0e',2:'#2ca02c'}\n# \u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u5982\u679ci\u5728color\u4e2d\uff0c\u5c31\u8fd4\u56decolor[i]\uff0c\u5426\u5219\u8fd4\u56dei\ncolors = [color[i] if i in color else i for i in iris_y]\n# \u7ed8\u5236\u6563\u70b9\u56fe\uff0cx\u8f74\u4e3aX_reduced2[:, 0]\uff0cy\u8f74\u4e3aX_reduced2[:, 1]\uff0c\u989c\u8272\u4e3acolors\nplt.scatter(X_reduced2[:, 0], X_reduced2[:, 1], c=colors)\n# plt.show()\u65b9\u6cd5\u4f1a\u628a\u56fe\u50cf\u663e\u793a\u51fa\u6765\u5e76\u6e05\u7a7a\u753b\u5e03\nplt.show() \n\n# \u65b9\u6cd53\n# \u6211\u4eec\u5e0c\u671b\u628a3\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u901a\u8fc7\u8bbe\u7f6e\u4e0d\u540c\u7684\u989c\u8272\u548c\u5f62\u72b6\u6765\u628a\u4ed6\u4eec\u533a\u5206\u5f00\u6765\n# r^\u8868\u793a\u7ea2\u8272\u7684\u4e09\u89d2\u5f62\uff0cgx\u8868\u793a\u7eff\u8272\u7684\u53c9\u53f7\uff0cbo\u8868\u793a\u84dd\u8272\u7684\u5706\u70b9\ncolor={0:'r^',1:'gx',2:'bo'}\n# \u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u5982\u679ci\u5728color\u4e2d\uff0c\u5c31\u8fd4\u56decolor[i]\uff0c\u5426\u5219\u8fd4\u56dei\ncolors = [color[i] if i in color else i for i in iris_y]\ndata = pd.DataFrame(zip(X_reduced2[:, 0],\n                        X_reduced2[:, 1],\n                        colors),\n                    columns=['x','y','label'])\n# \u6309\u7167label\u5217\u8fdb\u884c\u5206\u7ec4\nfor i in data.groupby('label'):\n    x = i[1]['x']\n    y = i[1]['y']\n    c = i[0]\n    plt.plot(x, y,c)\n# plt.show()\u65b9\u6cd5\u4f1a\u628a\u56fe\u50cf\u663e\u793a\u51fa\u6765\u5e76\u6e05\u7a7a\u753b\u5e03\nplt.show()\n\n# \u76f8\u6bd4\u4e8e\u4e4b\u524d\u8bfe\u7a0b\u4e2d\u76f4\u63a5\u7ed8\u5236\u539f\u59cb\u6570\u636e\uff0c\u964d\u7ef4\u540e\u7684\u6570\u636e\u66f4\u52a0\u5bb9\u6613\u533a\u5206\u3002\n")),(0,r.kt)("h3",{id:"\u4e09\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c"},"\u4e09\u7ef4\u53ef\u89c6\u5316\u7ed3\u679c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\n\nfig = plt.figure()\n# \u521b\u5efa\u4e00\u4e2a3d\u7684\u753b\u5e03\nax = fig.add_subplot(projection='3d')\n\n# \u4ece\u964d\u7ef4\u540e\u7684\u6570\u636e\u4e2d\u53d6\u51fax\u3001y\u3001z\u4e09\u4e2a\u7ef4\u5ea6\nxs = list(X_reduced3[:, 0])\nys = list(X_reduced3[:, 1])\nzs = list(X_reduced3[:, 2])\n# \u628a\u5206\u7c7b\u76840\u30011\u30012\u66ff\u6362\u4e3a\u7eff\u8272\u3001\u7ea2\u8272\u3001\u84dd\u8272\ncolor={0:'green',1:'red',2:'blue'}\ncolors = [color[i] if i in color else i for i in iris_y]\n\nfor x, y, z, c in zip(xs, ys, zs, colors):\n    # \u7ed8\u5236\u6563\u70b9\u56fe\n    ax.scatter(x, y, z, c=c)\nplt.show()\n")),(0,r.kt)("h2",{id:"\u903b\u8f91\u56de\u5f52"},"\u903b\u8f91\u56de\u5f52"),(0,r.kt)("p",null,"\u5047\u8bbe\u4f60\u7684\u4e00\u4e2a\u670b\u53cb\u8ba9\u4f60\u56de\u7b54\u4e00\u9053\u9898\u3002"),(0,r.kt)("p",null,"\u53ef\u80fd\u7684\u7ed3\u679c\u53ea\u6709\u4e24\u79cd\uff1a\u4f60\u7b54\u5bf9\u4e86\u6216\u6ca1\u6709\u7b54\u5bf9\u3002"),(0,r.kt)("p",null,"\u4e3a\u4e86\u7814\u7a76\u4f60\u6700\u64c5\u957f\u7684\u9898\u76ee\u9886\u57df\uff0c\u4f60\u505a\u4e86\u5404\u79cd\u9886\u57df\u7684\u9898\u76ee\u3002"),(0,r.kt)("p",null,"\u90a3\u4e48\u8fd9\u4e2a\u7814\u7a76\u7684\u7ed3\u679c\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a"),(0,r.kt)("p",null,"\u5982\u679c\u662f\u4e00\u9053\u5341\u5e74\u7ea7\u7684\u4e09\u89d2\u51fd\u6570\u9898\uff0c\u4f60\u670970%\u7684\u53ef\u80fd\u6027\u80fd\u89e3\u51fa\u5b83\u3002"),(0,r.kt)("p",null,"\u4f46\u5982\u679c\u662f\u4e00\u9053\u4e94\u5e74\u7ea7\u7684\u5386\u53f2\u9898\uff0c\u4f60\u4f1a\u7684\u6982\u7387\u53ef\u80fd\u53ea\u670930%\u3002"),(0,r.kt)("p",null,"\u903b\u8f91\u56de\u5f52\u5c31\u662f\u7ed9\u4f60\u8fd9\u6837\u7684\u6982\u7387\u7ed3\u679c\u3002"),(0,r.kt)("p",null,"\u903b\u8f91\u56de\u5f52\u662f\u4e00\u79cd\u7edf\u8ba1\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u6570\u5b66\u4e2d\u7684\u903b\u8f91\u51fd\u6570\u6216 logit \u51fd\u6570\u4f5c\u4e3a x \u548c y \u4e4b\u95f4\u7684\u65b9\u7a0b\u5f0f\u3002Logit \u51fd\u6570\u5c06 y \u6620\u5c04\u4e3a x \u7684 sigmoid \u51fd\u6570\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://d1.awsstatic.com/sigmoid.bfc853980146c5868a496eafea4fb79907675f44.png",alt:null}),"\n",(0,r.kt)("img",{parentName:"p",src:"https://d1.awsstatic.com/S-curve.36de3c694cafe97ef4e391ed26a5cb0b357f6316.png",alt:null})),(0,r.kt)("p",null,"\u591a\u4e2a\u89e3\u91ca\u53d8\u91cf\u4f1a\u5f71\u54cd\u56e0\u53d8\u91cf\u7684\u503c\u3002\u8981\u5bf9\u6b64\u7c7b\u8f93\u5165\u6570\u636e\u96c6\u5efa\u6a21\uff0c\u903b\u8f91\u56de\u5f52\u516c\u5f0f\u5047\u8bbe\u4e0d\u540c\u81ea\u53d8\u91cf\u4e4b\u95f4\u5b58\u5728\u7ebf\u6027\u5173\u7cfb\u3002\u60a8\u53ef\u4ee5\u4fee\u6539 sigmoid \u51fd\u6570\u5e76\u6309\u5982\u4e0b\u516c\u5f0f\u8ba1\u7b97\u6700\u7ec8\u8f93\u51fa\u53d8\u91cf"),(0,r.kt)("p",null,"y = f(\u03b20 + \u03b21x1 + \u03b22x2+\u2026 \u03b2nxn)"),(0,r.kt)("p",null,"\u7b26\u53f7 \u03b2 \u8868\u793a\u56de\u5f52\u7cfb\u6570\u3002\u5f53\u60a8\u7ed9\u5b83\u4e00\u4e2a\u5176\u4e2d\u5305\u542b\u56e0\u53d8\u91cf\u548c\u81ea\u53d8\u91cf\u7684\u5df2\u77e5\u503c\u7684\u8db3\u591f\u5927\u7684\u5b9e\u9a8c\u6570\u636e\u96c6\u65f6\uff0clogit \u6a21\u578b\u53ef\u4ee5\u53cd\u5411\u8ba1\u7b97\u8fd9\u4e9b\u7cfb\u6570\u503c\u3002"),(0,r.kt)("p",null,"\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u66f4\u63a5\u8fd1KNN\uff0c\u8981\u89e3\u51b3\u591a\u5206\u7c7b\u95ee\u9898\u65f6\uff0c\u5e38\u5e38\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7c7b\u522b\u5206\u522b\u5efa\u7acb\u591a\u4e2a\u6a21\u578b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# \u7ed8\u5236\u903b\u8f91\u56de\u5f52\u7684\u4e0d\u540c\u56de\u5f52\u7cfb\u6570\u7684sigmoid\u51fd\u6570\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef sigmoid(x,p=1):\n    # \u76f4\u63a5\u8fd4\u56desigmoid\u51fd\u6570\n    return 1. / (1. + np.exp(-p*x))\n \ndef plot_sigmoid(p=1):\n    # param:\u8d77\u70b9\uff0c\u7ec8\u70b9\uff0c\u95f4\u8ddd\n    x = np.arange(-8, 8, 0.2)\n    y = sigmoid(x,p)\n    plt.plot(x, y)\n    plt.show()\n \nif __name__ == '__main__':\n    plot_sigmoid()\n    plot_sigmoid(20)\n    plot_sigmoid(0.5)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1], [2], [3], [4], [5]])  # \u81ea\u53d8\u91cf\ny = np.array([0, 0, 1, 1, 2])  # \u56e0\u53d8\u91cf\uff0c0\u8868\u793a\u8d1f\u7c7b\uff0c1\u8868\u793a\u6b63\u7c7b\n\n# \u521b\u5efa\u903b\u8f91\u56de\u5f52\u6a21\u578b\nmodel = LogisticRegression()\n\n# .fit()\u65b9\u6cd5\u7528\u4e8e\u62df\u5408\u6a21\u578b\uff0c\u5373\u8bad\u7ec3\u6a21\u578bx\nmodel.fit(X, y)\n\n# \u9884\u6d4b\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[6]])  # \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\n# .predict()\u65b9\u6cd5\u9884\u6d4b\u65b0\u6570\u636e\u70b9\u7684\u7c7b\u522b\npredicted_class = model.predict(new_data_point)\n# .predict_proba()\u65b9\u6cd5\u9884\u6d4b\u65b0\u6570\u636e\u70b9\u7684\u6982\u7387\npredicted_probability = model.predict_proba(new_data_point)\n\nprint("\u9884\u6d4b\u7c7b\u522b:", predicted_class)\nprint("\u9884\u6d4b\u6982\u7387 (\u8d1f\u7c7b, \u6b63\u7c7b):", predicted_probability)\nprint(type(predicted_probability))\npredicted_probability\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-2"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import datasets\nfrom sklearn.model_selection import train_test_split  \nfrom sklearn.preprocessing import StandardScaler  \nfrom sklearn.linear_model import LogisticRegression\n\n# \u52a0\u8f7d\u6570\u636e\u96c6\ndigits = datasets.load_digits()\n# \u83b7\u53d6\u7279\u5f81\u548c\u76ee\u6807\u53d8\u91cf  \nX = digits.data  \ny = digits.target \n  \n# \u6570\u636e\u9884\u5904\u7406\uff1a\u968f\u673a\u5206\u5272\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 , \u5982\u679c\u4e0d\u6307\u5b9a random_state\uff0c\u6bcf\u6b21\u8fd0\u884c\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837\u300242\u4e3a\u7ea6\u5b9a\u4fd7\u6210\u7684\u968f\u673a\u6570\u79cd\u5b50\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# \u6570\u636e\u6807\u51c6\u5316  \nscaler = StandardScaler()  \n# .fit_transform()\u65b9\u6cd5\u5148\u62df\u5408\u6570\u636e\uff0c\u518d\u6807\u51c6\u5316\u3002\u548c\u964d\u7ef4\u7b97\u6cd5\u7684\u8bed\u6cd5\u4e00\u81f4\nX_train = scaler.fit_transform(X_train)  \n# .transform()\u65b9\u6cd5\u76f4\u63a5\u4f7f\u7528\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u6807\u51c6\u5316\u64cd\u4f5c\nX_test = scaler.transform(X_test)  \n  \n# \u521b\u5efaLogistic Regression\u6a21\u578b  , \u5982\u679c\u4e0d\u6307\u5b9a random_state\uff0c\u6bcf\u6b21\u8fd0\u884c\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837\u300242\u4e3a\u7ea6\u5b9a\u4fd7\u6210\u7684\u968f\u673a\u6570\u79cd\u5b50\nmodel = LogisticRegression(random_state=42)  \n  \n# .fit()\u65b9\u6cd5\u7528\u4e8e\u62df\u5408\u6a21\u578b\uff0c\u5373\u8bad\u7ec3\u6a21\u578b\nmodel.fit(X_train, y_train)  \n  \n# .predict()\u65b9\u6cd5\u9884\u6d4b\u65b0\u6570\u636e\u70b9\u7684\u7c7b\u522b\ny_pred = model.predict(X_test)\n\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-4"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.metrics import accuracy_score\n\n# accuracy_score()\u65b9\u6cd5\u8ba1\u7b97\u51c6\u786e\u7387\naccuracy = accuracy_score(y_test, y_pred)  \nprint(f'Accuracy: {accuracy}')\n")),(0,r.kt)("h3",{id:"\u53ef\u89c6\u5316\u6570\u636e-\u6570\u636e\u8f6c\u56fe\u7247"},"\u53ef\u89c6\u5316\u6570\u636e-\u6570\u636e\u8f6c\u56fe\u7247"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from matplotlib import pyplot as plt\n# \u9009\u51fa\u9884\u6d4b\u9519\u8bef\u7684\u6837\u672c\nindex = []\n# \u904d\u5386\u6240\u6709\u6837\u672c\nfor i in range(len(y_pred)):\n    # \u5224\u65ad\u662f\u5426\u76f8\u7b49\n    if y_pred[i] != y_test[i]:\n        # \u5982\u679c\u4e0d\u76f8\u7b49,\u6dfb\u52a0\u5230index\u4e2d:\u9884\u6d4b\u503c,\u771f\u5b9e\u503c,\u56fe\u7247(\u6ce8\u610f\u8981\u53d8\u6362\u5f62\u72b6\u4e3a8*8)\n        index.append((\n                    y_pred[i], \n                    y_test[i],\n                    X_test[i].reshape((8, 8))))\n\n# \u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62\u753b\u5e03\n# nrows:\u5b50\u56fe\u7684\u884c\u6570\n# ncols:\u5b50\u56fe\u7684\u5217\u6570\n# print(len(index)) // 10\n# \u56e0\u4e3a\u4e00\u5171\u670910\u5f20\u56fe\u7247,\u6240\u4ee5\u884c\u6570\u4e3a2,\u5217\u6570\u4e3a5\uff0c\u53732*5=10\nfig, ax = plt.subplots(\n    nrows=2,\n    ncols=5,\n)\n# \u5b9e\u4f8b\u5316\u5b50\u753b\u5e03\nax = ax.flatten()\nfor i in range(len(index)):\n    p = index[i][0] # \u53d6\u51fa\u9884\u6d4b\u503c\n    a = index[i][1] # \u53d6\u51fa\u771f\u5b9e\u503c\n    img = index[i][2] # \u53d6\u51fa\u56fe\u7247\n    # \u5728\u5b50\u753b\u5e03\u4e0a\u753b\u51fa\u56fe\u7247\uff0c\u683c\u5f0f\u4e3a\u7070\u5ea6\u56fe\n    ax[i].imshow(img, cmap='Greys')\n    ax[i].set_title(f'{p}-{a}')\nplt.show()\n\n\n")),(0,r.kt)("h2",{id:"\u7ebf\u6027\u56de\u5f52"},"\u7ebf\u6027\u56de\u5f52"),(0,r.kt)("p",null,"\u7ebf\u6027\u56de\u5f52\u662f\u5229\u7528\u8fde\u7eed\u6027\u53d8\u91cf\u6765\u4f30\u8ba1\u5b9e\u9645\u6570\u503c\uff08\u4f8b\u5982\u623f\u4ef7\uff0c\u547c\u53eb\u6b21\u6570\u548c\u603b\u9500\u552e\u989d\u7b49\uff09\u3002"),(0,r.kt)("p",null,"\u6211\u4eec\u901a\u8fc7\u7ebf\u6027\u56de\u5f52\u7b97\u6cd5\u627e\u51fa\u81ea\u53d8\u91cf\u548c\u56e0\u53d8\u91cf\u95f4\u7684\u6700\u4f73\u7ebf\u6027\u5173\u7cfb\uff0c\u56fe\u5f62\u4e0a\u53ef\u4ee5\u786e\u5b9a\u4e00\u6761\u6700\u4f73\u76f4\u7ebf\u3002"),(0,r.kt)("p",null,"\u8fd9\u6761\u6700\u4f73\u76f4\u7ebf\u5c31\u662f\u56de\u5f52\u7ebf\u3002\u8fd9\u4e2a\u56de\u5f52\u5173\u7cfb\u53ef\u4ee5\u7528Y=aX+b \u8868\u793a\u3002"),(0,r.kt)("p",null,"\u591a\u4e2a\u6570\u636e\u53ef\u4ee5\u7528Y= \u03b20*X0 + \u03b21X1 + \u03b22X2+\u2026\u2026 \u03b2nXn+ \u03b5 \u8868\u793a\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1], [2], [3], [4], [5]])  # \u81ea\u53d8\u91cf\ny = np.array([2, 3, 4, 4, 6])  # \u56e0\u53d8\u91cf\n# \u521b\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b\nmodel = LinearRegression()\n\n# \u62df\u5408\u6a21\u578b\nmodel.fit(X, y)\n\n# \u6253\u5370\u56de\u5f52\u7cfb\u6570\u548c\u622a\u8ddd\nprint("\u56de\u5f52\u7cfb\u6570 (\u659c\u7387):", model.coef_)\nprint("\u622a\u8ddd:", model.intercept_)\n\n\n# \u9884\u6d4b\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[6]])  # \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\npredicted_value = model.predict(new_data_point)\nprint("\u9884\u6d4b\u503c:", predicted_value)\n\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-3"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import datasets\nfrom sklearn.linear_model import LinearRegression\n\n# .fetch_california_housing() \u52a0\u8f7d\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u4f4f\u623f\u6570\u636e\u96c6\nloaded_data = datasets.fetch_california_housing()\n# .data \u6570\u636e\u96c6\u4e2d\u7684\u7279\u5f81\u6570\u636e\ndata_X = loaded_data.data\n# .target \u6570\u636e\u96c6\u4e2d\u7684\u6807\u7b7e\u6570\u636e\ndata_y = loaded_data.target\n# \u521b\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b\nmodel = LinearRegression()\n# \u62df\u5408\u6a21\u578b\n# .fit() \u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u7279\u5f81\u6570\u636e\u548c\u6807\u7b7e\u6570\u636e\nmodel.fit(data_X, data_y)\n\n# \u9884\u6d4b\u524d\u56db\u6240\u623f\u5c4b\u4ef7\u683c\n# .predict() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff1a\u7279\u5f81\u6570\u636e\nprint(model.predict(data_X[:4, :]))\n# \u771f\u5b9e\u4ef7\u683c\nprint(data_y[:4])\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-5"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(model.get_params())# \u83b7\u53d6\u6a21\u578b\u53c2\u6570\n# //{'copy_X': True, 'fit_intercept': True, 'n_jobs': None, 'positive': False}\nprint(model.score(data_X, data_y))\n# // 0.606232685199805\n# \u8fd9\u610f\u5473\u7740\u6570\u636e\u96c6\u4e2d\u56e0\u53d8\u91cf\u7684 60% \u7684\u53d8\u5f02\u6027\u5df2\u5f97\u5230\u8003\u8651\uff0c\u800c\u5176\u4f59 40% \u7684\u53d8\u5f02\u6027\u4ecd\u672a\u5f97\u5230\u89e3\u91ca\u3002\n")),(0,r.kt)("h3",{id:"\u67e5\u770b\u6a21\u578b\u5c5e\u6027"},"\u67e5\u770b\u6a21\u578b\u5c5e\u6027"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# \u6253\u5370\u56de\u5f52\u7cfb\u6570\u548c\u622a\u8ddd\nprint("\u56de\u5f52\u7cfb\u6570 (\u659c\u7387):", model.coef_)\nprint("\u622a\u8ddd:", model.intercept_)\n')),(0,r.kt)("h2",{id:"\u51b3\u7b56\u6811"},"\u51b3\u7b56\u6811"),(0,r.kt)("p",null,"\u51b3\u7b56\u6811\u662f\u4e00\u79cd\u57fa\u672c\u7684\u5206\u7c7b\u4e0e\u56de\u5f52\u65b9\u6cd5\uff0c\u662f\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u6570\u636e\u6316\u6398\u7b97\u6cd5\u4e4b\u4e00\u3002"),(0,r.kt)("p",null,"\u51b3\u7b56\u6811\u6a21\u578b\u5448\u6811\u5f62\u7ed3\u6784\uff0c\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u8868\u793a\u57fa\u4e8e\u7279\u5f81\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5206\u7c7b\u7684\u8fc7\u7a0b\u3002\u5b83\u53ef\u4ee5\u8ba4\u4e3a\u662f if-else \u89c4\u5219\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5b9a\u4e49\u5728\u7279\u5f81\u7a7a\u95f4\u4e0e\u7c7b\u7a7a\u95f4\u4e0a\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u3002"),(0,r.kt)("p",null,"\u51b3\u7b56\u6811\u5b66\u4e60\u901a\u5e38\u5305\u62ec 3 \u4e2a\u6b65\u9aa4\uff1a\u7279\u5f81\u9009\u62e9\u3001\u51b3\u7b56\u6811\u7684\u751f\u6210\u548c\u51b3\u7b56\u6811\u7684\u4fee\u526a\u3002"),(0,r.kt)("p",null,"\u51b3\u7b56\u6811\u5b66\u4e60\u7684\u635f\u5931\u51fd\u6570\u901a\u5e38\u662f\u6b63\u5219\u5316\u7684\u6781\u5927\u4f3c\u7136\u51fd\u6570\uff0c\u51b3\u7b56\u6811\u5b66\u4e60\u5c5e\u4e8e\u76d1\u7763\u5b66\u4e60\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5b66\u4e60\u4e00\u4e2a\u5206\u7c7b\u89c4\u5219\u3002"),(0,r.kt)("p",null,"\u51b3\u7b56\u6811\u67092\u79cd\u7c7b\u578b\uff1a\u5206\u7c7b\u6811\u548c\u56de\u5f52\u6811\u3002\u5206\u7c7b\u6811\u7684\u8f93\u51fa\u662f\u6837\u672c\u7684\u7c7b\u522b\uff0c\u56de\u5f52\u6811\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5b9e\u6570\u3002\u65e5\u5e38\u4eba\u4eec\u6240\u8bf4\u7684\u51b3\u7b56\u6811\uff0c\u901a\u5e38\u662f\u6307CART\u51b3\u7b56\u6811\uff0c\u751a\u81f3\u662f\u6307CART\u51b3\u7b56\u6811\u4e2d\u7684\u5206\u7c7b\u6811."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.datasets import load_iris\nfrom sklearn import tree\nimport numpy  as np\niris = load_iris() \n\nclf = tree.DecisionTreeClassifier(min_samples_leaf=15)  \nclf = clf.fit(iris.data, iris.target)\n# \u51b3\u7b56\u6811\u6a21\u578b\u4e3a:\u5148\u5de6\u540e\u53f3\uff0c\u5148\u4e0a\u540e\u4e0b \u8d1f\u6570\u8868\u793a\u6ca1\u6709\nprint("\u6811\u7ed3\u6784-\u5de6\u8282\u70b9\uff1a"+str(clf.tree_.children_left))\nprint("\u6811\u7ed3\u6784-\u53f3\u8282\u70b9\uff1a"+str(clf.tree_.children_right))\nprint("\u8282\u70b9\u5206\u88c2\u7279\u5f81\uff1a"+str(clf.tree_.feature))\nprint("\u8282\u70b9\u5206\u88c2\u9608\u503c\uff1a"+str(np.round(clf.tree_.threshold,2)))\nprint("\u8282\u70b9\u7c7b\u522b\uff1a"+str(clf.classes_.take( [ np.argmax(i) for i in clf.tree_.value])))\n')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://bbbdata.com/img/cnt/text/ml/202212/a87c5d0c-d3b2-4f33-bd7b-52e6c3cf4271.png",alt:null})),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://bbbdata.com/img/cnt/text/ml/202205/34b41478-e3ca-4bbb-84b4-e02dba1e56c8.png",alt:null})),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-4"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.tree import DecisionTreeClassifier\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nclf = DecisionTreeClassifier(random_state=0)\n# \u8ba1\u7b97\u6700\u5c0f\u6210\u672c\u590d\u6742\u6027\u4fee\u526a\u671f\u95f4\u7684\u4fee\u526a\u8def\u5f84\npath = clf.cost_complexity_pruning_path(X_train, y_train)\n# \u4ece\u8def\u5f84\u4e2d\u63d0\u53d6alpha\u503c\u548c\u76f8\u5e94\u7684\u51b3\u7b56\u6811\n# \u526a\u679d\u671f\u95f4\u5b50\u6811\u7684\u6709\u6548 alpha\n# \u4ee3\u4ef7\u590d\u6742\u5ea6\u526a\u679d\u6cd5\uff0c\u5b9e\u8d28\u5c31\u662f\u5728\u6811\u7684\u590d\u6742\u5ea6\u4e0e\u51c6\u786e\u6027\u4e4b\u95f4\u53d6\u5f97\u4e00\u4e2a\u5e73\u8861\u70b9\u3002\n# \u539f\u7406\u53c2\u8003\uff1ahttps://blog.csdn.net/ywj_1991/article/details/126846155\nccp_alphas, impurities = path.ccp_alphas, path.impurities\n\n# \u5728 DecisionTreeClassifier\u4e2d\uff0c \u8fd9\u79cd\u526a\u679d\u6280\u672f\u662f\u901a\u8fc7\u6210\u672c\u590d\u6742\u5ea6\u53c2\u6570ccp_alpha\u6765\u53c2\u6570\u5316\u7684\u3002\u66f4\u5927\u7684ccp_alpha\u503c\u589e\u52a0\u88ab\u526a\u679d\u7684\u8282\u70b9\u6570\u3002\nclfs = []\n# ccp_alphas\u7684\u503c\u662f\u901a\u8fc7cost_complexity_pruning_path\u83b7\u5f97\u7684\nfor ccp_alpha in ccp_alphas:\n    # \u6bcf\u4e2a\u5faa\u73af\u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    # \u62df\u5408\u51b3\u7b56\u6811\n    clf.fit(X_train, y_train)\n    # \u51b3\u7b56\u6811\u6a21\u578b\u4e3a:\u5148\u5de6\u540e\u53f3\uff0c\u5148\u4e0a\u540e\u4e0b \u8d1f\u6570\u8868\u793a\u6ca1\u6709\n    print("{} | \u6811\u7ed3\u6784-\u5de6\u8282\u70b9\u957f\u5ea6\uff1a{}\uff0c\u6811\u7ed3\u6784-\u53f3\u8282\u70b9\u957f\u5ea6\uff1a{}".format(ccp_alpha,len(clf.tree_.children_right),len(clf.tree_.children_left)))\n\n    # \u5c06\u51b3\u7b56\u6811\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    clfs.append(clf)\nprint("Number of nodes in the last tree is: {} with ccp_alpha: {}".format(\n      clfs[-1].tree_.node_count, ccp_alphas[-1]))\n# \u5220\u9664 ccp_alphas\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff0c \u56e0\u4e3a\u5b83\u5bf9\u5e94\u4e8e\u5b8c\u5168\u672a\u526a\u679d\u7684\u6811\nclfs = clfs[:-1]\n# ccp_alphas\u4e5f\u9700\u8981\u5220\u9664\u6700\u540e\u4e00\u4e2a\u503c\uff0c \u56e0\u4e3a\u5b83\u662f\u5b8c\u5168\u672a\u526a\u679d\u7684\u6811\u5bf9\u5e94\u7684\u503c\nccp_alphas = ccp_alphas[:-1]\n')),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-6"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.tree import DecisionTreeClassifier\n\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nclf = DecisionTreeClassifier(random_state=0)\n# \u8ba1\u7b97\u6700\u5c0f\u6210\u672c\u590d\u6742\u6027\u4fee\u526a\u671f\u95f4\u7684\u4fee\u526a\u8def\u5f84\npath = clf.cost_complexity_pruning_path(X_train, y_train)\n# \u4ece\u8def\u5f84\u4e2d\u63d0\u53d6alpha\u503c\u548c\u76f8\u5e94\u7684\u51b3\u7b56\u6811\n# \u526a\u679d\u671f\u95f4\u5b50\u6811\u7684\u6709\u6548 alpha\n# \u4ee3\u4ef7\u590d\u6742\u5ea6\u526a\u679d\u6cd5\uff0c\u5b9e\u8d28\u5c31\u662f\u5728\u6811\u7684\u590d\u6742\u5ea6\u4e0e\u51c6\u786e\u6027\u4e4b\u95f4\u53d6\u5f97\u4e00\u4e2a\u5e73\u8861\u70b9\u3002\n# \u539f\u7406\u53c2\u8003\uff1ahttps://blog.csdn.net/ywj_1991/article/details/126846155\nccp_alphas, impurities = path.ccp_alphas, path.impurities\n\n# \u5728 DecisionTreeClassifier\u4e2d\uff0c \u8fd9\u79cd\u526a\u679d\u6280\u672f\u662f\u901a\u8fc7\u6210\u672c\u590d\u6742\u5ea6\u53c2\u6570ccp_alpha\u6765\u53c2\u6570\u5316\u7684\u3002\u66f4\u5927\u7684ccp_alpha\u503c\u589e\u52a0\u88ab\u526a\u679d\u7684\u8282\u70b9\u6570\u3002\nclfs = []\n# ccp_alphas\u7684\u503c\u662f\u901a\u8fc7cost_complexity_pruning_path\u83b7\u5f97\u7684\nfor ccp_alpha in ccp_alphas:\n    # \u6bcf\u4e2a\u5faa\u73af\u521b\u5efa\u4e00\u4e2a\u51b3\u7b56\u6811\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    # \u62df\u5408\u51b3\u7b56\u6811\n    clf.fit(X_train, y_train)\n    # \u51b3\u7b56\u6811\u6a21\u578b\u4e3a:\u5148\u5de6\u540e\u53f3\uff0c\u5148\u4e0a\u540e\u4e0b \u8d1f\u6570\u8868\u793a\u6ca1\u6709\n    print("{} | \u6811\u7ed3\u6784-\u5de6\u8282\u70b9\u957f\u5ea6\uff1a{}\uff0c\u6811\u7ed3\u6784-\u53f3\u8282\u70b9\u957f\u5ea6\uff1a{}".format(ccp_alpha,len(clf.tree_.children_right),len(clf.tree_.children_left)))\n\n    # \u5c06\u51b3\u7b56\u6811\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n    clfs.append(clf)\nprint("Number of nodes in the last tree is: {} with ccp_alpha: {}".format(\n      clfs[-1].tree_.node_count, ccp_alphas[-1]))\n# \u5220\u9664 ccp_alphas\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff0c \u56e0\u4e3a\u5b83\u5bf9\u5e94\u4e8e\u5b8c\u5168\u672a\u526a\u679d\u7684\u6811\nclfs = clfs[:-1]\n# ccp_alphas\u4e5f\u9700\u8981\u5220\u9664\u6700\u540e\u4e00\u4e2a\u503c\uff0c \u56e0\u4e3a\u5b83\u662f\u5b8c\u5168\u672a\u526a\u679d\u7684\u6811\u5bf9\u5e94\u7684\u503c\nccp_alphas = ccp_alphas[:-1]\n# \u7ed8\u5236\u6bcf\u4e2aalpha\u503c\u7684\u6811\u7684\u6d4b\u8bd5\u96c6\u7cbe\u5ea6\u548c\u8bad\u7ec3\u96c6\u7cbe\u5ea6\nnode_counts = [clf.tree_.node_count for clf in clfs]\n# \u8ba1\u7b97\u6bcf\u4e2a\u6811\u7684\u6d4b\u8bd5\u96c6\u7cbe\u5ea6\u548c\u8bad\u7ec3\u96c6\u7cbe\u5ea6\ndepth = [clf.tree_.max_depth for clf in clfs]\n\n\n# \u7ed8\u5236\u7cbe\u5ea6\u4e0ealpha\u7684\u5173\u7cfb\ntrain_scores = [clf.score(X_train, y_train) for clf in clfs]\n# \u7ed8\u5236\u6d4b\u8bd5\u96c6\u7cbe\u5ea6\ntest_scores = [clf.score(X_test, y_test) for clf in clfs]\n\nfig, ax = plt.subplots()\nax.plot(ccp_alphas, train_scores, marker=\'o\', label="train",\n        drawstyle="steps-post")\nax.plot(ccp_alphas, test_scores, marker=\'o\', label="test",\n        drawstyle="steps-post")\nax.legend()\nplt.show()\n\'\'\'\n\u5f53 ccp_alpha \u8bbe\u7f6e\u4e3a0, \u5e76\u4fdd\u7559DecisionTreeClassifier\u7684\u5176\u4ed6\u9ed8\u8ba4\u53c2\u6570\u65f6, \u6811\u5c31\u8fc7\u62df\u5408\u4e86\uff0c\n\u4f7f\u8bad\u7ec3\u7684\u51c6\u786e\u7387\u8fbe\u5230100%\uff0c\u6d4b\u8bd5\u7684\u51c6\u786e\u7387\u8fbe\u523088%\u3002\n\u968f\u7740alpha\u7684\u589e\u52a0\uff0c\u66f4\u591a\u7684\u6811\u88ab\u526a\u679d\uff0c\u4ece\u800c\u521b\u5efa\u4e86\u4e00\u4e2a\u6cdb\u5316\u66f4\u597d\u7684\u51b3\u7b56\u6811\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u8bbe\u7f6e ccp_alpha=0.015\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u6d4b\u8bd5\u7684\u51c6\u786e\u7387\u3002\n\'\'\'\n')),(0,r.kt)("h3",{id:"\u6a21\u578b\u4fdd\u5b58"},"\u6a21\u578b\u4fdd\u5b58"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pickle\nimport os\n# \u4fdd\u5b58\u6a21\u578b\nwith open('clf_model_v1.pickle','wb') as f:\n pickle.dump(clf,f)\n# \u52a0\u8f7d\u6a21\u578b\nwith open('clf_model_v1.pickle','rb') as f:\n clf2 = pickle.load(f)\n\n# \u5220\u9664\u6a21\u578b\nos.remove('clf_model_v1.pickle')\n\nimport joblib\n\n# \u4fdd\u5b58\u6a21\u578b\njoblib.dump(clf, 'new_app_model_v1.pkl')\n\n# \u52a0\u8f7d\u6a21\u578b\nclf3 = joblib.load('new_app_model_v1.pkl')\n\n# \u5220\u9664\u6a21\u578b\nos.remove('new_app_model_v1.pkl')\n")),(0,r.kt)("h2",{id:"\u6734\u7d20\u8d1d\u53f6\u65af"},"\u6734\u7d20\u8d1d\u53f6\u65af"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5efa\u7acb\u5728\u8d1d\u53f6\u65af\u7406\u8bba\u4e0a\u7684\u5206\u7c7b\u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"\u5b83\u7684\u5047\u8bbe\u6761\u4ef6\u662f\u81ea\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u3002"),(0,r.kt)("p",null,"\u7b80\u8a00\u4e4b\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u5047\u5b9a\u67d0\u4e00\u7279\u5f81\u7684\u51fa\u73b0\u4e0e\u5176\u5b83\u7279\u5f81\u65e0\u5173\u3002\u5373\u7ed9\u5b9a\u7c7b\u522b\uff0c\u7279\u5f81\u4e4b\u95f4\u6ca1\u6709\u76f8\u5173\u6027\u3002\u8fd9\u4e2a\u5047\u8bbe\u662f\u201c\u6734\u7d20\u201d\u7684\u6765\u6e90\u3002"),(0,r.kt)("p",null,"\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u6c34\u679c\u5b83\u662f\u7ea2\u8272\u7684\uff0c\u5706\u72b6\u7684\uff0c\u76f4\u5f84\u5927\u69827cm\u5de6\u53f3\uff0c\u6211\u4eec\u53ef\u80fd\u731c\u6d4b\u5b83\u4e3a\u82f9\u679c\u3002\u5373\u4f7f\u8fd9\u4e9b\u7279\u5f81\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u5173\u7cfb\uff0c\u5728\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u4e2d\u6211\u4eec\u90fd\u8ba4\u4e3a\u7ea2\u8272\uff0c\u5706\u72b6\u548c\u76f4\u5f84\u5728\u5224\u65ad\u4e00\u4e2a\u6c34\u679c\u662f\u82f9\u679c\u7684\u53ef\u80fd\u6027\u4e0a\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002"),(0,r.kt)("p",null,"\u4e00\u4e2a\u4e8c\u5206\u7c7b\u7684\u6848\u4f8b\u5047\u8bbe:"),(0,r.kt)("p",null,"\u6211\u4eca\u5929\u6536\u5230\u4e86100\u5c01\u90ae\u4ef6\uff0c\u5176\u4e2d\u670980\u5c01\u662f\u5783\u573e\u90ae\u4ef6\uff0c20\u5c01\u662f\u6b63\u5e38\u90ae\u4ef6\u3002\nP\uff08\u5783\u573e\u90ae\u4ef6\uff09 = 80/100 = 0.8\nP\uff08\u6b63\u5e38\u90ae\u4ef6\uff09 = 20/100 = 0.2"),(0,r.kt)("p",null,"\u6211\u9009\u5b9a\u4e86\u4e00\u4e9b\u8bcd\u4f5c\u4e3a\u7279\u5f81\uff0c\u8fd9\u4e9b\u8bcd\u53ef\u80fd\u51fa\u73b0\u5728\u90ae\u4ef6\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4e0d\u51fa\u73b0\u3002\u8fd9\u4e9b\u8bcd\u6709\u201c\u514d\u8d39\u201d\uff0c\u201c\u606d\u559c\u201d\uff0c\u201c\u8f9b\u82e6\u201d\u7b49\u3002"),(0,r.kt)("p",null,"\u6211\u53d1\u73b0\u5783\u573e\u90ae\u4ef6\u4e2d\u670920\u5c01\u542b\u6709\u201c\u514d\u8d39\u201d\u8fd9\u4e2a\u8bcd\uff0c50\u5c01\u542b\u6709\u201c\u606d\u559c\u201d\u8fd9\u4e2a\u8bcd\uff0c0\u5c01\u542b\u6709\u201c\u8f9b\u82e6\u201d\u8fd9\u4e2a\u8bcd\u3002\nP\uff08\u514d\u8d39|\u5783\u573e\u90ae\u4ef6\uff09 = 20/80 = 0.25\nP\uff08\u606d\u559c|\u5783\u573e\u90ae\u4ef6\uff09 = 50/80 = 0.625\nP\uff08\u8f9b\u82e6|\u5783\u573e\u90ae\u4ef6\uff09 = 0/80 = 0"),(0,r.kt)("p",null,"\u6b63\u5e38\u90ae\u4ef6\u4e2d\u67095\u5c01\u542b\u6709\u201c\u514d\u8d39\u201d\u8fd9\u4e2a\u8bcd\u30026\u5c01\u542b\u6709\u201c\u606d\u559c\u201d\u8fd9\u4e2a\u8bcd\uff0c2\u5c01\u542b\u6709\u201c\u8f9b\u82e6\u201d\u8fd9\u4e2a\u8bcd\u3002\nP\uff08\u514d\u8d39|\u6b63\u5e38\u90ae\u4ef6\uff09 = 5/20 = 0.25\nP\uff08\u606d\u559c|\u6b63\u5e38\u90ae\u4ef6\uff09 = 6/20 = 0.3\nP\uff08\u8f9b\u82e6|\u6b63\u5e38\u90ae\u4ef6\uff09 = 2/20 = 0.1"),(0,r.kt)("p",null,"\u73b0\u5728\u6211\u6536\u5230\u4e86\u4e00\u5c01\u90ae\u4ef6\uff0c\u8fd9\u5c01\u90ae\u4ef6\u5185\u5bb9\u4e3a\uff1a\u201c\u606d\u559c\u60a8\u83b7\u5f97\u4e86\u4e00\u6b21\u514d\u8d39\u7684\u673a\u4f1a\u201d\uff0c\u6211\u60f3\u77e5\u9053\u8fd9\u5c01\u90ae\u4ef6\u662f\u5783\u573e\u90ae\u4ef6\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f"),(0,r.kt)("p",null,"P\uff08\u5783\u573e\u90ae\u4ef6|\u514d\u8d39\uff0c\u606d\u559c\uff09 = P\uff08\u514d\u8d39|\u5783\u573e\u90ae\u4ef6\uff09",(0,r.kt)("em",{parentName:"p"},"P\uff08\u606d\u559c|\u5783\u573e\u90ae\u4ef6\uff09")," P\uff08\u5783\u573e\u90ae\u4ef6\uff09= 0.25 ",(0,r.kt)("em",{parentName:"p"},"0.625")," 0.8 = 0.125"),(0,r.kt)("p",null,"P\uff08\u6b63\u5e38\u90ae\u4ef6|\u514d\u8d39\uff0c\u606d\u559c\uff09 = P\uff08\u514d\u8d39|\u6b63\u5e38\u90ae\u4ef6\uff09",(0,r.kt)("em",{parentName:"p"},"P\uff08\u606d\u559c|\u6b63\u5e38\u90ae\u4ef6\uff09")," P\uff08\u6b63\u5e38\u90ae\u4ef6\uff09= 0.25 ",(0,r.kt)("em",{parentName:"p"},"0.3")," 0.2 = 0.015"),(0,r.kt)("p",null,"\u56e0\u4e3aP\uff08\u5783\u573e\u90ae\u4ef6|\u514d\u8d39\uff0c\u606d\u559c\uff09 > P\uff08\u6b63\u5e38\u90ae\u4ef6|\u514d\u8d39\uff0c\u606d\u559c\uff09\uff0c\u6240\u4ee5\u8fd9\u5c01\u90ae\u4ef6\u88ab\u5224\u5b9a\u4e3a\u5783\u573e\u90ae\u4ef6\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u72e1\u733e\u7684\u5783\u573e\u90ae\u4ef6\u5236\u9020\u8005\u628a\u90ae\u4ef6\u5185\u5bb9\u6539\u4e3a\uff1a\u201c\u606d\u559c\u60a8\u83b7\u5f97\u4e86\u4e00\u6b21\u514d\u8d39\u7684\u673a\u4f1a\uff0c\u8f9b\u82e6\u60a8\u52a8\u52a8\u624b\u6307\u53c2\u52a0\u6211\u4eec\u7684\u514d\u8d39\u6d3b\u52a8\u201d\uff0c\u90a3\u4e48\u8fd9\u5c01\u90ae\u4ef6\u88ab\u5224\u5b9a\u4e3a\u5783\u573e\u90ae\u4ef6\u7684\u6982\u7387\u5c31\u4f1a\u53d8\u62100\uff0c\u56e0\u4e3a\u201c\u8f9b\u82e6\u201d\u8fd9\u4e2a\u8bcd\u5728\u6b63\u5e38\u90ae\u4ef6\u4e2d\u6709\u51fa\u73b0\uff0c\u5728\u5783\u573e\u90ae\u4ef6\u4e2d\u6ca1\u6709\u51fa\u73b0\u3002"),(0,r.kt)("p",null,"\u6539\u8fdb:\u62c9\u666e\u62c9\u65af\u5e73\u6ed1\u6cd5"),(0,r.kt)("p",null,"\u5728\u6bcf\u4e2a\u5173\u952e\u8bcd\u4e0a\u4eba\u4e3a\u7684\u589e\u52a0\u4e00\u4e2a\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51fa\u73b0\u6982\u7387\u4e3a0\u7684\u60c5\u51b5\u4e86\u3002\uff08\u4e0b\u9762\u7684\u516c\u5f0f\u514d\u8d39\u7684\u5e73\u65b9\u8868\u793a\u8fd9\u4e2a\u5173\u952e\u8bcd\u51fa\u73b02\u6b21\uff09"),(0,r.kt)("p",null,"P\uff08\u5783\u573e\u90ae\u4ef6|\u514d\u8d39\uff0c\u606d\u559c\uff09 = P\uff08\u514d\u8d39|\u5783\u573e\u90ae\u4ef6\uff09",(0,r.kt)("em",{parentName:"p"},"P\uff08\u606d\u559c|\u5783\u573e\u90ae\u4ef6\uff09")," P\uff08\u5783\u573e\u90ae\u4ef6\uff09= (21/80)\xb2 ",(0,r.kt)("em",{parentName:"p"},"(51/80)")," 0.8 = 0.0351421875"),(0,r.kt)("p",null,"P\uff08\u6b63\u5e38\u90ae\u4ef6|\u514d\u8d39\uff0c\u606d\u559c\uff09 = P\uff08\u514d\u8d39|\u6b63\u5e38\u90ae\u4ef6\uff09",(0,r.kt)("em",{parentName:"p"},"P\uff08\u606d\u559c|\u6b63\u5e38\u90ae\u4ef6\uff09")," P\uff08\u6b63\u5e38\u90ae\u4ef6\uff09= (6/20)\xb2",(0,r.kt)("em",{parentName:"p"},"(7/20)")," 0.2 =0.0063"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.naive_bayes import GaussianNB\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1], [2], [3], [4], [5]])  # \u7279\u5f81\ny = np.array([0, 0, 1, 1, 1])  # \u76ee\u6807\u6807\u7b7e\n\n# \u521b\u5efa\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668 (\u9ad8\u65af\u6734\u7d20\u8d1d\u53f6\u65af)\nmodel = GaussianNB()\n\n# .fit() \u65b9\u6cd5\u7528\u4e8e\u62df\u5408\u6a21\u578b\nmodel.fit(X, y)\n\n# \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[6]]) \n \n# .predict() \u65b9\u6cd5\u8fd4\u56de\u9884\u6d4b\u7684\u7c7b\u522b\npredicted_class = model.predict(new_data_point)\n# .predict_proba() \u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e2a\u7c7b\u522b\u7684\u6982\u7387\npredicted_proba = model.predict_proba(new_data_point)\n\nprint("\u9884\u6d4b\u7c7b\u522b:", predicted_class)\nprint("\u7c7b\u522b\u6982\u7387:", predicted_proba)\n\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-5"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nimport sklearn.datasets\n# \u52a0\u8f7d\u6570\u636e\ndata = sklearn.datasets.load_iris()\n# .data \u5c5e\u6027\u5305\u542b\u7279\u5f81\nX = data.data\n# .target \u5c5e\u6027\u5305\u542b\u76ee\u6807\u6807\u7b7e\ny = data.target\n# \u5212\u5206\u6570\u636e\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n# \u521b\u5efa\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668 (\u9ad8\u65af\u6734\u7d20\u8d1d\u53f6\u65af)\nmodel = GaussianNB()\n# \u62df\u5408\u6a21\u578b\nmodel.fit(X_train, y_train)\n\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-7"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.metrics import accuracy_score  \n\n# \u8ba1\u7b97\u51c6\u786e\u7387  \naccuracy = accuracy_score(y_test, model.predict(X_test))  \naccuracy\n")),(0,r.kt)("h3",{id:"\u67e5\u770b\u5206\u7c7b\u9519\u8bef\u7684\u6837\u672c\u4fe1\u606f"},"\u67e5\u770b\u5206\u7c7b\u9519\u8bef\u7684\u6837\u672c\u4fe1\u606f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\n\n# \u628a\u6d4b\u8bd5\u6570\u636e\u3001\u76ee\u6807\u6807\u7b7e\u3001\u9884\u6d4b\u7ed3\u679c\u5408\u5e76\u5230\u4e00\u8d77\n# pd.DataFrame()\u51fd\u6570\u7528\u4e8e\u521b\u5efaDataFrame\n# pd.concat()\u51fd\u6570\u7528\u4e8e\u5408\u5e76\u591a\u4e2aDataFrame\n# axis=1 \u8868\u793a\u6309\u5217\u5408\u5e76\ndf = pd.concat(\n    [pd.DataFrame(X_test,columns=data.feature_names), \n     pd.DataFrame(y_test,columns=['target']),\n     pd.DataFrame(model.predict(X_test),columns=['predict'])\n     ],axis=1 )\n\n# \u7b5b\u9009target\u5217\u4e0epredict\u5217\u4e0d\u76f8\u7b49\u7684\u6570\u636e\ndf.loc[df['target']!=df['predict']]\n\n")),(0,r.kt)("h2",{id:"\u652f\u6301\u5411\u91cf\u673a"},"\u652f\u6301\u5411\u91cf\u673a"),(0,r.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u5206\u7c7b\u7b97\u6cd5\u3002"),(0,r.kt)("p",null,"\u5728\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u6570\u636e\u4f5c\u4e3a\u4e00\u4e2a\u70b9\u5728\u4e00\u4e2an\u7ef4\u7a7a\u95f4\u4e0a\u4f5c\u56fe\uff08n\u662f\u7279\u5f81\u6570\uff09\uff0c\u6bcf\u4e00\u4e2a\u7279\u5f81\u503c\u5c31\u4ee3\u8868\u5bf9\u5e94\u5750\u6807\u503c\u7684\u5927\u5c0f\u3002"),(0,r.kt)("p",null,"\u6bd4\u5982\u8bf4\u6211\u4eec\u6709\u4e24\u4e2a\u7279\u5f81\uff1a\u4e00\u4e2a\u4eba\u7684\u8eab\u9ad8\u548c\u53d1\u957f\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u53d8\u91cf\u5728\u4e00\u4e2a\u4e8c\u7ef4\u7a7a\u95f4\u4e0a\u4f5c\u56fe\uff0c\u56fe\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e24\u4e2a\u5750\u6807\u503c\uff08\u8fd9\u4e9b\u5750\u6807\u8f74\u4e5f\u53eb\u505a\u652f\u6301\u5411\u91cf\uff09\u3002"),(0,r.kt)("p",null,"\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5bfc\u5165\u4e86scikit-learn\u5e93\u4e2d\u7684svm\u6a21\u5757\u4ee5\u53caNumPy\u5e93\u3002\u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e9b\u793a\u4f8b\u6570\u636e X \u548c y\uff0c\u5176\u4e2d X \u662f\u7279\u5f81\uff0cy \u662f\u76ee\u6807\u6807\u7b7e\u3002"),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2aSVM\u5206\u7c7b\u5668\uff0c\u4f7f\u7528\u7ebf\u6027\u6838\u51fd\u6570\uff08kernel='linear'\uff09\u3002"),(0,r.kt)("p",null,"\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 fit \u65b9\u6cd5\u62df\u5408\u4e86\u6a21\u578b\uff0c\u5e76\u5728\u65b0\u6570\u636e\u70b9\u4e0a\u4f7f\u7528 predict \u65b9\u6cd5\u8fdb\u884c\u9884\u6d4b\uff0c\u4ee5\u83b7\u53d6\u65b0\u6570\u636e\u70b9\u7684\u7c7b\u522b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn import svm\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2], [2, 3], [2, 5], [3, 2], [3, 3], [4, 5]])  # \u7279\u5f81\ny = np.array([0, 0, 1, 0, 1, 1])  # \u76ee\u6807\u6807\u7b7e\n\n# \u521b\u5efaSVM\u5206\u7c7b\u5668\nmodel = svm.SVC(kernel="linear")\n\n# \u62df\u5408\u6a21\u578b\nmodel.fit(X, y)\n\n# \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[3, 4]])  \n# \u9884\u6d4b\u65b0\u6570\u636e\u70b9\u7684\u7c7b\u522b\npredicted_class = model.predict(new_data_point)\n\nprint("\u9884\u6d4b\u7c7b\u522b:", predicted_class)\n')),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-6"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn import svm\n\n# \u5bfc\u5165\u4e00\u4e2a\u6570\u636e\u91cf\u8f83\u591a\u7684\u6570\u636e\uff0c\u4e73\u817a\u764c\niris = load_breast_cancer()\n# \u83b7\u53d6\u6570\u636e\u96c6\nX, y = iris.data ,iris.target\n\n# \u76f4\u63a5\u4f7f\u7528\u6570\u636e\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n# \u521b\u5efaSVM\u5206\u7c7b\u5668\nclf = svm.SVC()\n# \u62df\u5408\u6a21\u578b  \nclf.fit(X_train, y_train)\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-8"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# .score()\u8fd4\u56de\u7684\u662f\u51c6\u786e\u5ea6\n# \u548c\u4e4b\u524d\u5b66\u4e60\u7684accuracy_score\u3001cross_val_score\u4e00\u6837\u90fd\u662f\u68c0\u6d4b\u51c6\u786e\u5ea6\u7684\u65b9\u6cd5\nprint('\u9884\u6d4b\u662f\u51c6\u786e\u5ea6\u4e3a{}%'.format(clf.score(X_test, y_test)*100))\n")),(0,r.kt)("h3",{id:"\u6570\u636enormalization"},"\u6570\u636enormalization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn import preprocessing\n# normalization\u662f\u6307\u5c06\u6570\u636e\u6309\u6bd4\u4f8b\u7f29\u653e\uff0c\u4f7f\u4e4b\u843d\u5165\u4e00\u4e2a\u5c0f\u7684\u7279\u5b9a\u533a\u95f4\n# \u5148\u6807\u51c6\u5316\u6570\u636e\u518d\u4f7f\u7528\u6570\u636e\nX2 = preprocessing.scale(X)    # normalization step\n# print(X2)\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2, y, test_size=0.3)\n\nclf2 = svm.SVC()\nclf2.fit(X2_train, y2_train)\nprint('\u9884\u6d4b\u662f\u51c6\u786e\u5ea6\u4e3a{}%'.format(clf2.score(X2_test, y2_test)*100))\n# \u7b80\u5355\u9a8c\u8bc1\u540e\u53d1\u73b0\u5904\u7406\u540e\u7684\u6570\u636e\u663e\u7136\u8868\u73b0\u66f4\u597d\uff0c\u9884\u6d4b\u662f\u51c6\u786e\u5ea6\u4e3a98.83040935672514%\n\nfrom sklearn import model_selection\n\n# \u4f46\u662f\u5e76\u4e0d\u662f\u6bcf\u6b21\u9a8c\u8bc1\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u9a8c\u8bc1\u5177\u6709\u968f\u673a\u6027\uff0c\u56e0\u6b64\u9700\u8981\u4ea4\u53c9\u9a8c\u8bc1\n# \u628a\u6570\u636e\u5206\u62105\u4efd\uff0c\u5206\u522b\u505a\u6d4b\u8bd5\u96c6\uff0c\u63d0\u53d6\u5206\u6570\u5e76\u6c42\u5e73\u5747\u503c\uff0c\u663e\u7136\u5904\u7406\u540e\u7684\u6570\u636e\u8868\u73b0\u66f4\u597d\nprint(model_selection.cross_validate(clf,X_test, y_test,cv=5)['test_score'].mean())\nprint(model_selection.cross_validate(clf2,X2_test, y2_test,cv=5)['test_score'].mean())\n'''\n0.8947899159663866 # \u672a\u5904\u7406\u7684\u6570\u636e\n0.9825210084033614 # \u5904\u7406\u540e\u7684\u6570\u636e\n'''\n")),(0,r.kt)("h3",{id:"\u9632\u6b62\u8fc7\u62df\u5408"},"\u9632\u6b62\u8fc7\u62df\u5408"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from __future__ import print_function\nfrom sklearn.model_selection import  learning_curve\nfrom sklearn.datasets import load_digits\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt\nimport numpy as np\n# \u8f7d\u5165\u6570\u636e\ndigits = load_digits()\nX = digits.data\ny = digits.target\n\n# learning_curve()\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u5728\u4e0d\u540c\u5927\u5c0f\u7684\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684\u5f97\u5206\u60c5\u51b5\n# \u8fdb\u800c\u5206\u6790\u6a21\u578b\u662f\u5426\u8fc7\u62df\u5408\u6216\u8005\u6b20\u62df\u5408\n# \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528SVC\u6a21\u578b\uff0cgamma=0.01\n# gamma\u53c2\u6570\u7528\u4e8e\u63a7\u5236\u6a21\u578b\u7684\u590d\u6742\u5ea6\uff0cgamma\u8d8a\u5927\uff0c\u6a21\u578b\u8d8a\u590d\u6742\uff0c\u8d8a\u5bb9\u6613\u8fc7\u62df\u5408\n# \u901a\u8fc7train_sizes\u53c2\u6570\u6765\u6307\u5b9a\u8bad\u7ec3\u96c6\u7684\u5927\u5c0f\n# \u901a\u8fc7cv\u53c2\u6570\u6765\u6307\u5b9a\u4ea4\u53c9\u9a8c\u8bc1\u7684\u6b21\u6570\n# \u901a\u8fc7scoring\u53c2\u6570\u6765\u6307\u5b9a\u8bc4\u4ef7\u6307\u6807\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u8d1f\u5747\u65b9\u8bef\u5dee\ntrain_sizes, train_loss, test_loss= learning_curve(\n        SVC(gamma=0.01), X, y, cv=10, scoring="neg_mean_squared_error",\n        train_sizes=[0.1, 0.25, 0.5, 0.75, 1])\n\n# \u8ba1\u7b97\u5e73\u5747\u503c\u548c\u6807\u51c6\u5dee\ntrain_loss_mean = -np.mean(train_loss, axis=1)\ntest_loss_mean = -np.mean(test_loss, axis=1)\n\n# \u7ed8\u5236\u66f2\u7ebf\n# \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u662f\u8d1f\u5747\u65b9\u8bef\u5dee\uff0c\u56e0\u6b64\u6570\u503c\u8d8a\u5c0f\uff0c\u6a21\u578b\u8d8a\u597d\n# ro-\u8868\u793a\u7ea2\u8272\u5706\u5f62\u5b9e\u7ebf\uff0cgo-\u8868\u793a\u7eff\u8272\u5706\u5f62\u5b9e\u7ebf\nplt.plot(train_sizes, train_loss_mean, \'ro-\', \n             label="Training")\nplt.plot(train_sizes, test_loss_mean, \'go-\', \n             label="test-Cross-validation")\nplt.xlabel("Training examples")\nplt.ylabel("Loss")\n# \u663e\u793a\u56fe\u4f8b,loc="best"\u8868\u793a\u81ea\u52a8\u9009\u62e9\u6700\u4f73\u4f4d\u7f6e\nplt.legend(loc="best")\nplt.show()\n# \u8fd9\u4e2a\u56fe\u8868\u793a\uff1a\n# \u521a\u5f00\u59cb\u53ea\u6709200\u4e2a\u6570\u636e\u7684\u65f6\u5019\uff0c\u8bef\u5dee\u5f88\u5927\uff0c\u8fd9\u662f\u56e0\u4e3a\u6570\u636e\u91cf\u592a\u5c11\uff0c\u6a21\u578b\u65e0\u6cd5\u5f88\u597d\u5730\u62df\u5408\u6570\u636e\n# \u968f\u7740\u6570\u636e\u91cf\u7684\u589e\u52a0\uff0c\u8bef\u5dee\u9010\u6e10\u51cf\u5c0f\uff0c\u8fd9\u662f\u56e0\u4e3a\u6a21\u578b\u53ef\u4ee5\u66f4\u597d\u5730\u62df\u5408\u6570\u636e\n# \u4f46\u662f\u968f\u7740\u6570\u636e\u96c6\u8fdb\u4e00\u6b65\u589e\u52a0\uff0c\u8bef\u5dee\u53cd\u800c\u589e\u5927\u4e86\uff0c\u8fd9\u8bf4\u660e\u6a21\u578b\u51fa\u73b0\u4e86\u8fc7\u62df\u5408\n')),(0,r.kt)("h2",{id:"\u968f\u673a\u68ee\u6797"},"\u968f\u673a\u68ee\u6797"),(0,r.kt)("p",null,"\u968f\u673a\u68ee\u6797\u662f\u5bf9\u51b3\u7b56\u6811\u96c6\u5408\u7684\u7279\u6709\u540d\u79f0\u3002"),(0,r.kt)("p",null,"\u968f\u673a\u68ee\u6797\u91cc\u6211\u4eec\u6709\u591a\u4e2a\u51b3\u7b56\u6811\uff08\u6240\u4ee5\u53eb\u201c\u68ee\u6797\u201d\uff09\u3002"),(0,r.kt)("p",null,"\u4e3a\u4e86\u7ed9\u4e00\u4e2a\u65b0\u7684\u89c2\u5bdf\u503c\u5206\u7c7b\uff0c\u6839\u636e\u5b83\u7684\u7279\u5f81\uff0c\u6bcf\u4e00\u4e2a\u51b3\u7b56\u6811\u90fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5206\u7c7b\u3002"),(0,r.kt)("p",null,"\u968f\u673a\u68ee\u6797\u7b97\u6cd5\u9009\u51fa\u6295\u7968\u6700\u591a\u7684\u5206\u7c7b\u4f5c\u4e3a\u5206\u7c7b\u7ed3\u679c\u3002"),(0,r.kt)("p",null,"\u600e\u6837\u751f\u6210\u51b3\u7b56\u6811\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u5982\u679c\u8bad\u7ec3\u96c6\u4e2d\u6709N\u79cd\u7c7b\u522b\uff0c\u5219\u6709\u91cd\u590d\u5730\u968f\u673a\u9009\u53d6N\u4e2a\u6837\u672c\u3002\u8fd9\u4e9b\u6837\u672c\u5c06\u7ec4\u6210\u57f9\u517b\u51b3\u7b56\u6811\u7684\u8bad\u7ec3\u96c6\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u5982\u679c\u6709M\u4e2a\u7279\u5f81\u53d8\u91cf\uff0c\u90a3\u4e48\u9009\u53d6\u6570m << M\uff0c\u4ece\u800c\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u968f\u673a\u9009\u53d6m\u4e2a\u7279\u5f81\u53d8\u91cf\u6765\u5206\u5272\u8be5\u8282\u70b9\u3002m\u5728\u6574\u4e2a\u68ee\u6797\u517b\u6210\u4e2d\u4fdd\u6301\u4e0d\u53d8\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u51b3\u7b56\u6811\u90fd\u6700\u5927\u7a0b\u5ea6\u4e0a\u8fdb\u884c\u5206\u5272\uff0c\u6ca1\u6709\u526a\u679d\u3002"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\n\n# \u521b\u5efa\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\nX = np.array([[1, 2], [2, 3], [2, 5], [3, 2], [3, 3], [4, 5]])  # \u7279\u5f81\ny = np.array([0, 0, 1, 0, 1, 1])  # \u76ee\u6807\u6807\u7b7e\n\n# \u521b\u5efa\u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\n'''\n\u4e00\u822c\u6765\u8bf4\uff0c\u6df1\u5ea6\u8d8a\u5927\uff0c\u62df\u5408\u6548\u679c\u8d8a\u597d,\u901f\u5ea6\u8d8a\u6162,\u5e38\u7528\u7684\u53ef\u4ee5\u53d6\u503c10\u5230100\u4e4b\u95f4\u3002\n'''\nn_estimators = 100  # \u8bbe\u7f6e\u968f\u673a\u68ee\u6797\u4e2d\u7684\u6811\u7684\u6570\u91cf\nmodel = RandomForestClassifier(n_estimators=n_estimators)\n\n# \u62df\u5408\u6a21\u578b\nmodel.fit(X, y)\n\n# \u9884\u6d4b\u65b0\u6570\u636e\u70b9\nnew_data_point = np.array([[3, 4]])  # \u8981\u9884\u6d4b\u7684\u65b0\u6570\u636e\u70b9\npredicted_class = model.predict(new_data_point)\n\nprint(\"\u9884\u6d4b\u7c7b\u522b:\", predicted_class)\n\n")),(0,r.kt)("h3",{id:"\u7b80\u5355\u793a\u4f8b-7"},"\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.datasets import make_blobs\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.metrics import log_loss\n# \u968f\u673a\u6570\u79cd\u5b50\u8bbe\u4e3a0\uff0c\u524d\u9762\u6709\u8bb2\u8fc7\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u8fd0\u884c\u7ed3\u679c\u90fd\u4e00\u6837\nnp.random.seed(0)\n\n# \u968f\u673a\u751f\u62101000\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u5305\u542b2\u4e2a\u7279\u5f81\uff0c\u51714\u4e2a\u7c07\nX, y = make_blobs(n_samples=1000, random_state=42, cluster_std=5.0)\n\n# \u7528\u524d800\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u5e76\u4e14\u8fd9800\u4e2a\u6837\u672c\u4e2d\uff0c\u524d600\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u540e200\u4e2a\u6837\u672c\u7528\u6765\u77eb\u6b63\nX_train, y_train = X[:600], y[:600]\nX_valid, y_valid = X[600:800], y[600:800]\n\n# \u76f4\u63a5\u9009\u53d6\u524d800\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3\u96c6\nX_train_valid, y_train_valid = X[:800], y[:800]\n\n# \u7528\u524d800\u4e2a\u6837\u672c\u4f5c\u4e3a\u8bad\u7ec3+\u9a8c\u8bc1\u96c6\uff0c\u5269\u4e0b\u7684200\u4e2a\u6837\u672c\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\nX_test, y_test = X[800:], y[800:]\n\n# \u6811\u7684\u6570\u91cf\u4e3a25\nclf = RandomForestClassifier(n_estimators=25)\n# \u76f4\u63a5\u4f7f\u7528\u524d80%\u7684\u6570\u636e\u8bad\u7ec3\u6a21\u578b\nclf.fit(X_train_valid, y_train_valid)\n# \u540e20%\u7684\u6570\u636e\u6d4b\u8bd5\uff0c\nclf_probs = clf.predict_proba(X_test)\n")),(0,r.kt)("h3",{id:"\u6548\u679c\u8bc4\u4f30-9"},"\u6548\u679c\u8bc4\u4f30"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# \u7528log_loss\u6765\u8bc4\u4f30\u6a21\u578b\nscore = log_loss(y_test, clf_probs)\nprint("  %.3f " % score)\n# \u8fd9\u4e2a\u5206\u7c7b\u5668\u5bf9\u6240\u6709800\u4e2a\u8bad\u7ec3\u6570\u636e\u70b9\u90fd\u8fdb\u884c\u4e86\u8bad\u7ec3\uff0c\u90a3\u4e48\u5b83\u5bf9\u5b83\u7684\u9884\u6d4b\u8fc7\u4e8e\u81ea\u4fe1,\u5bfc\u81f4\u4e86\u8fc7\u62df\u5408\n\n# \u63a5\u4e0b\u6765\u9700\u8981\u77eb\u6b63\u8fd9\u4e2a\u5206\u7c7b\u5668\uff0c\u8ba9\u5b83\u5bf9\u81ea\u5df1\u7684\u9884\u6d4b\u4e0d\u90a3\u4e48\u81ea\u4fe1\n\n# \u4fee\u6b63\u524d\u7684\u8bef\u5dee\u8fbe\u5230\u4e861.3 \u4fee\u6b63\u540e\u7684\u6570\u636e\u8bef\u5dee\u964d\u5230\u4e86 0.534\n')),(0,r.kt)("h3",{id:"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668"},"\u4f7f\u7528\u6a21\u578b\u6821\u51c6\u5668"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Train random forest classifier, calibrate on validation data and evaluate\n# on test data\n# \u4f7f\u7528\u524d60%\u7684\u6570\u636e\u8bad\u7ec3\uff0c\u4e2d20%\u7684\u6570\u636e\u6821\u51c6\uff0c\u540e20%\u7684\u6570\u636e\u6d4b\u8bd5\nclf = RandomForestClassifier(n_estimators=25)\nclf.fit(X_train, y_train)\nclf_probs = clf.predict_proba(X_test)\n# \u83b7\u53d6\u539f\u672c\u7684\u6a21\u578b\n# method="sigmoid" \u4ee3\u8868\u4f7f\u7528sigmoid\u51fd\u6570\u6765\u8fdb\u884c\u6821\u51c6\n# cv="prefit" \u4ee3\u8868\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u6765\u8fdb\u884c\u6821\u51c6\nsig_clf = CalibratedClassifierCV(clf, method="sigmoid", cv="prefit")\n# \u5bf9\u4e2d\u95f4\u768420%\u9884\u6d4b\u540e\u8fdb\u884c\u6982\u7387\u8c03\u8bd5\uff08\u6a21\u578b\u4f18\u5316\uff09\nsig_clf.fit(X_valid, y_valid)\n# .predict_proba(X_test) \u8fdb\u884c\u9884\u6d4b(\u4f18\u5316\u540e\u7684\u6a21\u578b\u4f7f\u7528\u65b9\u6cd5\u4e0d\u53d8)\nsig_clf_probs = sig_clf.predict_proba(X_test)\n# \u7528log_loss\u6765\u8bc4\u4f30\u6a21\u578b\nsig_score = log_loss(y_test, sig_clf_probs)\n\nprint("%.3f" % sig_score)\n# \u4fee\u6b63\u524d\u7684\u8bef\u5dee\u8fbe\u5230\u4e861.3 \u4fee\u6b63\u540e\u7684\u6570\u636e\u8bef\u5dee\u964d\u5230\u4e86 0.534\n\n\n')),(0,r.kt)("h3",{id:"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406"},"\u6a21\u578b\u6821\u51c6\u5668\u5de5\u4f5c\u539f\u7406"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Plot changes in predicted probabilities via arrows\nplt.figure()\n# \u989c\u8272\u8868\u793a\u5b9e\u4f8b\u7684\u771f\u6b63\u7c7b(\u7ea2\u8272\uff1a1\u7c7b\uff0c\u7eff\u8272\uff1a2\u7c7b\uff0c\u84dd\u8272\uff1a3\u7c7b)\ncolors = [\"r\", \"g\", \"b\"]\nfor i in range(clf_probs.shape[0]):\n    plt.arrow(clf_probs[i, 0], clf_probs[i, 1],\n              sig_clf_probs[i, 0] - clf_probs[i, 0],\n              sig_clf_probs[i, 1] - clf_probs[i, 1],\n              color=colors[y_test[i]], head_width=1e-2)\n\n# Plot perfect predictions\nplt.plot([1.0], [0.0], 'ro', ms=20, label=\"Class 1\")\nplt.plot([0.0], [1.0], 'go', ms=20, label=\"Class 2\")\nplt.plot([0.0], [0.0], 'bo', ms=20, label=\"Class 3\")\n\n# Plot boundaries of unit simplex\nplt.plot([0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], 'k', label=\"Simplex\")\n\n# Annotate points on the simplex\nplt.annotate(r'($\\frac{1}{3}$, $\\frac{1}{3}$, $\\frac{1}{3}$)',\n             xy=(1.0/3, 1.0/3), xytext=(1.0/3, .23), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.plot([1.0/3], [1.0/3], 'ko', ms=5)\nplt.annotate(r'($\\frac{1}{2}$, $0$, $\\frac{1}{2}$)',\n             xy=(.5, .0), xytext=(.5, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $\\frac{1}{2}$, $\\frac{1}{2}$)',\n             xy=(.0, .5), xytext=(.1, .5), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($\\frac{1}{2}$, $\\frac{1}{2}$, $0$)',\n             xy=(.5, .5), xytext=(.6, .6), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $0$, $1$)',\n             xy=(0, 0), xytext=(.1, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($1$, $0$, $0$)',\n             xy=(1, 0), xytext=(1, .1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\nplt.annotate(r'($0$, $1$, $0$)',\n             xy=(0, 1), xytext=(.1, 1), xycoords='data',\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             horizontalalignment='center', verticalalignment='center')\n# Add grid\nplt.grid(False)\nfor x in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    plt.plot([0, x], [x, 0], 'k', alpha=0.2)\n    plt.plot([0, 0 + (1-x)/2], [x, x + (1-x)/2], 'k', alpha=0.2)\n    plt.plot([x, x + (1-x)/2], [0, 0 + (1-x)/2], 'k', alpha=0.2)\n\nplt.title(\"Change of predicted probabilities after sigmoid calibration\")\nplt.xlabel(\"Probability class 1\")\nplt.ylabel(\"Probability class 2\")\nplt.xlim(-0.05, 1.05)\nplt.ylim(-0.05, 1.05)\nplt.legend(loc=\"best\")\n\nprint(\"Log-loss of\")\nprint(\" * uncalibrated classifier trained on 800 datapoints: %.3f \"\n      % score)\nprint(\" * classifier trained on 600 datapoints and calibrated on \"\n      \"200 datapoint: %.3f\" % sig_score)\n\n# Illustrate calibrator\nplt.figure()\n# generate grid over 2-simplex\np1d = np.linspace(0, 1, 20)\np0, p1 = np.meshgrid(p1d, p1d)\np2 = 1 - p0 - p1\np = np.c_[p0.ravel(), p1.ravel(), p2.ravel()]\np = p[p[:, 2] >= 0]\n\ncalibrated_classifier = sig_clf.calibrated_classifiers_[0]\nprediction = np.vstack([calibrator.predict(this_p)\n                        for calibrator, this_p in\n                        zip(calibrated_classifier.calibrators, p.T)]).T\nprediction /= prediction.sum(axis=1)[:, None]\n\n# Plot modifications of calibrator\nfor i in range(prediction.shape[0]):\n    plt.arrow(p[i, 0], p[i, 1],\n              prediction[i, 0] - p[i, 0], prediction[i, 1] - p[i, 1],\n              head_width=1e-2, color=colors[np.argmax(p[i])])\n# Plot boundaries of unit simplex\nplt.plot([0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], 'k', label=\"Simplex\")\n\nplt.grid(False)\nfor x in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:\n    plt.plot([0, x], [x, 0], 'k', alpha=0.2)\n    plt.plot([0, 0 + (1-x)/2], [x, x + (1-x)/2], 'k', alpha=0.2)\n    plt.plot([x, x + (1-x)/2], [0, 0 + (1-x)/2], 'k', alpha=0.2)\n\n # sigmoid\u6821\u51c6\u5668\u56fe\u793a\nplt.title(\"sigmoid \")\nplt.xlabel(\"Probability class 1\")\nplt.ylabel(\"Probability class 2\")\n# .xlim\u662f\u8bbe\u7f6ex\u8f74\u7684\u8303\u56f4\nplt.xlim(-0.05, 1.05)\n# .ylim\u662f\u8bbe\u7f6ey\u8f74\u7684\u8303\u56f4\nplt.ylim(-0.05, 1.05)\n\nplt.show()\n")))}m.isMDXComponent=!0}}]);