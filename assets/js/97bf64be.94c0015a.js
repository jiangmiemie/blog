"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[4094],{3905:(t,n,e)=>{e.d(n,{Zo:()=>u,kt:()=>s});var a=e(7294);function l(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function r(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){l(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function p(t,n){if(null==t)return{};var e,a,l=function(t,n){if(null==t)return{};var e,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||(l[e]=t[e]);return l}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(l[e]=t[e])}return l}var d=a.createContext({}),m=function(t){var n=a.useContext(d),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},u=function(t){var n=m(t.components);return a.createElement(d.Provider,{value:n},t.children)},o="mdxType",k={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(t,n){var e=t.components,l=t.mdxType,r=t.originalType,d=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),o=m(e),c=l,s=o["".concat(d,".").concat(c)]||o[c]||k[c]||r;return e?a.createElement(s,i(i({ref:n},u),{},{components:e})):a.createElement(s,i({ref:n},u))}));function s(t,n){var e=arguments,l=n&&n.mdxType;if("string"==typeof t||l){var r=e.length,i=new Array(r);i[0]=c;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=t,p[o]="string"==typeof t?t:l,i[1]=p;for(var m=2;m<r;m++)i[m]=e[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}c.displayName="MDXCreateElement"},2061:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var a=e(7462),l=(e(7294),e(3905));const r={},i=void 0,p={unversionedId:"\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/6\u7ae0\u8282\u7ec3\u4e60",id:"\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/6\u7ae0\u8282\u7ec3\u4e60",title:"6\u7ae0\u8282\u7ec3\u4e60",description:"\u6570\u636e\u7684\u8868\u73b0\u5f62\u5f0f",source:"@site/course/\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/6\u7ae0\u8282\u7ec3\u4e60.md",sourceDirName:"\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406",slug:"/\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/6\u7ae0\u8282\u7ec3\u4e60",permalink:"/course/\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/6\u7ae0\u8282\u7ec3\u4e60",draft:!1,editUrl:"https://github.com/jiangmiemie/blog/blob/master/course/\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/6\u7ae0\u8282\u7ec3\u4e60.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenCV \u8bfb\u53d6\u3001\u7f29\u653e\u3001\u7ffb\u8f6c\u3001\u5199\u5165\u56fe\u50cf",permalink:"/course/\u7b2c4\u90e8\u5206\u6570\u636e\u5904\u7406/5\u56fe\u7247\u6570\u636e\u8bfb\u53d6\u4e0e\u5904\u7406"},next:{title:"1K\u5747\u503c\u7b97\u6cd5",permalink:"/course/\u7b2c6\u90e8\u5206\u7b97\u6cd5\u5165\u95e8/1K\u5747\u503c\u7b97\u6cd5"}},d={},m=[{value:"\u6570\u636e\u7684\u8868\u73b0\u5f62\u5f0f",id:"\u6570\u636e\u7684\u8868\u73b0\u5f62\u5f0f",level:2},{value:"bit\u548cbyte\u7684\u533a\u522b",id:"bit\u548cbyte\u7684\u533a\u522b",level:2},{value:"\u6587\u672c\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316",id:"\u6587\u672c\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316",level:2},{value:"\u56fe\u7247\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316",id:"\u56fe\u7247\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316",level:2},{value:"\u56fe\u7247\u7684\u683c\u5f0f",id:"\u56fe\u7247\u7684\u683c\u5f0f",level:2},{value:"\u7b97\u6cd5\u5165\u95e8\u2014\u2014\u538b\u7f29\u7b97\u6cd5",id:"\u7b97\u6cd5\u5165\u95e8\u538b\u7f29\u7b97\u6cd5",level:2},{value:"\u62d3\u5c55",id:"\u62d3\u5c55",level:2}],u={toc:m},o="wrapper";function k(t){let{components:n,...e}=t;return(0,l.kt)(o,(0,a.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u6570\u636e\u7684\u8868\u73b0\u5f62\u5f0f"},"\u6570\u636e\u7684\u8868\u73b0\u5f62\u5f0f"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4e8c\u8fdb\u5236"),(0,l.kt)("li",{parentName:"ul"},"\u516b\u8fdb\u5236"),(0,l.kt)("li",{parentName:"ul"},"\u5341\u516d\u8fdb\u5236")),(0,l.kt)("h2",{id:"bit\u548cbyte\u7684\u533a\u522b"},"bit\u548cbyte\u7684\u533a\u522b"),(0,l.kt)("p",null,"bit\uff08\u4f4d\uff09\u6bd4\u7279\u662f\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u57fa\u7840\uff0c\u5c5e\u4e8e\u4e8c\u8fdb\u5236\u7684\u8303\u7574"),(0,l.kt)("p",null,"byte\u5b57\u8282\u662f\u5185\u5b58\u7684\u57fa\u672c\u5355\u4f4d"),(0,l.kt)("p",null,"8 bit = 1 byte"),(0,l.kt)("h2",{id:"\u6587\u672c\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316"},"\u6587\u672c\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7801\u8868"),(0,l.kt)("li",{parentName:"ul"},"\u4e71\u7801\u7684\u8868\u793a"),(0,l.kt)("li",{parentName:"ul"},"\u62d3\u5c55\uff1a\u56fe\u7075\u673a\u7684\u5386\u53f2\u80cc\u666f"),(0,l.kt)("li",{parentName:"ul"},"\u62d3\u5c55\uff1a\u7801\u8868\u7684\u5386\u53f2\u80cc\u666f")),(0,l.kt)("h2",{id:"\u56fe\u7247\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316"},"\u56fe\u7247\u4e0e\u4e8c\u8fdb\u5236\u7684\u8f6c\u5316"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u9ed1\u767d\u56fe"),(0,l.kt)("li",{parentName:"ul"},"\u7070\u5ea6\u56fe"),(0,l.kt)("li",{parentName:"ul"},"\u5f69\u8272\u56fe"),(0,l.kt)("li",{parentName:"ul"},"\u56db\u901a\u9053\u5f69\u8272\u56fe"),(0,l.kt)("li",{parentName:"ul"},"\u62d3\u5c55\uff1a\u7ed3\u5408\u65f6\u4ee3\u80cc\u666f\u4e0e\u7535\u5b50\u5143\u5668\u4ef6\uff0c\u8bb2\u8ff0\u6570\u5b57\u91cf\u3001\u6a21\u62df\u91cf\u3001\u6a21\u6570\u8f6c\u5316\u3001\u7535\u538b\u3001\u7535\u5b50\u5143\u5668\u4ef6\u5177\u4f53\u5de5\u4f5c\u539f\u7406\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u62d3\u5c55\uff1a24\u4f4d\u771f\u5f69\u56fe\u768424\u4f4d\u662f\u600e\u4e48\u6765\u7684\uff1f\n\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6709\u4e09\u4e2a\u901a\u9053\uff0c\u6bcf\u4e2a\u901a\u9053\u67098\u4f4d\u30023*8=24")),(0,l.kt)("h2",{id:"\u56fe\u7247\u7684\u683c\u5f0f"},"\u56fe\u7247\u7684\u683c\u5f0f"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u672c\u5730\u56fe\u7247\u683c\u5f0f\uff1abmp ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u7f51\u7edc\u56fe\u7247\u683c\u5f0f\uff1abase64")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6587\u4ef6\u5934\u7684\u5206\u6790")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6587\u4ef6\u5927\u5c0f=\u6587\u4ef6\u5934\uff08\u56fa\u5b9a\uff09+\u6570\u636e")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u62d3\u5c55\uff1a\u56fe\u7247\u5927\u5c0f\u8ba1\u7b97\u65b9\u5f0f\u3002\n\u4e00\u5f208x8\u7684\u56fe\u7247\uff0c\u5934\u6587\u4ef6\u662f54\u5b57\u8282\uff0c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6709\u4e09\u4e2a\u901a\u9053\uff0c\u6bcf\u4e2a\u901a\u9053\u67098\u4f4d\uff0c\u90a3\u4e48\u8fd9\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u662f\u591a\u5c11\u5b57\u8282\uff1f(8\u4f4d=1\u5b57\u8282)\n\u6587\u4ef6\u5927\u5c0f = \u6587\u4ef6\u5934\uff08\u56fa\u5b9a\uff09 + \u6570\u636e\n= 54 + (3x8\xf78)x8x8\n= 246\u5b57\u8282"))),(0,l.kt)("h2",{id:"\u7b97\u6cd5\u5165\u95e8\u538b\u7f29\u7b97\u6cd5"},"\u7b97\u6cd5\u5165\u95e8\u2014\u2014\u538b\u7f29\u7b97\u6cd5"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6709\u635f\u538b\u7f29\u548c\u65e0\u635f\u538b\u7f29")),(0,l.kt)("p",null,"\u65e0\u635f\u538b\u7f29\uff1a\u5c06\u91cd\u590d\u51fa\u73b0\u7684\u957f\u7f16\u7801\u8f6c\u5316\u4e3a\u77ed\u7f16\u7801"),(0,l.kt)("p",null,"\u6709\u635f\u538b\u7f29\uff1a\u5c06\u76f8\u4f3c/\u76f8\u90bb\u7684\u7f16\u7801\u5408\u5e76"),(0,l.kt)("h2",{id:"\u62d3\u5c55"},"\u62d3\u5c55"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Python\u4e2d\u5217\u8868\u548cnp.array\u7684\u533a\u522b\n\u6570\u636e\u5927\u5c0f\u3001\u7c7b\u578b\u3001\u5b58\u50a8\u65b9\u5f0f\u3001\u8ba1\u7b97\u65b9\u5f0f")),(0,l.kt)("p",null,"\u4ee5\u4e00\u5f202*2\u768424\u4f4d\u56fe\u7684bmp\u683c\u5f0f\u56fe\u7247\u4e3a\u4f8b"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Offset"),(0,l.kt)("th",{parentName:"tr",align:null},"Offset10"),(0,l.kt)("th",{parentName:"tr",align:null},"Size"),(0,l.kt)("th",{parentName:"tr",align:null},"Hex value"),(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BMP Header"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0h"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"42 4D"),(0,l.kt)("td",{parentName:"tr",align:null},'"BM"'),(0,l.kt)("td",{parentName:"tr",align:null},"ID field ","(","42h, 4Dh",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2h"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"46\xa000\xa000\xa000"),(0,l.kt)("td",{parentName:"tr",align:null},"70 bytes ","(","54","+","16",")"),(0,l.kt)("td",{parentName:"tr",align:null},"BMP \u6587\u4ef6\u7684\u5927\u5c0f\uff0854 \u5b57\u8282\u6807\u5934 ","+"," 16 \u5b57\u8282\u6570\u636e\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6h"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"Unused"),(0,l.kt)("td",{parentName:"tr",align:null},"\u7279\u5b9a\u5e94\u7528")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"8h"),(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"Unused"),(0,l.kt)("td",{parentName:"tr",align:null},"\u7279\u5b9a\u5e94\u7528")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ah"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"36 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"54 bytes ","(","14","+","40",")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u53ef\u4ee5\u627e\u5230\u50cf\u7d20\u9635\u5217\uff08\u4f4d\u56fe\u6570\u636e\uff09\u7684\u504f\u79fb\u91cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DIB Header","-","Device Independent Bitmaps","-","\u8bbe\u5907\u65e0\u5173\u4f4d\u56fe"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"14"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"28 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"40 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"DIB \u5934\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4ece\u6b64\u65f6\u5f00\u59cb\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"12h"),(0,l.kt)("td",{parentName:"tr",align:null},"18"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"02 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2 pixels ","(","left to right order",")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u4f4d\u56fe\u7684\u5bbd\u5ea6\uff08\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"16h"),(0,l.kt)("td",{parentName:"tr",align:null},"22"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"02 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2 pixels ","(","bottom to top order",")"),(0,l.kt)("td",{parentName:"tr",align:null},"\u4f4d\u56fe\u7684\u9ad8\u5ea6\uff08\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09\u3002\u4ece\u4e0b\u5230\u4e0a\u7684\u50cf\u7d20\u987a\u5e8f\u4e3a\u6b63\u3002")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1Ah"),(0,l.kt)("td",{parentName:"tr",align:null},"26"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"01 00"),(0,l.kt)("td",{parentName:"tr",align:null},"1 plane"),(0,l.kt)("td",{parentName:"tr",align:null},"\u4f7f\u7528\u7684\u989c\u8272\u5e73\u9762\u6570\u91cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1Ch"),(0,l.kt)("td",{parentName:"tr",align:null},"28"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"18 00"),(0,l.kt)("td",{parentName:"tr",align:null},"24 bits"),(0,l.kt)("td",{parentName:"tr",align:null},"\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4d\u6570")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"30"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"BI","_","RGB\uff0c\u672a\u4f7f\u7528\u50cf\u7d20\u9635\u5217\u538b\u7f29")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"22h"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"10 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"16 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"\u539f\u59cb\u4f4d\u56fe\u6570\u636e\u7684\u5927\u5c0f\uff08\u5305\u62ec\u586b\u5145\uff09")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"26h"),(0,l.kt)("td",{parentName:"tr",align:null},"38"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"13 0B 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2835 pixels/metre horizontal"),(0,l.kt)("td",{parentName:"tr",align:null},"\u56fe\u50cf\u7684\u6253\u5370\u5206\u8fa8\u7387\uff0c")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2Ah"),(0,l.kt)("td",{parentName:"tr",align:null},"42"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"13 0B 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"2835 pixels/metre vertical"),(0,l.kt)("td",{parentName:"tr",align:null},"72 DPI\xa0\xd7 39",".","3701 inches per metre yields 2834",".","6472")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"46"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 colors"),(0,l.kt)("td",{parentName:"tr",align:null},"\u8c03\u8272\u677f\u4e2d\u7684\u989c\u8272\u6570\u91cf")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"32h"),(0,l.kt)("td",{parentName:"tr",align:null},"50"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 important colors"),(0,l.kt)("td",{parentName:"tr",align:null},"0 \u8868\u793a\u6240\u6709\u989c\u8272\u90fd\u5f88\u91cd\u8981")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Start of pixel array ","(","bitmap data",")"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"36h"),(0,l.kt)("td",{parentName:"tr",align:null},"54"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00 FF"),(0,l.kt)("td",{parentName:"tr",align:null},"0 0 255"),(0,l.kt)("td",{parentName:"tr",align:null},"Red, Pixel ","(","x=0, y=1",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"39h"),(0,l.kt)("td",{parentName:"tr",align:null},"57"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"FF FF FF"),(0,l.kt)("td",{parentName:"tr",align:null},"255 255 255"),(0,l.kt)("td",{parentName:"tr",align:null},"White, Pixel ","(","x=1, y=1",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3Ch"),(0,l.kt)("td",{parentName:"tr",align:null},"60"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Padding for 4 byte alignment ","(","could be a value other than zero",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3Eh"),(0,l.kt)("td",{parentName:"tr",align:null},"62"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"FF 00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"255 0 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Blue, Pixel ","(","x=0, y=0",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"41h"),(0,l.kt)("td",{parentName:"tr",align:null},"65"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"00 FF 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 255 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Green, Pixel ","(","x=1, y=0",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"44h"),(0,l.kt)("td",{parentName:"tr",align:null},"68"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"00 00"),(0,l.kt)("td",{parentName:"tr",align:null},"0 0"),(0,l.kt)("td",{parentName:"tr",align:null},"Padding for 4 byte alignment ","(","could be a value other than zero",")")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class Readbmp:\n    """\n    read bmp files\n    \u56fe\u7247\u7684\u683c\u5f0f\u8bf4\u660e\uff1ahttps://en.wikipedia.org/wiki/BMP_file_format#Example_1\n    """\n\n    def __init__(self, pic_path) -> None:\n        self.pic_path = pic_path\n        self.read_color()\n\n    def read_color(self):\n        if self.pic_path.endswith(".bmp"):\n            self.read_bmp()\n        else:\n            print("\u4e0d\u652f\u6301\u7684\u683c\u5f0f")\n\n    def read_bmp(self):\n        bin_datas = []\n        """read file data to bin"""\n        with open(self.pic_path, "rb") as f:\n            while True:\n                if len(bin_datas) == f.tell():\n                    data = f.read(1)\n                    bindata = bin(int.from_bytes(data))[2:]\n                    if len(bindata) < 8:\n                        bindata = (8 - len(bindata)) * "0" + bindata\n                    bin_datas.append(bindata)\n                else:\n                    bin_datas = bin_datas[:-1]\n                    break\n\n        self.bin_pic_head = bin_datas[0:2]  # ID field\n        self.bin_pic_size = bin_datas[2:6]  # Size of the BMP file \u6587\u4ef6\u5927\u5c0f\n        self.bin_pic_exe = bin_datas[6:10]  # \u7279\u5b9a\u5e94\u7528\uff0c\u9ed8\u8ba4\u4e3a0\n        self.bin_pic_address = bin_datas[10:14]  # \u56fe\u7247\u4fe1\u606f\u5f00\u59cb\u5730\u5740\n        self.bin_pic_dib = bin_datas[14:18]  # DIB \u5934\u4e2d\u7684\u5b57\u8282\u6570\n        self.bin_pic_w = bin_datas[18:22]  # \u56fe\u7247\u50cf\u7d20\u5bbd\u5ea6\n        self.bin_pic_h = bin_datas[22:26]  # \u56fe\u7247\u50cf\u7d20\u9ad8\u5ea6\n        self.bin_pic_color_num = bin_datas[26:28]  # \u4f7f\u7528\u989c\u8272\u5e73\u9762\u6570\n        self.bin_pic_color_long = bin_datas[28:30]  # \u6bcf\u4e2a\u50cf\u7d20\u4f4d\u6570\n        self.bin_pic_bi = bin_datas[30:34]  # BI_RGB\n        self.bin_pic_big = bin_datas[34:38]  # \u539f\u59cb\u56fe\u50cf\u6570\u636e\u5927\u5c0f\n        self.bin_pic_printpix = bin_datas[38:42]  # \u6253\u5370\u5206\u8fa8\u7387\n        self.bin_pic_dpi = bin_datas[42:46]  # DPI\n        self.bin_pic_color_num = bin_datas[46:50]  # \u8c03\u8272\u677f\u4e2d\u989c\u8272\u6570\u91cf\n        self.bin_pic_color_important = bin_datas[50:54]  # \u91cd\u8981\u989c\u8272\u6570\u91cf\n        self.bin_pic_data = bin_datas[54:]  # \u56fe\u7247\u6570\u636e\n        self.bin_to_pic()\n\n    # \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u5316\u6210\u5341\u8fdb\u5236\u6570\u636e\n    def bin_to_dec(self, bin_datas):\n        bin_data = ""\n        for i in reversed(bin_datas):\n            bin_data += i\n        return int(bin_data, 2)\n\n    # \u5c06\u5217\u8868\u8f6c\u4e3a3\u4e2a\u4e00\u7ec4\u7684\u4e8c\u7ef4\u5217\u8868\n    def change_data(self, data):\n        data_2d = []\n        x = []\n        for i in data:\n            x.append(int(i, 2))\n            if len(x) == 3:\n                data_2d.append(tuple(x))\n                x = []\n        return data_2d\n\n    # \u5904\u7406\u56fe\u7247\u6570\u636e\n    def bin_to_pic(self):\n        self.pic_head = chr(int(self.bin_pic_head[0], 2)) + chr(\n            int(self.bin_pic_head[1], 2)\n        )\n        self.pic_size = self.bin_to_dec(self.bin_pic_size)\n        self.pic_exe = self.bin_to_dec(self.bin_pic_exe)\n        self.pic_address = self.bin_to_dec(self.bin_pic_address)\n        self.pic_dib = self.bin_to_dec(self.bin_pic_dib)\n        self.pic_w = self.bin_to_dec(self.bin_pic_w)\n        self.pic_h = self.bin_to_dec(self.bin_pic_h)\n        self.pic_color_num = self.bin_to_dec(self.bin_pic_color_num)\n        self.pic_color_long = self.bin_to_dec(self.bin_pic_color_long)\n        self.pic_bi = self.bin_to_dec(self.bin_pic_bi)\n        self.pic_big = self.bin_to_dec(self.bin_pic_big)\n        self.pic_printpix = self.bin_to_dec(self.bin_pic_printpix)\n        self.pic_dpi = self.bin_to_dec(self.bin_pic_dpi)\n        self.pic_color_num = self.bin_to_dec(self.bin_pic_color_num)\n        self.pic_color_important = self.bin_to_dec(self.bin_pic_color_important)\n        self.pic_data = self.change_data(self.bin_pic_data)\n\n    # \u6253\u5370\u56fe\u7247\u4fe1\u606f\n    def show(self):\n        print(\n            """\n\u6587\u4ef6ID  {} \n\u56fe\u50cf\u5927\u5c0f(Byte)  {}   \n\u7279\u5b9a\u5e94\u7528  {}   \n\u56fe\u7247\u4fe1\u606f\u5f00\u59cb\u5730\u5740  {}   \nDIB \u5934\u4e2d\u7684\u5b57\u8282\u6570 {}   \n\u56fe\u7247\u50cf\u7d20\u5bbd\u5ea6  {}   \n\u56fe\u7247\u50cf\u7d20\u9ad8\u5ea6  {}   \n\u4f7f\u7528\u989c\u8272\u5e73\u9762\u6570  {}   \n\u6bcf\u4e2a\u50cf\u7d20\u4f4d\u6570  {}   \nBI_RGB  {}   \n\u539f\u59cb\u56fe\u50cf\u6570\u636e\u5927\u5c0f(Byte) {} \n\u6253\u5370\u5206\u8fa8\u7387  {}   \nDPI  {}   \n\u8c03\u8272\u677f\u4e2d\u989c\u8272\u6570\u91cf  {}   \n\u91cd\u8981\u989c\u8272\u6570\u91cf  {}   \n\u56fe\u7247\u6570\u636e  {} .... {} \n""".format(\n                self.pic_head,\n                self.pic_size,\n                self.pic_exe,\n                self.pic_address,\n                self.pic_dib,\n                self.pic_w,\n                self.pic_h,\n                self.pic_color_num,\n                self.pic_color_long,\n                self.pic_bi,\n                self.pic_big,\n                self.pic_printpix,\n                self.pic_dpi,\n                self.pic_color_num,\n                self.pic_color_important,\n                self.pic_data[:5],\n                self.pic_data[-5:],\n            )\n        )\n\n    # \u5224\u65ad\u989c\u8272\n    def color(self, color):\n        b, g, r = color[0], color[1], color[2]\n        if r == 0 and g == 0 and b == 0:\n            return "\u9ed1\u8272"\n        elif r == 0 and g == 0 and b == 255:\n            return "\u84dd\u8272"\n        elif r == 0 and g == 255 and b == 0:\n            return "\u7eff\u8272"\n        elif r == 255 and g == 0 and b == 0:\n            return "\u7ea2\u8272"\n        elif r == 255 and g == 255 and b == 255:\n            return "\u767d\u8272"\n        else:\n            return "\u5176\u4ed6\u989c\u8272"\n\n    # \u7edf\u8ba1\u989c\u8272\n    def count_color(self):\n        color_dict = {}\n        for i in self.pic_data:\n            if i in color_dict:\n                color_dict[i] += 1\n            else:\n                color_dict[i] = 1\n        return color_dict\n\n    # \u5224\u65ad\u989c\u8272\u7684\u6bd4\u4f8b\n    def color_percent(self):\n        color_dict = self.count_color()\n        color_percent_dict = {}\n        for i in color_dict:\n            color_percent_dict[self.color(i)] = int(\n                color_dict[i] / len(self.pic_data) * 100\n            )\n        for i in color_percent_dict:\n            print("{} \u5360\u6bd4\u767e\u5206\u4e4b {}".format(i, color_percent_dict[i]))\n\n\n\n\n\np = Readbmp("r.bmp")  # \u53e6\u5b58\u4e3a\u65b0\u6587\u4ef6\np.color_percent()\n# \u7ea2\u8272 \u5360\u6bd4\u767e\u5206\u4e4b 100\n"""\nr.bmp\u662f8*8\u7684\u4f4d\u56fe\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u70b9\u662f\u7ea2\u8272\uff0c\u5176\u4ed6\u90fd\u662f\u9ed1\u8272\n"""\n# \u6253\u5f00\u6587\u4ef6\u4f5c\u4e3a\u53ef\u7f16\u8f91\u5bf9\u8c61\nwith open("r.bmp", "rb") as f:\n    d = f.read()\n    data = bytearray(d)\n# \u8bd5\u7740\u628a54\u5230246\u7684\u6570\u636e\u90fd\u6539\u62100x00\uff0c\u5373\u9ed1\u8272\u3002\u8fd9\u6837\u6574\u5f20\u56fe\u7247\u90fd\u53d8\u6210\u9ed1\u8272\u4e86\uff08\u4e5f\u53ef\u4ee5\u53ea\u66f4\u6539\u67d0\u4e2a\u6570\u636e\u7aef\uff09\nfor i in range(54, 246):\n    data[i]= 0x00\n# \u4fdd\u5b58\u6587\u4ef6\nwith open("rn.bmp", "wb") as f:\n    f.write(data)\n\np = Readbmp("rn.bmp")\np.show()\np.color_percent()\n# \u9ed1\u8272 \u5360\u6bd4\u767e\u5206\u4e4b 100\n')))}k.isMDXComponent=!0}}]);