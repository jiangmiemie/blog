"use strict";(self.webpackChunkjiangmiemie=self.webpackChunkjiangmiemie||[]).push([[6833],{16147:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var s=t(77191),r=t(74848),a=t(28453);const o={title:"\u673a\u5668\u5b66\u4e60\u4e0eLLM\u8206\u60c5\u5206\u6790",date:"2024-8-30",authors:"jiangmiemie",tags:["python"],keywords:["python"],description:"\u673a\u5668\u5b66\u4e60\u4e0eLLM\u8206\u60c5\u5206\u6790"},i=void 0,l={authorsImageUrls:[void 0]},d=[{value:"\u4f7f\u7528\u6d41\u7a0b",id:"\u4f7f\u7528\u6d41\u7a0b",level:2},{value:"\u4f9d\u8d56\u5b89\u88c5",id:"\u4f9d\u8d56\u5b89\u88c5",level:3},{value:"\u4e3b\u8981\u529f\u80fd",id:"\u4e3b\u8981\u529f\u80fd",level:3},{value:"\u6570\u636e\u5b58\u50a8",id:"\u6570\u636e\u5b58\u50a8",level:3},{value:"\u6570\u636e\u53ef\u89c6\u5316",id:"\u6570\u636e\u53ef\u89c6\u5316",level:3}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"\u8be5\u9879\u76ee\u9002\u5408\u4f5c\u4e3a\u5c0f\u578b\u7684\u9879\u76ee\u539f\u578b\uff0c\u9002\u5408\u6559\u5b66\u548c\u7ec3\u624b\u3002\u6700\u521d\u8fd9\u4e2a\u9879\u76ee\u7684\u7075\u611f\u6e90\u4e8e\u6211\u7684\u4e2a\u4eba\u9700\u6c42\uff0c\u6211\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u6765\u67e5\u770b\u4e3b\u6d41\u8bdd\u9898\uff0c\u540c\u65f6\u53c8\u4e0d\u60f3\u4e0b\u8f7d\u4e00\u5806 APP \u6765\u63a5\u6536\u63a8\u9001\u3002\u9879\u76ee\u6700\u7ec8\u7684\u6570\u636e\u4f7f\u7528github pages\u6765\u5c55\u793a\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u53ef\u4ee5\u7ed3\u5408\u6211\u7684\u53e6\u4e00\u4e2a\u9879\u76ee",(0,r.jsx)(e.code,{children:"pocwatchdog"}),"\u5b9e\u73b0\u5b9a\u65f6\u6267\u884c\u52a0\u53d1\u9001\u90ae\u4ef6\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["\u9879\u76ee\u5f00\u6e90\u5730\u5740\uff1a",(0,r.jsx)(e.a,{href:"https://github.com/jiangyangcreate/SocialMood",children:"https://github.com/jiangyangcreate/SocialMood"})]}),"\n",(0,r.jsxs)(e.p,{children:["\u9879\u76ee\u67e5\u770b\u5730\u5740\uff1a",(0,r.jsx)(e.a,{href:"https://jiangyangcreate.github.io/SocialMood/",children:"https://jiangyangcreate.github.io/SocialMood/"})]}),"\n",(0,r.jsx)(e.h2,{id:"\u4f7f\u7528\u6d41\u7a0b",children:"\u4f7f\u7528\u6d41\u7a0b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# \u5b89\u88c5\u4f9d\u8d56\ncd python\npython setup.py\n\n# \u8fd0\u884c\u6570\u636e\u6293\u53d6\uff0c\u751f\u6210\u9759\u6001\u7f51\u9875\npython crawler.py\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u4f9d\u8d56\u5b89\u88c5",children:"\u4f9d\u8d56\u5b89\u88c5"}),"\n",(0,r.jsxs)(e.p,{children:["\u6240\u9700\u4f9d\u8d56\u53ef\u4ee5\u901a\u8fc7 ",(0,r.jsx)(e.code,{children:"setup.py"})," \u4e0b\u8f7d\u5b89\u88c5\u3002\u56e0\u4e3a\u6709\u4e9b\u6a21\u5757\u4e0d\u662fpip\u5c31\u7b97\u5b89\u88c5\u597d\u7684\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:'title="setup.py"',children:'import subprocess\nimport sys\nimport nltk\n\ndef install_requirements():\n    print("\u6b63\u5728\u5b89\u88c5\u4f9d\u8d56...")\n    subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])\n\ndef install_browser():\n    print("\u6b63\u5728\u5b89\u88c5\u6d4f\u89c8\u5668...")\n    subprocess.check_call([sys.executable, "-m", "playwright", "install"])\n\ndef download_nltk_data():\n    print("\u6b63\u5728\u4e0b\u8f7dNLTK\u8bcd\u5178\u6587\u4ef6...")\n    nltk.download(\'vader_lexicon\')\n\ndef download_qwen2_model():\n    try:\n        print("\u6b63\u5728\u4e0b\u8f7dQwen2\u5927\u6a21\u578b\uff087B\uff09...")\n        from transformers import AutoModelForCausalLM, AutoTokenizer\n\n        model_name = "Qwen/Qwen2.5-7B-Instruct"\n\n        model = AutoModelForCausalLM.from_pretrained(\n            model_name,\n            torch_dtype="auto",\n            device_map="auto"\n        )\n        tokenizer = AutoTokenizer.from_pretrained(model_name)\n\n        prompt = "\u8bf7\u56de\u590d\uff1a\u4f60\u597d\uff0c\u6211\u662fQwen2\u5927\u6a21\u578b\uff0c\u6709\u4ec0\u4e48\u53ef\u4ee5\u5e2e\u60a8\u7684\u5417\uff1f"\n        messages = [\n            {"role": "system", "content": "You are Qwen, created by Alibaba Cloud. You are a helpful assistant."},\n            {"role": "user", "content": prompt}\n        ]\n        text = tokenizer.apply_chat_template(\n            messages,\n            tokenize=False,\n            add_generation_prompt=True\n        )\n        model_inputs = tokenizer([text], return_tensors="pt").to(model.device)\n\n        generated_ids = model.generate(\n            **model_inputs,\n            max_new_tokens=512\n        )\n        generated_ids = [\n            output_ids[len(input_ids):] for input_ids, output_ids in zip(model_inputs.input_ids, generated_ids)\n        ]\n\n        response = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]\n\n        print(\'Qwen2\u5927\u6a21\u578b\uff087B\uff09\u54cd\u5e94:\', response)\n    except Exception as e:\n        print(f"\u8df3\u8fc7\u4e0b\u8f7dQwen2\u5927\u6a21\u578b\uff087B\uff09\uff0c\u51fa\u73b0\u9519\u8bef\uff1a{e}")\n\ndef main():\n    try:\n        install_requirements()\n        install_browser()\n        download_nltk_data()\n        download_qwen2_model()\n        print("\u6240\u6709\u5b89\u88c5\u6b65\u9aa4\u5df2\u5b8c\u6210\uff01")\n    except subprocess.CalledProcessError as e:\n        print(f"\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef\uff1a{e}")\n        sys.exit(1)\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\u4e3b\u8981\u529f\u80fd",children:"\u4e3b\u8981\u529f\u80fd"}),"\n",(0,r.jsx)(e.p,{children:"\u8be5\u7cfb\u7edf\u7684\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\u6293\u53d6\u70ed\u641c\u6570\u636e"}),"\uff1a\u4ece\u5fae\u535a\u3001\u6296\u97f3\u3001B\u7ad9\u7b49\u5e73\u53f0\u6293\u53d6\u70ed\u641c\u6570\u636e\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u901a\u8fc7API\u83b7\u53d6\uff0c\u722c\u53d6\u6ce8\u610f\u4e0d\u8981\u53d8\u6210DDOS\u653b\u51fb\u3002"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\u6570\u636e\u5904\u7406"}),"\uff1a\u4f7f\u7528 Pandas \u8fdb\u884c\u6570\u636e\u6e05\u6d17\u4e0e\u5904\u7406\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528pandas\u4e3b\u8981\u662f\u5904\u7406\u4e00\u4e9b\u6587\u672c\u578b\u7684\u6570\u636e\uff0c\u8b6c\u598210\u4e07\u8981\u6362\u7b97\u4e3a100000\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528jieba\u5206\u8bcd\u7528\u4e8e\u540e\u7eed\u8bcd\u4e91\u56fe\u751f\u6210\uff0c\u9700\u8981\u5254\u9664\u4e00\u4e9b\u5355\u5b57\u4e0e\u6807\u70b9\u7b26\u53f7\u3002\u5f53\u7136\uff0c\u6700\u8fd1b\u7ad9\u5f88\u559c\u6b22\u5728\u6807\u9898\u4e2d\u52a0\u7a7a\u683c\uff0c\u6240\u4ee5\u8981\u5148\u53bb\u7a7a\u683c\u518d\u5206\u8bcd\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u6709\u4e9b\u6570\u636e\u7684\u70ed\u5ea6\u503c\u8fd8\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e42\u5f8b\u5206\u5e03\u7684\u7ebf\u6027\u56de\u5f52\u586b\u8865\u70ed\u5ea6\u7f3a\u5931\u503c\u3002\u8fd9\u91cc\u4f7f\u7528\u6307\u6570\u56de\u5f52\u3001\u666e\u901a\u7ebf\u6027\u56de\u5f52\u6548\u679c\u90fd\u4e0d\u597d\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u5e42\u5f8b\u5206\u5e03\u5e38\u89c1\u7684\u6837\u5b50\uff1a\u4e2a\u4ebaUP\u4e3b\u7c89\u4e1d\u6392\u540d\u524d\u51e0\u540d\u7c89\u4e1d\u5dee\u8ddd\u6709\u767e\u4e07\uff0c\u50cf\u6307\u6570\u5206\u5e03\u3002\u4f46\u662f\u540e\u7eed\u6392\u540d\u7684up\u7c89\u4e1d\u5dee\u8ddd\u5c31\u5f88\u5c0f\uff0c\u63a5\u8fd1\u7ebf\u6027\u5206\u5e03\u3002\u5982\u679c\u6211\u968f\u673a\u6263\u6389\u4e00\u4e2a\u6392\u540d\u7684up\u4e3b\u7684\u7c89\u4e1d\u6570\uff0c\u8ba9\u4f60\u9884\u6d4b\uff0c\u4f60\u53ef\u4ee5\u9884\u6d4b\u591a\u51c6\u3002\u6211\u9762\u5bf9\u7684\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u4e0b\u9762\u662f\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff1a"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def estimate_missing_heat(self):\n    """\u4f30\u7b97\u7f3a\u5931\u7684\u70ed\u5ea6\u503c"""\n    features = ["\u6392\u540d"]\n    target = "\u5904\u7406\u540e\u70ed\u5ea6"\n\n    def impute_group(group):\n        X = group[features]\n        y = group[target]\n\n        # \u5982\u679c\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u59cb\u7ec4\n        if not y.isnull().any():\n            return group\n\n        # \u5e42\u5f8b\u5206\u5e03\u62df\u5408\uff08\u901a\u8fc7\u5bf9\u6570\u53d8\u6362\u5b9e\u73b0\uff09\n        X_train = X[y.notnull()]\n        y_train = y[y.notnull()]\n\n        # \u5c06 X_train \u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u7c7b\u578b\n        X_train = X_train.astype(float)\n\n        # \u5bf9X\u548cy\u8fdb\u884c\u5bf9\u6570\u53d8\u6362\uff0c\u5904\u7406\u53ef\u80fd\u7684\u96f6\u503c\n        log_X_train = np.log(X_train + 1)\n        log_y_train = np.log(y_train + 1)\n\n        lr = LinearRegression()\n        lr.fit(log_X_train, log_y_train)\n\n        # \u83b7\u53d6\u62df\u5408\u7684\u7cfb\u6570\n        slope = lr.coef_[0]\n        intercept = lr.intercept_\n        # print(f"\u62df\u5408\u7684\u5e42\u5f8b\u65b9\u7a0b\u4e3a: y = {np.exp(intercept):.2f} * x^{slope:.2f}")\n\n        # \u9884\u6d4b\u7f3a\u5931\u503c\n        X_missing = X[y.isnull()]\n        if not X_missing.empty:\n            # \u5c06 X_missing \u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\n            X_missing = X_missing.astype(float)\n            log_X_missing = np.log(X_missing + 1)\n            log_predictions = lr.predict(log_X_missing)\n            predictions = np.exp(log_predictions) - 1  # \u53cd\u5411\u53d8\u6362\n\n            # \u786e\u4fdd\u9884\u6d4b\u503c\u4e0d\u5c0f\u4e8e0\n            predictions = np.maximum(predictions, 0)\n\n            # \u786e\u4fdd\u9884\u6d4b\u503c\u7b26\u5408\u6392\u540d\u987a\u5e8f\n            for i, pred in enumerate(predictions):\n                rank = X_missing.iloc[i]["\u6392\u540d"]\n                higher_ranks = y[(X["\u6392\u540d"] < rank) & y.notnull()]\n                lower_ranks = y[(X["\u6392\u540d"] > rank) & y.notnull()]\n\n                if len(higher_ranks) > 0:\n                    pred = min(pred, higher_ranks.min())\n                if len(lower_ranks) > 0:\n                    pred = max(pred, lower_ranks.max())\n\n                predictions[i] = pred\n\n            group.loc[y.isnull(), target] = predictions\n\n        return group\n\n    # \u5bf9\u6bcf\u4e2a\u4fe1\u606f\u6765\u6e90\u5206\u522b\u8fdb\u884c\u7f3a\u5931\u503c\u586b\u5145\n    self.df = self.df.groupby("\u4fe1\u606f\u6765\u6e90").apply(impute_group)\n\n    # \u5220\u9664\u4ecd\u7136\u4e3aNone\u7684\u884c\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\n    self.df = self.df.dropna(subset=["\u5904\u7406\u540e\u70ed\u5ea6"])\n    self.df["\u5904\u7406\u540e\u70ed\u5ea6"] = self.df["\u5904\u7406\u540e\u70ed\u5ea6"].astype(int)\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\u60c5\u7eea\u5206\u6790"}),"\uff1a\u76d1\u6d4b\u548c\u5206\u6790\u516c\u4f17\u60c5\u7eea\u3002\u7b97\u51fa\u5355\u6761\u6807\u9898\u7684\u60c5\u7eea\u6570\u503c\u4e4b\u540e\uff0c\u6807\u51c6\u5316\u5230 ",(0,r.jsx)(e.code,{children:"(-1,1)"})," \u8fd9\u4e2a\u533a\u95f4\u4e4b\u4e2d\u3002\u6700\u540e\u901a\u8fc7\u70ed\u5ea6\u4e0e\u6392\u540d\u8ba1\u7b97\u51fa\u5bf9\u793e\u4f1a\u7684\u60c5\u611f\u5f71\u54cd\u529b\u3002\u6b63\u6570\u6570\u5219\u662f\u79ef\u6781\u5f71\u54cd\uff0c\u8d1f\u6570\u5219\u662f\u8d1f\u9762\u5f71\u54cd\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5982\u679c\u4f60\u7684\u7535\u8111\u6027\u80fd\u8fd8\u4e0d\u9519\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,r.jsx)(e.strong,{children:"Qwen2.5"})," \u672c\u5730\u6a21\u578b\u4f5c\u4e3a\u60c5\u7eea\u5206\u6790\u7684\u6838\u5fc3\uff0c\u6839\u636e\u81ea\u5df1\u7684\u8bbe\u5907\u9009\u62e9\u6a21\u578b\u5927\u5c0f\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'class Qwen2Model:\n    _model = None\n    _tokenizer = None\n    _device = None\n    model_name = "Qwen/Qwen2.5-7B-Instruct"\n    @classmethod\n    def _initialize(cls):\n        if cls._model is None or cls._tokenizer is None:\n            print("\u521d\u59cb\u5316Qwen2\u6a21\u578b")\n            from transformers import AutoModelForCausalLM, AutoTokenizer\n            import torch\n            torch.cuda.empty_cache()  # \u6e05\u7406\u7f13\u5b58\n            cls._device = "cuda"\n            cls._model = AutoModelForCausalLM.from_pretrained(\n                cls.model_name,\n                torch_dtype=torch.float16,\n                device_map="auto" if torch.cuda.is_available() else None\n            ).to(cls._device)\n            cls._tokenizer = AutoTokenizer.from_pretrained(cls.model_name)\n\n    @classmethod\n    def get_sentiment_score(cls,text):\n        prompt = "\u8bf7\u4ec5\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u53e5\u5b50\u8fdb\u884c\u60c5\u611f\u8bc4\u5206\uff0c\u5e76\u8fd4\u56de\u4ecb\u4e8e-1\u52301\u4e4b\u95f4\u7684\u5206\u6570\u3002-1\u8868\u793a\u975e\u5e38\u8d1f\u9762\uff0c1\u8868\u793a\u975e\u5e38\u6b63\u9762\uff0c0\u8868\u793a\u4e2d\u7acb\u3002\u65e0\u9700\u63d0\u4f9b\u5176\u4ed6\u4fe1\u606f\u6216\u4e0a\u4e0b\u6587\u3002"\n        messages = [\n            {"role": "system", "content": prompt},\n            {"role": "user", "content": text}\n        ]\n        text = cls._tokenizer.apply_chat_template(\n            messages,\n            tokenize=False,\n            add_generation_prompt=True\n        )\n        model_inputs = cls._tokenizer([text], return_tensors="pt").to(cls._model.device)\n\n        generated_ids = cls._model.generate(\n            **model_inputs,\n            max_new_tokens=512\n        )\n        generated_ids = [\n            output_ids[len(input_ids):] for input_ids, output_ids in zip(model_inputs.input_ids, generated_ids)\n        ]\n\n        response = cls._tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]\n\n        return float(response)\n\n'})}),"\n",(0,r.jsxs)(e.p,{children:["\u4ee5\u4e0a\u4ee3\u7801\u5747\u5728 ",(0,r.jsx)(e.code,{children:"crawler.py"}),"\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"\u6570\u636e\u5b58\u50a8",children:"\u6570\u636e\u5b58\u50a8"}),"\n",(0,r.jsxs)(e.p,{children:["\u7cfb\u7edf\u4f7f\u7528 ",(0,r.jsx)(e.code,{children:"sqlite3"})," \u4fdd\u5b58\u4e2d\u95f4\u6570\u636e\uff0c\u76f8\u5173\u4ee3\u7801\u5728 ",(0,r.jsx)(e.code,{children:"database.py"})," \u4e2d\uff0c\u6570\u636e\u6587\u4ef6\u4e3a ",(0,r.jsx)(e.code,{children:"news.db"}),"\uff0c\u5305\u542b\u4e24\u5f20\u8868\uff1a"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"news"}),"\uff1a\u6e05\u6d17\u540e\u7684\u53ef\u7528\u6570\u636e\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"raw_html"}),"\uff1a\u539f\u59cb\u7f51\u9875\u6570\u636e\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u901f\u5ea6\u7684\u540c\u65f6\uff0c\u53ef\u4ee5\u4fdd\u6301\u6587\u4ef6\u5939\u7684\u6574\u6d01\uff0c\u5982\u679c\u6570\u636e\u91cf\u5927\u53ef\u4ee5\u76f4\u63a5\u5e73\u6ed1\u7684\u8fc1\u79fb\u5230\u6b63\u5f0f\u6570\u636e\u5e93\u4e2d\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:'title="database.py"',children:'# encoding: utf-8\n\'\'\'\n\u5c06\u6570\u636e\u5b58\u50a8\u5230\u6570\u636e\u5e93\n\'\'\'\n\nimport sqlite3\nimport pandas as pd\nfrom collections import Counter\nimport json\n\nclass NewsDatabase:\n    def __init__(self, db_name=\'news.db\'):\n        self.db_name = db_name\n        self.create_tables()\n\n    def create_tables(self):\n        conn = sqlite3.connect(self.db_name)\n        cursor = conn.cursor()\n        \n        cursor.execute(\'\'\'CREATE TABLE IF NOT EXISTS news\n                          (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                           \u65e5\u671f TEXT,\n                           \u65f6\u95f4 TEXT,\n                           \u4fe1\u606f\u6765\u6e90 TEXT,\n                           \u6807\u9898 TEXT,\n                           \u6392\u540d INTEGER,\n                           \u70ed\u5ea6 TEXT,\n                           \u5904\u7406\u540e\u70ed\u5ea6 TEXT,\n                           \u94fe\u63a5 TEXT,\n                           \u60c5\u611f\u5f97\u5206 REAL,\n                           \u52a0\u6743\u60c5\u611f\u5f97\u5206 REAL,\n                           \u5206\u8bcd TEXT)\'\'\')\n        \n        cursor.execute(\'\'\'CREATE TABLE IF NOT EXISTS raw_html\n                          (id INTEGER PRIMARY KEY AUTOINCREMENT,\n                           \u65e5\u671f TEXT,\n                           \u65f6\u95f4 TEXT,\n                           \u5185\u5bb9 TEXT)\'\'\')\n        \n        conn.commit()\n        conn.close()\n\n    def save_data(self, df: pd.DataFrame, table_name=\'news\'):\n        conn = sqlite3.connect(self.db_name)\n        \n        if table_name == \'news\':\n            df[\'\u5206\u8bcd\'] = df[\'\u5206\u8bcd\'].apply(json.dumps)\n        \n        df.to_sql(table_name, conn, if_exists=\'append\', index=False)\n        \n        conn.close()\n\n    def save_raw_html(self, html_content: str):\n        df = pd.DataFrame({\n            \'\u65e5\u671f\': [pd.Timestamp.now().strftime(\'%Y-%m-%d\')],\n            \'\u65f6\u95f4\': [pd.Timestamp.now().strftime(\'%H:%M:%S\')],\n            \'\u5185\u5bb9\': [html_content]\n        })\n        self.save_data(df, \'raw_html\')\n\n    def read_data(self, query="SELECT * FROM news"):\n        conn = sqlite3.connect(self.db_name)\n        \n        df = pd.read_sql_query(query, conn)\n        if \'\u5206\u8bcd\' in df.columns:\n            df[\'\u5206\u8bcd\'] = df[\'\u5206\u8bcd\'].apply(json.loads)\n        \n        conn.close()\n        return df\n\n    def execute_query(self, query, params=None):\n        conn = sqlite3.connect(self.db_name)\n        cursor = conn.cursor()\n        \n        if params:\n            cursor.execute(query, params)\n        else:\n            cursor.execute(query)\n        \n        conn.commit()\n        conn.close()\n\n    def fetch_data(self, query, params=None):\n        conn = sqlite3.connect(self.db_name)\n        cursor = conn.cursor()\n        \n        if params:\n            cursor.execute(query, params)\n        else:\n            cursor.execute(query)\n        \n        rows = cursor.fetchall()\n        conn.close()\n        return rows\n\n    def delete_table(self,table_name:str):\n        """\u5220\u9664news\u5b50\u8868"""\n        conn = sqlite3.connect(self.db_name)\n        try:\n            with conn:\n                conn.execute(f"DROP TABLE IF EXISTS {table_name}")\n            print("news\u8868\u5df2\u6210\u529f\u5220\u9664")\n        except sqlite3.Error as e:\n            print(f"\u5220\u9664news\u8868\u65f6\u53d1\u751f\u9519\u8bef\uff1a{e}")\n\n    def clear_table(self, table_name):\n        """\u6e05\u7a7a\u6307\u5b9a\u8868\u7684\u6240\u6709\u6570\u636e"""\n        conn = sqlite3.connect(self.db_name)\n        try:\n            with conn:\n                conn.execute(f"DELETE FROM {table_name}")\n            print(f"{table_name}\u8868\u5df2\u6210\u529f\u6e05\u7a7a")\n        except sqlite3.Error as e:\n            print(f"\u6e05\u7a7a{table_name}\u8868\u65f6\u53d1\u751f\u9519\u8bef\uff1a{e}")\n\n    def export_word_cloud_data(self,  query="SELECT \u5206\u8bcd FROM news WHERE \u65e5\u671f = (SELECT MAX(\u65e5\u671f) FROM news)"):\n        """\u5bfc\u51fa\u8bcd\u4e91\u6570\u636e"""\n        rows = self.fetch_data(query)\n        words = []\n        for row in rows:\n            words.extend(eval(row[0]))  # \u4f7f\u7528 eval \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u5217\u8868\n        word_counts = Counter(words)\n        word_cloud_data = [(word,count) for word, count in word_counts.items()]\n        return word_cloud_data \n\n    def export_pie_chart_data(self,  query="SELECT \u4fe1\u606f\u6765\u6e90, SUM(CAST(\u5904\u7406\u540e\u70ed\u5ea6 AS INTEGER)) FROM news WHERE \u65e5\u671f = (SELECT MAX(\u65e5\u671f) FROM news) GROUP BY \u4fe1\u606f\u6765\u6e90"):\n        """\u5bfc\u51fa\u997c\u56fe\u6570\u636e"""\n        rows = self.fetch_data(query)\n        pie_chart_data = [(row[0],row[1]) for row in rows]\n        return pie_chart_data\n\n    def export_line_chart_data(self, query = """\n        SELECT \u65e5\u671f, SUM(\u52a0\u6743\u60c5\u611f\u5f97\u5206) as total_sentiment\n        FROM news\n        GROUP BY \u65e5\u671f\n        ORDER BY \u65e5\u671f\n    """):\n        """\u5bfc\u51fa\u6298\u7ebf\u56fe\u6570\u636e"""\n        \n        rows = self.fetch_data(query)\n        line_chart_data = [(row[0],  int(row[1])) for row in rows]\n        return line_chart_data\n\n    def export_bar_chart_data(self,  query="""\n        SELECT \u4fe1\u606f\u6765\u6e90, \u52a0\u6743\u60c5\u611f\u5f97\u5206\n        FROM news\n        WHERE \u65e5\u671f = (SELECT MAX(\u65e5\u671f) FROM news)\n    """):\n        """\u5bfc\u51fa\u67f1\u72b6\u56fe\u6570\u636e"""\n        rows = self.fetch_data(query)\n        bar_chart_data = {}\n        for row in rows:\n            source = row[0]\n            sentiment_score = row[1]\n            if source not in bar_chart_data:\n                bar_chart_data[source] = {"positive": 0, "negative": 0}\n            if sentiment_score > 0:\n                bar_chart_data[source]["positive"] += sentiment_score\n            elif sentiment_score < 0:\n                bar_chart_data[source]["negative"] += sentiment_score\n        \n        formatted_data = [ (source, int(data["positive"]), abs(int(data["negative"])),abs(int(data["positive"])+int(data["negative"])))\n                          for source, data in bar_chart_data.items()]\n        return formatted_data\n\n'})}),"\n",(0,r.jsx)(e.h3,{id:"\u6570\u636e\u53ef\u89c6\u5316",children:"\u6570\u636e\u53ef\u89c6\u5316"}),"\n",(0,r.jsx)(e.p,{children:"\u63a5\u4e0b\u6765\u7ed8\u5236\u4e00\u4e9b\u56fe\u8868\uff0c\u5305\u62ec\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5404\u4e2a\u5e73\u53f0\u7684\u60c5\u7eea\u7ea2\u7eff\u56fe\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u516c\u4f17\u60c5\u7eea\u7684\u6da8\u8dcc\u6298\u7ebf\u56fe\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u6bcf\u65e5\u5168\u7f51\u8bcd\u4e91\u56fe\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u901a\u8fc7pyecharts\u7684\u811a\u624b\u67b6\uff0c\u5bfc\u51fa\u4e3a\u9759\u6001\u7f51\u9875\u3002\u8fd9\u91cc\u4e3a\u4e86\u4ee3\u7801\u76f4\u89c2\uff0c\u5c01\u88c5\u4e3a\u4e86\u7c7b\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'class ChartGenerator:\n    def create_bar_chart(self, data , y_label="Sentiment",title="Sentiment Scores by Source") -> Bar:\n        """Generate a bar chart with positive, negative, and absolute sentiment scores."""\n\n        x_data, y_data_positive, y_data_negative, y_data_absolute = zip(*data)\n        bar = (\n            Bar()\n            .add_xaxis(x_data)\n            .add_yaxis("Positive Sentiment", y_data_positive, stack="stack1", category_gap="50%")\n            .add_yaxis("Negative Sentiment", y_data_negative, stack="stack2", category_gap="50%")\n            .add_yaxis("Absolute Sentiment", y_data_absolute, stack="stack3", category_gap="50%")\n            .set_global_opts(\n                title_opts=opts.TitleOpts(title=title, pos_left="center"),\n                xaxis_opts=opts.AxisOpts(name="Source"),\n                yaxis_opts=opts.AxisOpts(name="Sentiment Score"),\n                legend_opts=opts.LegendOpts(pos_top="10%", pos_right="10%"),\n            )\n        )\n        return bar\n\n    def create_line_chart(self,data,y_label="Weighted Sentiment Score Sum",title="Sum of Weighted Sentiment Scores Over Time") -> Line:\n        """Generate a line chart."""\n        x_data, y_data = zip(*data) \n        line = (\n            Line()\n            .add_xaxis(x_data)\n            .add_yaxis(y_label, y_data, is_smooth=True)\n            .set_global_opts(\n                title_opts=opts.TitleOpts(title=title, pos_left="center"),\n                xaxis_opts=opts.AxisOpts(name="Date", axislabel_opts=opts.LabelOpts(rotate=45)),\n                yaxis_opts=opts.AxisOpts(name=y_label),\n                legend_opts=opts.LegendOpts(pos_bottom="0%")\n            )\n        )\n        return line\n\n    def create_pie_chart(self, data_pairs, title="Information Source Heat") -> Pie:\n        """Generate a pie chart."""\n        pie = (\n            Pie()\n            .add("", data_pairs)\n            .set_global_opts(\n                title_opts=opts.TitleOpts(title=title, pos_left="center"),\n                legend_opts=opts.LegendOpts(pos_bottom="0%")  # Move legend to the bottom\n            )\n            .set_series_opts(label_opts=opts.LabelOpts(formatter="{b}: {d}%"))\n        )\n        return pie\n\n    def create_wordcloud(self, words, title="Word Cloud") -> WordCloud:\n        """Generate a word cloud."""\n        wordcloud = (\n            WordCloud()\n            .add("", words, word_size_range=[20, 100],shape="circle")\n            .set_global_opts(title_opts=opts.TitleOpts(title=title, pos_left="center"))\n        )\n        return wordcloud\n\n    def render_charts(self, charts, output_file=None):\n        """Render multiple charts to a single HTML file."""\n        if output_file is None:\n            output_file = os.path.join("docs", "index.html")\n\n        page = Page(layout=Page.SimplePageLayout)\n        page.add(*charts)\n        page.render(output_file)\n\n\n\n'})}),"\n",(0,r.jsx)(e.h1,{id:"\u4ee3\u7801\u8bbe\u7f6e",children:"\u4ee3\u7801\u8bbe\u7f6e"}),"\n",(0,r.jsxs)(e.p,{children:["\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u722c\u866b\u90e8\u5206\u7684\u4ee3\u7801\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u4fee\u6539\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728main\u51fd\u6570\u4e2d\uff0c\u5c06debug\u8bbe\u4e3aTrue\uff0c\u8fd9\u6837\u4e0d\u4f1a\u771f\u7684\u722c\u53d6\uff0c\u800c\u662f\u8c03\u7528\u672c\u5730\u7684\u5df2\u722c\u53d6\u7684\u7f51\u9875\u3002\u751f\u6210\u540e\u7684\u5185\u5bb9\u5728",(0,r.jsx)(e.code,{children:"docs/index.html"}),"\u3002"]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>i});var s=t(96540);const r={},a=s.createContext(r);function o(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),s.createElement(a.Provider,{value:e},n.children)}},77191:n=>{n.exports=JSON.parse('{"permalink":"/blog/2024/8/30/","source":"@site/blog/2024-8-30.md","title":"\u673a\u5668\u5b66\u4e60\u4e0eLLM\u8206\u60c5\u5206\u6790","description":"\u673a\u5668\u5b66\u4e60\u4e0eLLM\u8206\u60c5\u5206\u6790","date":"2024-08-30T00:00:00.000Z","tags":[{"inline":true,"label":"python","permalink":"/blog/tags/python"}],"readingTime":11.68,"hasTruncateMarker":false,"authors":[{"name":"Allen","title":"software engineer","url":"https://github.com/jiangyangcreate","imageURL":"https://jiangmiemie.com/img/logo-192.svg","key":"jiangmiemie","page":null}],"frontMatter":{"title":"\u673a\u5668\u5b66\u4e60\u4e0eLLM\u8206\u60c5\u5206\u6790","date":"2024-8-30","authors":"jiangmiemie","tags":["python"],"keywords":["python"],"description":"\u673a\u5668\u5b66\u4e60\u4e0eLLM\u8206\u60c5\u5206\u6790"},"unlisted":false,"prevItem":{"title":"\u4e5d\u6708\u751f\u6d3b\u4e0e\u804c\u4e1a\u6210\u957f\u968f\u60f3","permalink":"/blog/2024/9/30/"},"nextItem":{"title":"\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u84dd\u7259\u901a\u4fe1\u793a\u4f8b","permalink":"/blog/2024/7/30/"}}')}}]);